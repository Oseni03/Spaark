// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // One-to-one relationship with Basics
  basics         Basics?
  profiles       Profile[]
  experiences    Experience[]
  educations     Education[]
  skills         Skill[]
  certifications Certification[]
  projects       Project[]
  hackathons     Hackathon[]
}

model Basics {
  id        String    @id @default(cuid())
  name      String
  headline  String
  email     String
  phone     String?
  location  String
  url       String?
  picture   String?
  summary   String
  about     String
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Foreign key to User
  user User @relation(fields: [userId], references: [id])
}

model Profile {
  id        String    @id @default(uuid()) // Unique identifier for each profile
  userId    String
  visible   Boolean   @default(true) // Visibility status of the profile
  network   String // Name of the social or professional network
  username  String // Username for the profile
  icon      String // Slug for the icon (e.g., from simpleicons.org)
  url       String? // URL for the profile (optional)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id        String   @id @default(uuid())
  userId    String
  visible   Boolean  @default(true) // Visibility status of the profile
  company   String
  position  String
  location  String?
  date      String
  summary   String
  picture   String?
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Education {
  id          String   @id @default(uuid())
  userId      String
  visible     Boolean  @default(true) // Visibility status of the profile
  institution String
  studyType   String
  date        String
  summary     String?
  logo        String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id          String   @id @default(uuid())
  userId      String
  visible     Boolean  @default(true) // Visibility status of the profile
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Certification {
  id        String   @id @default(uuid())
  userId    String
  visible   Boolean  @default(true)
  name      String
  issuer    String
  date      String
  summary   String
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id           String   @id @default(uuid())
  userId       String
  visible      Boolean  @default(true)
  name         String
  description  String
  date         String
  technologies String[]
  url          String?
  image        String?
  video        String?
  links        Link[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id        String   @id @default(uuid())
  label     String
  url       String
  icon      String? // Slug for the icon (e.g., from simpleicons.org)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Hackathon   Hackathon? @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  projectId   String?
  hackathonId String?
}

model Hackathon {
  id          String   @id @default(uuid())
  userId      String
  visible     Boolean  @default(true)
  name        String
  description String
  date        String
  location    String
  url         String?
  logo        String?
  links       Link[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
