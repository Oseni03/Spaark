generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum Permission {
  MANAGE_ORGANIZATION
  MANAGE_MEMBERS
  INVITE_MEMBERS
  MANAGE_ROLES
  CREATE_PORTFOLIO
  EDIT_PORTFOLIO
  DELETE_PORTFOLIO
  VIEW_ANALYTICS
}

model User {
  id         String    @id // Remove @default(cuid()) since we'll use Firebase UID
  email      String    @unique
  userType   UserType  @default(INDIVIDUAL)
  subscribed Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  // Relations
  portfolios    Portfolio[]
  blogs         Blog[]
  memberships   OrganizationMember[]
  organizations Organization[] // Organizations owned by user
  transactions  Transaction[]
  subscription  Subscription?

  // One-to-one relation to Code
  code   Code?
  codeId String? @unique
}

model Organization {
  id        String    @id @default(cuid())
  // clerkOrgId String    @unique
  name      String
  slug      String    @unique
  industry  String?
  size      String?
  logo      String?
  website   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Organization settings
  allowMemberInvites Boolean @default(false)
  requireApproval    Boolean @default(true)
  defaultRole        Role    @default(MEMBER)

  // Relations
  ownerId      String
  owner        User                 @relation(fields: [ownerId], references: [id])
  members      OrganizationMember[]
  portfolios   Portfolio[]
  transactions Transaction[]

  // Add new subscription relation
  subscription Subscription?

  @@index([ownerId])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           Role         @default(MEMBER)
  permissions    Permission[]
  status         String       @default("pending") // pending, active, suspended
  invitedBy      String?
  invitedAt      DateTime     @default(now())
  joinedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

model Portfolio {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  isLive         Boolean   @default(false)
  blogEnabled    Boolean   @default(false)
  customDomain   String?
  domainVerified Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  metadata       Json?

  // Ownership
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Portfolio content
  basics         Basics?
  socials        Social[]
  experiences    Experience[]
  educations     Education[]
  skills         Skill[]
  certifications Certification[]
  projects       Project[]
  hackathons     Hackathon[]
  blogs          Blog[]

  @@index([userId])
  @@index([organizationId])
}

model Basics {
  id          String    @id @default(cuid())
  name        String
  headline    String
  email       String
  phone       String?
  location    String
  picture     String?
  years       Int?
  summary     String
  about       String
  portfolioId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  // Relation to Portfolio
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Social {
  id          String    @id @default(cuid())
  portfolioId String
  visible     Boolean   @default(true)
  network     String // e.g., "github", "linkedin"
  username    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, network])
  @@index([portfolioId])
}

model Experience {
  id           String   @id @default(cuid())
  portfolioId  String
  visible      Boolean  @default(true)
  company      String
  position     String
  location     String?
  date         String
  summary      String
  picture      String?
  url          String?
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Education {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  institution String
  studyType   String
  date        String
  summary     String?
  logo        String?
  url         String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Skill {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  description String?
  level       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Certification {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  issuer      String
  date        String
  summary     String
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Project {
  id           String    @id @default(cuid())
  portfolioId  String
  visible      Boolean   @default(true)
  name         String
  description  String
  date         String
  technologies String[]
  website      String?
  source       String?
  image        String?
  video        String?
  type         String    @default("Web application")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Link {
  id        String   @id @default(cuid())
  label     String
  url       String
  icon      String? // Slug for the icon (e.g., from simpleicons.org)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Hackathon   Hackathon? @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String?
}

model Hackathon {
  id           String   @id @default(cuid())
  portfolioId  String
  visible      Boolean  @default(true)
  name         String
  description  String
  date         String
  location     String
  url          String?
  logo         String?
  links        Link[]
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Transaction {
  id             String        @id @default(cuid())
  userId         String?
  organizationId String?
  status         String        @default("pending")
  priceId        String
  title          String
  amount         Float
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String?   @unique
  organizationId       String?   @unique
  polarSubscriptionId  String?   @unique // Polar subscription/session/checkout ID
  status               String    // active, cancelled, trialing, etc (mirrored from Polar)
  planType             String    // BASIC, PRO, etc
  blogEnabled          Boolean   @default(false)
  blogLimit            Int?
  customPortfolioLimit Int?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime? @updatedAt

  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization? @relation(fields: [organizationId], references: [id])
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  full_name String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Code {
  id        String    @id @default(cuid())
  code      String    @unique
  type      String? // e.g., 'referral', 'discount', etc.
  value     Float? // optional value associated with the code
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Optional relation to User - one Code can belong to one User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Blog {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       Json? // For rich text content
  excerpt       String?   @db.Text
  featuredImage String?
  status        String    @default("draft") // draft, published
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  views         Int       @default(0)
  likes         Int       @default(0)

  // Relations
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id])
  tags        Tag[]
  comments    Comment[]
  authorId    String

  @@index([portfolioId])
  @@index([authorId])
  @@index([status])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  authorId  String // Clerk user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@index([authorId])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
