generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id // Remove @default(cuid()) since we'll use Firebase UID
  email      String    @unique
  subscribed Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  // Relations
  portfolios             Portfolio[]
  blogs                  Blog[]
  subscriptions          Subscription[]
  featureRequests        FeatureRequest[]
  featureVotes           FeatureVote[]
  featureRequestComments FeatureRequestComment[]

  // One-to-one relation to Code
  code          Code?
  codeId        String?   @unique
  name          String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

model Portfolio {
  id             String    @id @default(cuid())
  name           String
  slug           String    @unique
  isLive         Boolean   @default(false)
  blogEnabled    Boolean   @default(false)
  customDomain   String?
  domainVerified Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
  template       String    @default("default")

  // Ownership
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Portfolio content
  basics         Basics?
  socials        Social[]
  experiences    Experience[]
  educations     Education[]
  skills         Skill[]
  certifications Certification[]
  projects       Project[]
  hackathons     Hackathon[]
  blogs          Blog[]

  @@index([userId])
}

model Basics {
  id          String    @id @default(cuid())
  name        String
  headline    String
  email       String
  phone       String?
  location    String
  picture     String?
  years       Int?
  summary     String
  about       String
  portfolioId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  // Relation to Portfolio
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Social {
  id          String    @id @default(cuid())
  portfolioId String
  visible     Boolean   @default(true)
  network     String // e.g., "github", "linkedin"
  username    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, network])
  @@index([portfolioId])
}

model Experience {
  id           String   @id @default(cuid())
  portfolioId  String
  visible      Boolean  @default(true)
  company      String
  position     String
  location     String?
  date         String
  summary      String
  picture      String?
  url          String?
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Education {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  institution String
  studyType   String
  date        String
  summary     String?
  logo        String?
  url         String?
  location    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Skill {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  description String?
  level       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Certification {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  issuer      String
  date        String
  summary     String
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Project {
  id           String    @id @default(cuid())
  portfolioId  String
  visible      Boolean   @default(true)
  name         String
  description  String
  date         String
  technologies String[]
  website      String?
  source       String?
  image        String?
  video        String?
  type         String    @default("Web application")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Link {
  id        String   @id @default(cuid())
  label     String
  url       String
  icon      String? // Slug for the icon (e.g., from simpleicons.org)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Hackathon   Hackathon? @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String?
}

model Hackathon {
  id           String   @id @default(cuid())
  portfolioId  String
  visible      Boolean  @default(true)
  name         String
  description  String
  date         String
  location     String
  url          String?
  logo         String?
  links        Link[]
  technologies String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Subscription {
  id                          String    @id @default(cuid())
  userId                      String
  amount                      Int
  currency                    String
  recurringInterval           String
  status                      String
  currentPeriodStart          DateTime
  currentPeriodEnd            DateTime
  cancelAtPeriodEnd           Boolean   @default(false)
  canceledAt                  DateTime?
  startedAt                   DateTime
  endsAt                      DateTime?
  endedAt                     DateTime?
  customerId                  String
  productId                   String
  discountId                  String?
  checkoutId                  String
  customerCancellationReason  String?
  customerCancellationComment String?
  metadata                    Json?
  customFieldData             Json?
  portfolioLimit              Int       @default(1)
  blogEnabled                 Boolean   @default(false)
  blogLimit                   Int?
  customPortfolioLimit        Int?
  customArticleLimit          Int?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  full_name String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Code {
  id        String    @id @default(cuid())
  code      String    @unique
  type      String? // e.g., 'referral', 'discount', etc.
  value     Float? // optional value associated with the code
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Optional relation to User - one Code can belong to one User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Blog {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       Json? // For rich text content
  excerpt       String?   @db.Text
  featuredImage String?
  status        String    @default("draft") // draft, published
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  views         Int       @default(0)
  likes         Int       @default(0)

  // Relations
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  author      User      @relation(fields: [authorId], references: [id])
  tags        Tag[]
  comments    Comment[]
  authorId    String

  @@index([portfolioId])
  @@index([authorId])
  @@index([status])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  authorId  String // Clerk user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@index([authorId])
}

model Newsletter {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeatureRequest {
  id          String   @id @default(cuid())
  title       String
  description String
  useCase     String?
  painPoint   String?
  outcome     String?
  category    String?
  tags        String[]
  status      String   @default("Under Consideration") // Under Consideration, Planned, In Progress, Launched, Not Planned
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  authorId String
  author   User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  votes    FeatureVote[]
  comments FeatureRequestComment[]

  @@index([authorId])
  @@index([status])
}

model FeatureVote {
  id               String   @id @default(cuid())
  featureRequestId String
  userId           String
  createdAt        DateTime @default(now())

  // Relations
  featureRequest FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([featureRequestId, userId])
  @@index([featureRequestId])
  @@index([userId])
}

model FeatureRequestComment {
  id               String   @id @default(cuid())
  featureRequestId String
  userId           String
  content          String   @db.Text
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  featureRequest FeatureRequest @relation(fields: [featureRequestId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([featureRequestId])
  @@index([userId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
