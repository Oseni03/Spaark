This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-21T14:51:56.140Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.eslintrc.json
.gitignore
app/[subdomain]/blog/layout.js
app/[subdomain]/blog/page.js
app/[subdomain]/blog/post/[slug]/page.js
app/[subdomain]/components/portfolio-skeleton.jsx
app/[subdomain]/layout.js
app/[subdomain]/page.js
app/activate-code/page.js
app/api/blogs/route.js
app/api/blogs/validate-slug/route.js
app/api/domains/route.js
app/api/file-upload/route.js
app/api/organizations/[orgId]/subscription/route.js
app/api/payment/checkout/route.js
app/api/payment/verify/route.js
app/api/portfolio/[portfolioId]/route.js
app/api/portfolio/route.js
app/api/send-user-contact-email/route.js
app/api/webhooks/clerk/route.js
app/api/webhooks/flutterwave/route.js
app/blog/components/Prose.jsx
app/blog/components/ReadMore.jsx
app/blog/components/TableOfContents.jsx
app/blog/components/TryProduct.jsx
app/blog/page.js
app/blog/post/[slug]/page.js
app/blog/post/[slug]/Post.jsx
app/builder/[portfolioId]/layout.js
app/builder/[portfolioId]/page.jsx
app/contact-us/components/contact-form.jsx
app/contact-us/page.js
app/dashboard/blogs/[postId]/edit/page.jsx
app/dashboard/blogs/[postId]/page.jsx
app/dashboard/blogs/components/blog-form.jsx
app/dashboard/blogs/components/featured-image.jsx
app/dashboard/blogs/new/page.js
app/dashboard/blogs/page.js
app/dashboard/components/base-card.jsx
app/dashboard/components/blog-card.jsx
app/dashboard/components/create-blog-card.jsx
app/dashboard/components/create-portfolio-card.jsx
app/dashboard/components/portfolio-card.jsx
app/dashboard/layout.js
app/dashboard/portfolios/page.js
app/dashboard/settings/components/subscription-settings.jsx
app/dashboard/settings/page.js
app/globals.css
app/layout.js
app/not-found.jsx
app/page.js
app/privacy-policy/page.js
app/providers.js
app/robots.js
app/sign-in/[[...sign-in]]/page.js
app/sign-up/[[...sign-up]]/page.js
app/sitemap.js
app/studio/[[...tool]]/page.jsx
app/success/page.js
app/terms/page.js
components.json
components/aceternity/sidebar.jsx
components/blog-settings.jsx
components/blog/blog-list-skeleton.jsx
components/blog/blog-post-skeleton.jsx
components/blog/blog-post.jsx
components/build-with-button.jsx
components/copyright.jsx
components/custom-link.jsx
components/dashboard-sidebar.jsx
components/dialogs/certification-dialog.jsx
components/dialogs/education-dialog.jsx
components/dialogs/experience-dialog.jsx
components/dialogs/hackathon-dialog.jsx
components/dialogs/portfolio-dialog.jsx
components/dialogs/profile-dialog.jsx
components/dialogs/project-dialog.jsx
components/dialogs/skill-dialog.jsx
components/dialogs/team-dialog.jsx
components/dialogs/testimonial-dialog.jsx
components/domain-configuration.jsx
components/domain-settings.jsx
components/domain-status.jsx
components/error-message.jsx
components/homepage/accordion-component.jsx
components/homepage/faq.jsx
components/homepage/features.jsx
components/homepage/hero-section.jsx
components/homepage/newsletter.jsx
components/homepage/pricing.jsx
components/left-app-sidebar.jsx
components/magicui/blur-fade-text.jsx
components/magicui/blur-fade.jsx
components/magicui/dock.jsx
components/mode-toggle.jsx
components/nav-actions.jsx
components/nav-favorites.jsx
components/nav-main.jsx
components/nav-secondary.jsx
components/nav-workspaces.jsx
components/right-app-sidebar.jsx
components/section-icon.jsx
components/sections/basics.jsx
components/sections/certification.jsx
components/sections/education.jsx
components/sections/experience.jsx
components/sections/hackathon.jsx
components/sections/picture/section.jsx
components/sections/picture/uploader.jsx
components/sections/profile.jsx
components/sections/project.jsx
components/sections/shared/section-base.jsx
components/sections/shared/section-list-item.jsx
components/sections/shared/section-options.jsx
components/sections/skill.jsx
components/sections/team.jsx
components/sections/template.jsx
components/sections/testimonial.jsx
components/settings-tab.jsx
components/team-switcher.jsx
components/templates/default.jsx
components/templates/template-wrapper.jsx
components/ui/3d-card.jsx
components/ui/accordion.jsx
components/ui/alert-dialog.jsx
components/ui/alert.jsx
components/ui/aspect-ratio.jsx
components/ui/avatar.jsx
components/ui/badge-input.jsx
components/ui/badge.jsx
components/ui/breadcrumb.jsx
components/ui/button.jsx
components/ui/card.jsx
components/ui/checkbox.jsx
components/ui/collapsible.jsx
components/ui/context-menu.jsx
components/ui/dialog.jsx
components/ui/dock.jsx
components/ui/dropdown-menu.jsx
components/ui/form.jsx
components/ui/hover-card.jsx
components/ui/input.jsx
components/ui/label.jsx
components/ui/navigation-menu.jsx
components/ui/popover.jsx
components/ui/radio-group.jsx
components/ui/rainbow-button.jsx
components/ui/resizable.jsx
components/ui/rich-input.jsx
components/ui/scroll-area.jsx
components/ui/select.jsx
components/ui/separator.jsx
components/ui/sheet.jsx
components/ui/sidebar.jsx
components/ui/skeleton.jsx
components/ui/sonner.jsx
components/ui/Spinner.jsx
components/ui/switch.jsx
components/ui/tabs.jsx
components/ui/textarea.jsx
components/ui/toggle-group.jsx
components/ui/toggle.jsx
components/ui/tooltip.jsx
components/url-input.jsx
components/wrapper/blog-wrapper.jsx
components/wrapper/footer.jsx
components/wrapper/form-wrapper.jsx
components/wrapper/header.jsx
components/wrapper/page-wrapper.jsx
config/site.js
context/OrganizationContext.js
context/PortfolioContext.js
context/UserContext.js
emails/templates/contact-notification.jsx
generateCodes.js
hooks/use-code-activation.js
hooks/use-contact-form.js
hooks/use-media-query.js
hooks/use-mobile.jsx
hooks/use-user-contact-form.jsx
hooks/use-verify-payment.js
jsconfig.json
lib/blog-utils.js
lib/db.js
lib/domains.js
lib/upload-image.js
lib/utils.js
LICENCE.txt
middleware.js
next.config.mjs
package.json
postcss.config.mjs
prisma/migrations/20241206200432_user_basics/migration.sql
prisma/migrations/20241207014556_remove_user_table/migration.sql
prisma/migrations/20241207035053_add_profile/migration.sql
prisma/migrations/20241207210036_fix_profile/migration.sql
prisma/migrations/20241207231543_added_datetime/migration.sql
prisma/migrations/20241208005629_add_experience/migration.sql
prisma/migrations/20241208014329_add_education/migration.sql
prisma/migrations/20241208014848_modify_id/migration.sql
prisma/migrations/20241208020700_add_skill/migration.sql
prisma/migrations/20241208024605_add_certification/migration.sql
prisma/migrations/20241208230448_add_project/migration.sql
prisma/migrations/20241209003952_add_hackathon/migration.sql
prisma/migrations/20241209161217_replace_skill_keywords_description/migration.sql
prisma/migrations/20241209162950_rename_project_keywords_to_technologies/migration.sql
prisma/migrations/20241209164434_add_links_to_project/migration.sql
prisma/migrations/20241211012718_add_logo_experience/migration.sql
prisma/migrations/20241211014701_rename_logo_url_to_picture/migration.sql
prisma/migrations/20241211025845_add_logo_to_education/migration.sql
prisma/migrations/20241211121040_add_logo_to_hackathon/migration.sql
prisma/migrations/20241211135119_hackathon_add_links/migration.sql
prisma/migrations/20241211235042_link_fix_error/migration.sql
prisma/migrations/20241214194244_add_user/migration.sql
prisma/migrations/20241214201353_connect_user_to_sections/migration.sql
prisma/migrations/20241214214530_minor_modifications/migration.sql
prisma/migrations/20241215020056_profile_modify/migration.sql
prisma/migrations/20241216024434_add_transaction/migration.sql
prisma/migrations/20241216042430_user_add_subscription_status/migration.sql
prisma/migrations/20241216053534_user_modify_subscribed/migration.sql
prisma/migrations/20241231140609_add_contact/migration.sql
prisma/migrations/20250107051206_add_code/migration.sql
prisma/migrations/20250117022156_fresh_tables/migration.sql
prisma/migrations/20250126014952_add_template_portfolio/migration.sql
prisma/migrations/20250126015821_change_template_default/migration.sql
prisma/migrations/20250127001304_add_custom_domain_portfolio/migration.sql
prisma/migrations/20250201233849_add_subscription/migration.sql
prisma/migrations/20250202023115_add_blog_enabled/migration.sql
prisma/migrations/20250202154533_replace_is_public_with_is_live/migration.sql
prisma/migrations/20250202174524_add_portfolio_limit/migration.sql
prisma/migrations/20250204223606_modify_blog_featured_image/migration.sql
prisma/migrations/20250206235208_portfolio_add_testimonials/migration.sql
prisma/migrations/20250207021905_portfolio_add_teams/migration.sql
prisma/migrations/20250210035725_org_permissions/migration.sql
prisma/migrations/20250211115432_connect_org_subscription/migration.sql
prisma/migrations/20250211122322_connect_transaction_organization/migration.sql
prisma/migrations/20250211125315_add_newsletter/migration.sql
prisma/migrations/20250217153022_project_remove_links/migration.sql
prisma/migrations/20250220075206_portfolio_remove_is_primary/migration.sql
prisma/migrations/20250221143127_user_remove_username/migration.sql
prisma/migrations/migration_lock.toml
prisma/schema.prisma
public/file.svg
public/github.svg
public/globe.svg
public/next.svg
public/spaark.svg
public/vercel.svg
public/window.svg
react-email-starter/emails/notion-magic-link.jsx
react-email-starter/emails/plaid-verify-identity.jsx
react-email-starter/emails/stripe-welcome.tsx
react-email-starter/emails/vercel-invite-user.jsx
react-email-starter/package.json
react-email-starter/readme.md
README.md
redux/features/blogSlice.js
redux/features/portfolioSlice.js
redux/features/userSlice.js
redux/provider.js
redux/store.js
redux/thunks/basics.js
redux/thunks/blog.js
redux/thunks/certifications.js
redux/thunks/educations.js
redux/thunks/experience.js
redux/thunks/hackathon.js
redux/thunks/portfolio.js
redux/thunks/profile.js
redux/thunks/project.js
redux/thunks/skill.js
redux/thunks/team.js
redux/thunks/testimonials.js
sanity.cli.js
sanity.config.js
sanity/env.js
sanity/lib/client.js
sanity/lib/image.js
sanity/lib/live.js
sanity/lib/queries.js
sanity/schemaTypes/authorType.js
sanity/schemaTypes/blockContentType.js
sanity/schemaTypes/categoryType.js
sanity/schemaTypes/index.js
sanity/schemaTypes/postType.js
sanity/structure.js
schema/contact.js
schema/secrets.js
schema/sections/basics.js
schema/sections/blog.js
schema/sections/certification.js
schema/sections/education.js
schema/sections/experience.js
schema/sections/hackathon.js
schema/sections/index.js
schema/sections/language.js
schema/sections/profile.js
schema/sections/project.js
schema/sections/skill.js
schema/sections/team.js
schema/sections/testimonial.js
schema/shared/id.js
schema/shared/items.js
schema/shared/links.js
schema/shared/url.js
schema/user.js
services/basics.js
services/blog.js
services/certification.js
services/code.js
services/contact.js
services/domain.js
services/education.js
services/experience.js
services/hackathon.js
services/newsletter.js
services/organization.js
services/portfolio.js
services/profile.js
services/project.js
services/shared.js
services/skill.js
services/subscription.js
services/team.js
services/testimonial.js
services/user.js
services/webhooks.js
tailwind.config.js
utils/constants.js
utils/resume.jsx
utils/subscription-plans.js
utils/text.js
utils/webhook-types.js
vercel.json

================================================================
Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

.vercel

generated_codes.csv

================
File: app/[subdomain]/blog/layout.js
================
import { getPortfolio } from "@/services/portfolio";

export async function generateMetadata({ params }) {
	const validatedParams = await Promise.resolve(params);
	const { subdomain } = validatedParams;
	const portfolio = await getPortfolio(subdomain);
	const name =
		portfolio.data?.basics?.name || portfolio.data?.name || subdomain;

	return {
		title: `Blog`,
		description: `Read the latest posts from ${name}'s blog`,
	};
}

export default function BlogLayout({ children }) {
	return children;
}

================
File: app/[subdomain]/blog/page.js
================
"use client";

import { useEffect, useState, Suspense } from "react";
import Link from "next/link";
import { useParams, useSearchParams, useRouter } from "next/navigation";
import { usePortfolio } from "@/context/PortfolioContext";
import { getBlogPosts } from "@/services/blog";
import { getPortfolioFromSlug } from "@/lib/blog-utils";
import BlogListSkeleton from "../../../components/blog/blog-list-skeleton";
import NotFound from "@/app/not-found";
import Image from "next/image";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { logger } from "@/lib/utils";

function TagFilter({ tags, selectedTag, onTagSelect }) {
	logger.info("Tags:", tags);
	return (
		<div className="mb-8">
			<div className="flex items-center flex-wrap gap-2">
				<Badge
					className={`cursor-pointer ${!selectedTag ? "bg-primary" : ""}`}
					onClick={() => onTagSelect(null)}
				>
					All
				</Badge>
				{tags.map((tag) => (
					<Badge
						key={tag.id}
						className={`cursor-pointer ${selectedTag === tag.id ? "bg-primary" : ""}`}
						variant="secondary"
						onClick={() => onTagSelect(tag.id)}
					>
						{tag.name}
					</Badge>
				))}
			</div>
		</div>
	);
}

function BlogContent() {
	const searchParams = useSearchParams();
	const router = useRouter();
	const { subdomain } = useParams();
	const portfolioContext = usePortfolio();
	const [posts, setPosts] = useState([]);
	const [allPosts, setAllPosts] = useState([]);
	const [tags, setTags] = useState([]);
	const [portfolio, setPortfolio] = useState(portfolioContext?.portfolio);
	const [isLoading, setIsLoading] = useState(true);
	const [error, setError] = useState(null);

	const selectedTag = searchParams.get("tag");

	const handleTagSelect = (tagId) => {
		if (tagId) {
			router.push(`/blog?tag=${tagId}`);
		} else {
			router.push("/blog");
		}
	};

	useEffect(() => {
		async function initializeData() {
			try {
				// If we don't have portfolio data from context, fetch it
				if (!portfolio) {
					const portfolioResult =
						await getPortfolioFromSlug(subdomain);
					if (!portfolioResult.success) {
						setError("Portfolio not found");
						return;
					}
					setPortfolio(portfolioResult.data.portfolio);
				}

				// Only fetch posts if we have portfolio data and blog is enabled
				if (portfolio?.blogEnabled) {
					const result = await getBlogPosts(portfolio.id);
					if (result.success) {
						setAllPosts(result.data);
						// Extract unique tags from all posts
						const uniqueTags = Array.from(
							new Set(result.data.flatMap((post) => post.tags))
						);
						setTags(uniqueTags);
					} else {
						setError("Failed to fetch posts");
						return NotFound();
					}
				} else {
					setError("Blog not enabled");
				}
			} catch (error) {
				console.error("Error:", error);
				setError("An error occurred");
			} finally {
				setIsLoading(false);
			}
		}

		initializeData();
	}, [subdomain, portfolio]);

	// Filter posts when tag changes
	useEffect(() => {
		if (selectedTag) {
			setPosts(
				allPosts.filter((post) =>
					post.tags?.some((tag) => tag.id === selectedTag)
				)
			);
		} else {
			setPosts(allPosts);
		}
	}, [selectedTag, allPosts]);

	if (isLoading) {
		return <BlogListSkeleton />;
	}

	if (error || !posts.length) {
		return NotFound();
	}

	return (
		<div className="py-16 sm:py-24">
			<div className="mx-auto max-w-7xl px-6 lg:px-8">
				<h2 className="mb-8 font-cal text-3xl tracking-tight text-gray-900 dark:text-white sm:text-4xl">
					From the blog
				</h2>

				<TagFilter
					tags={tags}
					selectedTag={selectedTag}
					onTagSelect={handleTagSelect}
				/>

				<div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
					{posts.map((post) => (
						<PostCard key={post.id} post={post} />
					))}
				</div>
			</div>
		</div>
	);
}

export default function Page() {
	return (
		<Suspense fallback={<BlogListSkeleton />}>
			<BlogContent />
		</Suspense>
	);
}

function PostCard({ post }) {
	return (
		<Card className="overflow-hidden transition-transform duration-300 hover:scale-105">
			<Link href={`/blog/post/${post.slug}`}>
				<div className="relative h-48 w-full">
					<Image
						src={post.featuredImage}
						alt={post.title}
						layout="fill"
						objectFit="cover"
					/>
				</div>
				<CardContent className="pt-4">
					<h3 className="mb-2 font-cal text-lg leading-6 text-gray-900 group-hover:text-gray-600 dark:text-gray-100 dark:group-hover:text-gray-300">
						{post.title}
					</h3>
					<p className="mb-4 line-clamp-2 text-sm leading-6 text-gray-600 dark:text-gray-300">
						{post.excerpt}
					</p>
					<div className="flex items-center gap-x-4">
						{/* <Image
							src={post.author.imageUrl}
							alt={post.title}
							className="h-8 w-8 rounded-full bg-gray-50 dark:bg-gray-800"
							width={32}
							height={32}
						/> */}
						<div className="text-sm">
							{/* <p className="font-semibold text-gray-900 dark:text-gray-100">
								{post.author.name}
							</p> */}
							<time
								dateTime={post.publishedAt}
								className="text-gray-500"
							>
								{post.publishedAt}
							</time>
						</div>
					</div>
					<div className="mt-auto flex flex-col px-5">
						{post.tags && post.tags.length > 0 && (
							<div className="mt-2 flex flex-wrap gap-1">
								{tags?.map((tag) => (
									<Badge
										className="px-1 py-0 text-[10px]"
										variant="secondary"
										key={tag.id}
									>
										{tag.name}
									</Badge>
								))}
							</div>
						)}
					</div>
				</CardContent>
			</Link>
		</Card>
	);
}

================
File: app/[subdomain]/blog/post/[slug]/page.js
================
"use client";

import { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import { usePortfolio } from "@/context/PortfolioContext";
import { formatDate } from "@/lib/utils";
import { getBlogPost } from "@/services/blog";
import { getPortfolioFromSlug } from "@/lib/blog-utils";
import { BlogPostSkeleton } from "@/components/blog/blog-post-skeleton";
import NotFound from "@/app/not-found";
import { BlogPost } from "@/components/blog/blog-post";
import { Button } from "@/components/ui/button";
import { ChevronLeft } from "lucide-react";
import Head from "next/head";

export default function Page() {
	const { slug, subdomain } = useParams();
	const router = useRouter();
	const portfolioContext = usePortfolio();
	const [post, setPost] = useState(null);
	const [portfolio, setPortfolio] = useState(portfolioContext?.portfolio);
	const [isLoading, setIsLoading] = useState(true);
	const [error, setError] = useState(null);

	useEffect(() => {
		async function initializeData() {
			try {
				// If we don't have portfolio data from context, fetch it
				if (!portfolio) {
					const portfolioResult =
						await getPortfolioFromSlug(subdomain);
					if (!portfolioResult.success) {
						setError("Portfolio not found");
						return;
					}
					setPortfolio(portfolioResult.data.portfolio);
				}

				// Only fetch post if we have portfolio data and blog is enabled
				if (portfolio?.blogEnabled) {
					const result = await getBlogPost(portfolio.id, slug);
					if (result.success) {
						setPost(result.data);
					} else {
						setError("Post not found");
					}
				} else {
					setError("Blog not enabled");
				}
			} catch (error) {
				console.error("Error:", error);
				setError("An error occurred");
			} finally {
				setIsLoading(false);
			}
		}

		initializeData();
	}, [slug, subdomain, portfolio]);

	if (isLoading) {
		return <BlogPostSkeleton />;
	}

	if (error || !post) {
		return NotFound();
	}

	const contentHtml =
		typeof post.content === "string"
			? post.content
			: JSON.stringify(post.content);

	return (
		<>
			<Head>
				<title>{`${post.title} | ${portfolio.basics?.name || "Blog"}`}</title>
				<meta name="description" content={post.excerpt || post.title} />
				<meta property="og:title" content={post.title} />
				<meta
					property="og:description"
					content={post.excerpt || post.title}
				/>
				{post.featuredImage && (
					<meta property="og:image" content={post.featuredImage} />
				)}
			</Head>

			<div className="space-y-4">
				<Button
					variant="ghost"
					className="flex items-center gap-2 mt-8"
					onClick={() => router.back()}
				>
					<ChevronLeft className="h-4 w-4" />
					Back to Blog
				</Button>

				<BlogPost
					title={post.title}
					excerpt={post.excerpt}
					featuredImage={post.featuredImage}
					date={formatDate(post.publishedAt)}
					author={{
						name: portfolio.basics?.name || "Anonymous",
						image: portfolio.basics?.picture,
					}}
					content={contentHtml}
				/>
			</div>
		</>
	);
}

================
File: app/[subdomain]/components/portfolio-skeleton.jsx
================
import { Skeleton } from "@/components/ui/skeleton";

const PortfolioSkeleton = () => {
	return (
		<>
			{/* Header section */}
			<div className="flex items-center justify-between">
				<div className="space-y-4">
					{/* Name skeleton */}
					<Skeleton className="h-12 w-48" />
					{/* Bio text skeleton */}
					<Skeleton className="h-4 w-60 md:w-96" />
				</div>
				{/* Profile picture skeleton - enhanced circular styling */}
				<Skeleton className="h-24 w-24 rounded-full ring-2 ring-offset-2" />
			</div>

			{/* About section */}
			<div className="space-y-4">
				<Skeleton className="h-8 w-24" /> {/* "About" header */}
				<div className="space-y-2">
					<Skeleton className="h-4 w-full" />
					<Skeleton className="h-4 w-5/6" />
					<Skeleton className="h-4 w-4/6" />
				</div>
			</div>

			{/* Work Experience section */}
			<div className="space-y-6 mt-6">
				<Skeleton className="h-8 w-48" />{" "}
				{/* "Work Experience" header */}
				{/* Work items - repeating 4 times for each company */}
				{[1, 2, 3, 4].map((i) => (
					<div key={i} className="flex items-center space-x-4">
						<Skeleton className="h-12 w-12 rounded-full" />{" "}
						{/* Company logo */}
						<div className="space-y-2">
							<Skeleton className="h-4 w-32" />{" "}
							{/* Company name */}
							<Skeleton className="h-3 w-40" /> {/* Position */}
						</div>
						<div className="ml-auto">
							<Skeleton className="h-3 w-32" /> {/* Date range */}
						</div>
					</div>
				))}
			</div>
			{/* Education section */}
			<div className="space-y-6 mt-6">
				<Skeleton className="h-8 w-48" />{" "}
				{/* "Work Experience" header */}
				{/* Work items - repeating 4 times for each company */}
				{[1, 2, 3, 4].map((i) => (
					<div key={i} className="flex items-center space-x-4">
						<Skeleton className="h-12 w-12 rounded-full" />{" "}
						{/* Company logo */}
						<div className="space-y-2">
							<Skeleton className="h-4 w-32" />{" "}
							{/* Company name */}
							<Skeleton className="h-3 w-40" /> {/* Position */}
						</div>
						<div className="ml-auto">
							<Skeleton className="h-3 w-32" /> {/* Date range */}
						</div>
					</div>
				))}
			</div>
		</>
	);
};

export default PortfolioSkeleton;

================
File: app/[subdomain]/layout.js
================
import React from "react";
import { z } from "zod";
import { PORTFOLIO_TAILWIND_CLASS } from "@/utils/constants";
import { getPortfolio } from "@/services/portfolio";
import { logger, transformPortfolio } from "@/lib/utils";
import NotFound from "../not-found";
import { cn } from "@/lib/utils";
import { PortfolioProvider } from "@/context/PortfolioContext";

// Input validation schema
const ParamsSchema = z.object({
	subdomain: z.string().min(1, "Portfolio slug is required"),
});

export default async function PortfolioLayout({ params, children }) {
	try {
		// Await and validate params
		const resolvedParams = await Promise.resolve(params);
		const validationResult = ParamsSchema.safeParse(resolvedParams);

		if (!validationResult.success) {
			logger.error("Slug validation error: ", validationResult.error);
			return NotFound();
		}

		const { subdomain: portfolioSlug } = validationResult.data;

		// Fetch portfolio by slug
		const portfolioResult = await getPortfolio(portfolioSlug);
		logger.info("Portfolio result: ", portfolioResult);

		if (!portfolioResult.success || !portfolioResult.data) {
			return NotFound();
		}

		// Transform the portfolio data
		const portfolio = transformPortfolio(portfolioResult.data);

		// Extract portfolio details for meta tags
		const name = portfolio.basics?.name || portfolioSlug;
		const headline = portfolio.basics?.headline;
		const picture = portfolio.basics?.picture;
		const summary = portfolio.basics?.summary || "Welcome to my portfolio!";

		// Meta tags
		const metaTags = {
			title: headline ? `${name} - ${headline}` : name,
			description: summary,
			image: picture,
			url: portfolio.customDomain
				? portfolio.customDomain
				: `${portfolioSlug}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
		};

		return (
			<>
				<head>
					<title>{metaTags.title}</title>
					<meta name="description" content={metaTags.description} />
					<meta property="og:title" content={metaTags.title} />
					<meta
						property="og:description"
						content={metaTags.description}
					/>
					<meta property="og:type" content="profile" />
					<meta property="og:username" content={portfolioSlug} />
					<meta name="twitter:card" content={summary} />
					<meta name="twitter:title" content={metaTags.title} />
					<meta name="twitter:description" content={summary} />
					{metaTags.image && (
						<meta property="og:image" content={metaTags.image} />
					)}
					<meta name="url" content={metaTags.url} />
				</head>
				<body
					className={cn(
						"mx-auto max-w-7xl px-6 lg:px-8",
						"scrollbar-hide",
						"overflow-y-auto" // Add this to enable scrolling
					)}
				>
					<PortfolioProvider
						portfolio={portfolio}
						metaTags={metaTags}
						blogEnabled={portfolio.blogEnabled}
					>
						{children}
					</PortfolioProvider>
				</body>
			</>
		);
	} catch (error) {
		logger.error(`Error loading portfolio for ${portfolioSlug}:`, error);
		return NotFound();
	}
}

// Generate metadata for SEO
export async function generateMetadata({ params }) {
	const validatedParams = await Promise.resolve(params);
	const { subdomain } = validatedParams;
	const portfolio = await getPortfolio(subdomain);
	const name = portfolio.data?.basics?.name || portfolio.data?.name;
	const headline = portfolio.data?.basics?.headline;

	return {
		title: {
			template: `%s | ${name}`,
			default: headline ? `${name} - ${headline}` : name,
		},
		description: portfolio.data?.basics?.summary || `${name}'s Portfolio`,
	};
}

================
File: app/[subdomain]/page.js
================
"use client";

import { useState, useEffect } from "react";
import { TemplateWrapper } from "@/components/templates/template-wrapper";
import PortfolioSkeleton from "./components/portfolio-skeleton";
import { usePortfolio } from "@/context/PortfolioContext";
import { logger } from "@/lib/utils";
import { CONTAINER_CLASS, CONTENT_CLASS } from "@/utils/constants";
import { cn } from "@/lib/utils";

export default function Page() {
	const { portfolio } = usePortfolio();
	const [isLoading, setIsLoading] = useState(true);

	useEffect(() => {
		if (portfolio) {
			setIsLoading(false);
		}
	}, [portfolio]);

	if (isLoading) {
		return (
			<div className={cn(CONTAINER_CLASS, "py-12")}>
				<div className={CONTENT_CLASS}>
					<PortfolioSkeleton />
				</div>
			</div>
		);
	}

	const portfolioData = {
		basics: portfolio?.basics || defaultBasics,
		experiences: (portfolio?.experiences?.items || []).filter(
			(item) => item.visible
		),
		projects: (portfolio?.projects?.items || []).filter(
			(item) => item.visible
		),
		educations: (portfolio?.educations?.items || []).filter(
			(item) => item.visible
		),
		skills: (portfolio?.skills?.items || []).filter((item) => item.visible),
		hackathons: (portfolio?.hackathons?.items || []).filter(
			(item) => item.visible
		),
		certifications: (portfolio?.certifications?.items || []).filter(
			(item) => item.visible
		),
		testimonials: (portfolio?.testimonials?.items || []).filter(
			(item) => item.visible
		),
		teams: (portfolio?.teams?.items || []).filter((item) => item.visible),
		profiles: portfolio?.profiles?.items || [],
		blogEnabled: portfolio?.blogEnabled || false,
	};

	logger.info("Portfolio data: ", portfolioData);

	// Determine the template to use
	const templateToUse = portfolio.template || "default";

	return (
		<div className={cn(CONTAINER_CLASS, "min-h-screen")}>
			<div className={CONTENT_CLASS}>
				<TemplateWrapper
					template={templateToUse}
					data={portfolioData}
					className="py-12 sm:py-16 lg:py-24"
				/>
			</div>
		</div>
	);
}

================
File: app/activate-code/page.js
================
"use client";

import {
	Card,
	CardContent,
	CardDescription,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { Spinner } from "@/components/ui/Spinner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import PageWrapper from "@/components/wrapper/page-wrapper";
import { useCodeActivation } from "@/hooks/use-code-activation";

function Page() {
	const { formData, errors, isSubmitting, handleChange, handleSubmit } =
		useCodeActivation();
	return (
		<PageWrapper>
			<div className="flex items-center justify-center min-h-screen">
				<Card className="w-full max-w-md">
					<CardHeader>
						<CardTitle>Activate discount code</CardTitle>
						<CardDescription>
							Activate code gotten from AppSumo
						</CardDescription>
					</CardHeader>
					<CardContent>
						<form
							onSubmit={handleSubmit}
							className="grid space-y-3"
						>
							<div className="space-y-2">
								<Label>Email</Label>
								<Input
									type="email"
									name="email"
									value={formData.email}
									onChange={handleChange}
									className={
										errors.email ? "border-red-500" : ""
									}
								/>
								{errors.email && (
									<small className="text-red-500">
										{errors.email}
									</small>
								)}
							</div>

							<div className="space-y-2">
								<Label>Code</Label>
								<Input
									type="text"
									name="code"
									value={formData.code}
									onChange={handleChange}
									className={
										errors.code ? "border-red-500" : ""
									}
								/>
								{errors.code && (
									<small className="text-red-500">
										{errors.code}
									</small>
								)}
							</div>

							<Button
								type="submit"
								disabled={isSubmitting}
								className="w-full"
							>
								{isSubmitting && <Spinner />}
								{isSubmitting ? "Activating..." : "Activate"}
							</Button>
						</form>
					</CardContent>
				</Card>
			</div>
		</PageWrapper>
	);
}

export default Page;

================
File: app/api/blogs/route.js
================
import { NextResponse } from "next/server";
import { auth } from "@clerk/nextjs/server";
import { logger } from "@/lib/utils";
import { getBlogs } from "@/services/blog";

const getCorsHeaders = (origin) => {
	const allowedOrigins = [
		process.env.NEXT_PUBLIC_APP_URL,
		`https://*.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
	];

	const isAllowedOrigin = allowedOrigins.some((allowed) => {
		if (allowed.includes("*")) {
			const pattern = allowed.replace("*", ".*");
			return new RegExp(pattern).test(origin);
		}
		return allowed === origin;
	});

	return {
		"Access-Control-Allow-Origin": isAllowedOrigin
			? origin
			: allowedOrigins[0],
		"Access-Control-Allow-Methods": "GET, OPTIONS",
		"Access-Control-Allow-Headers": "Content-Type, Authorization",
		"Access-Control-Allow-Credentials": "true",
		"Access-Control-Max-Age": "86400",
		Vary: "Origin",
	};
};

const createErrorResponse = (status, message, origin) => {
	return new NextResponse(JSON.stringify({ error: message }), {
		status,
		headers: {
			"Content-Type": "application/json",
			...getCorsHeaders(origin),
		},
	});
};

export async function GET(req) {
	const origin = req.headers.get("origin") || "";
	const requestId = Math.random().toString(36).substring(7);

	logger.info("Blogs API request received", {
		requestId,
		method: "GET",
		origin,
		url: req.url,
	});

	try {
		const { searchParams } = new URL(req.url);
		const portfolioId = searchParams.get("portfolioId");
		const { userId } = await auth();

		if (!userId) {
			logger.error("Unauthorized request", { requestId });
			return createErrorResponse(401, "Unauthorized", origin);
		}

		if (!portfolioId) {
			logger.error("Missing portfolioId", { requestId });
			return createErrorResponse(400, "Portfolio ID is required", origin);
		}

		logger.info("Fetching blogs", {
			requestId,
			portfolioId,
			userId,
		});

		const blogs = await getBlogs(portfolioId);

		return new NextResponse(JSON.stringify({ blogs }), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
				...getCorsHeaders(origin),
				"Cache-Control": "private, no-cache, no-store, must-revalidate",
				Pragma: "no-cache",
				Expires: "0",
			},
		});
	} catch (error) {
		logger.error("Error in blogs API", {
			requestId,
			error: error.message,
			stack: error.stack,
		});
		return createErrorResponse(500, "Failed to fetch blogs", origin);
	}
}

export async function OPTIONS(req) {
	const origin = req.headers.get("origin") || "";
	return new NextResponse(null, {
		status: 204,
		headers: getCorsHeaders(origin),
	});
}

export const config = {
	api: {
		bodyParser: false,
		externalResolver: true,
	},
};

================
File: app/api/blogs/validate-slug/route.js
================
import { prisma } from "@/lib/db";
import { NextResponse } from "next/server";

export async function POST(request) {
	try {
		const { slug, excludeId } = await request.json();

		const existingBlog = await prisma.blog.findFirst({
			where: {
				slug: slug,
				NOT: excludeId ? { id: excludeId } : undefined,
			},
		});

		return NextResponse.json({
			isUnique: !existingBlog,
			message: existingBlog ? "Slug already exists" : "Slug is available",
		});
	} catch (error) {
		return NextResponse.json(
			{ error: "Failed to validate slug" },
			{ status: 500 }
		);
	}
}

================
File: app/api/domains/route.js
================
import {
	addDomainToVercel,
	removeDomainFromVercelProject,
	validDomainRegex,
} from "@/lib/domains";
import { logger } from "@/lib/utils";
import { auth } from "@clerk/nextjs/server";
import { NextResponse } from "next/server";

export async function POST(req) {
	try {
		// Get auth token and validate
		const { userId } = auth();
		if (!userId) {
			return NextResponse.json(
				{ success: false, error: "Unauthorized" },
				{ status: 401 }
			);
		}

		const { domain } = await req.json();

		if (!domain) {
			return new NextResponse("Missing domain", { status: 400 });
		}

		if (domain.includes(process.env.NEXT_PUBLIC_ROOT_DOMAIN)) {
			return new NextResponse(
				`Cannot use ${process.env.NEXT_PUBLIC_ROOT_DOMAIN} as your custom domain`,
				{ status: 400 }
			);
		}

		if (!validDomainRegex.test(domain)) {
			return new NextResponse("Invalid domain format", { status: 400 });
		}

		// Add domain to Vercel
		const vercelResponse = await addDomainToVercel(domain);
		if (vercelResponse.error) {
			return NextResponse.json(
				{ success: false, error: vercelResponse.error.message },
				{ status: 400 }
			);
		}

		return NextResponse.json({ success: true });
	} catch (error) {
		logger.error("[DOMAINS_POST]", error);
		return NextResponse.json(
			{
				success: false,
				error: error.message || "Internal error",
				details:
					process.env.NODE_ENV === "development"
						? error.stack
						: undefined,
			},
			{ status: error.status || 500 }
		);
	}
}

export async function DELETE(req) {
	try {
		// Get auth token and validate
		const { userId } = auth();
		if (!userId) {
			return NextResponse.json(
				{ success: false, error: "Unauthorized" },
				{ status: 401 }
			);
		}

		const { searchParams } = new URL(req.url);
		const domain = searchParams.get("domain");
		const portfolioId = searchParams.get("portfolioId");

		if (!domain || !portfolioId) {
			return new NextResponse("Missing required fields", { status: 400 });
		}

		// Remove domain from Vercel
		await removeDomainFromVercelProject(domain);

		// Remove custom domain from portfolio
		const response = await prisma.portfolio.update({
			where: { id: portfolioId },
			data: { customDomain: null },
		});

		return NextResponse.json(response);
	} catch (error) {
		console.error("[DOMAINS_DELETE]", error);
		return new NextResponse("Internal error", { status: 500 });
	}
}

================
File: app/api/file-upload/route.js
================
import { put } from "@vercel/blob";
import { nanoid } from "nanoid";
import { NextResponse } from "next/server";
import { logger } from "@/lib/utils";

export const runtime = "edge";

const ALLOWED_MIME_TYPES = [
	"image/jpeg",
	"image/png",
	"image/gif",
	"image/webp",
	"video/mp4",
	"video/webm",
	"video/ogg",
];
const MAX_FILE_SIZE_BYTES = 50 * 1024 * 1024; // 50MB for larger video files

export async function POST(req) {
	try {
		// Check for required environment variable
		if (!process.env.BLOB_READ_WRITE_TOKEN) {
			return new Response("Missing BLOB_READ_WRITE_TOKEN configuration", {
				status: 401,
			});
		}

		const file = req.body;
		const contentType =
			req.headers.get("content-type") || "application/octet-stream";

		// Validate content type
		if (!ALLOWED_MIME_TYPES.includes(contentType)) {
			return new Response("Unsupported file type", { status: 415 });
		}

		// Check file size (if available)
		const contentLength = parseInt(
			req.headers.get("content-length") || "0"
		);
		if (contentLength > MAX_FILE_SIZE_BYTES) {
			return new Response("File too large", { status: 413 });
		}

		// Generate unique filename
		const extension = contentType.split("/")[1];
		const filename = `${nanoid()}.${extension}`;

		// Upload to Vercel Blob
		const blob = await put(filename, file, {
			contentType,
			access: "public",
			// Optional: Add metadata if needed
			metadata: {
				uploadedAt: new Date().toISOString(),
			},
		});

		return NextResponse.json({ blob });
	} catch (error) {
		logger.error("Upload error:", error);
		return new Response("Internal server error", { status: 500 });
	}
}

================
File: app/api/organizations/[orgId]/subscription/route.js
================
import { NextResponse } from "next/server";
import { auth } from "@clerk/nextjs/server";
import { prisma } from "@/lib/db";

export async function GET(request, { params }) {
	try {
		const { userId } = auth();
		const { orgId } = params;

		if (!userId || !orgId) {
			return new NextResponse("Unauthorized", { status: 401 });
		}

		// Check if user is member of organization
		const membership = await prisma.organizationMember.findUnique({
			where: {
				userId_organizationId: {
					userId,
					organizationId: orgId,
				},
			},
		});

		if (!membership) {
			return new NextResponse("Unauthorized", { status: 401 });
		}

		// Fetch organization with subscription
		const organization = await prisma.organization.findUnique({
			where: { id: orgId },
			include: {
				subscription: true,
			},
		});

		if (!organization) {
			return new NextResponse("Organization not found", { status: 404 });
		}

		const subscription = organization.subscription || {
			status: "inactive",
			type: "TEAM",
			portfolioLimit: 0,
		};

		return NextResponse.json(subscription);
	} catch (error) {
		console.error("Error fetching organization subscription:", error);
		return new NextResponse("Internal Server Error", { status: 500 });
	}
}

================
File: app/api/payment/checkout/route.js
================
import { NextResponse } from "next/server";
import axios from "axios";
import {
	createTransaction,
	initializeSubscription,
	handlePaymentFailure,
} from "@/services/subscription";
import { logger } from "@/lib/utils";
import { getSubscriptionData } from "@/utils/subscription-plans";

export async function POST(request) {
	try {
		const body = await request.json();
		const { type, frequency, userEmail, userId, returnUrl, orgId } = body;

		// Validate all required fields
		if (!type || !frequency || !userEmail || !userId) {
			const missingFields = [];
			if (!type) missingFields.push("type");
			if (!frequency) missingFields.push("frequency");
			if (!userEmail) missingFields.push("userEmail");
			if (!userId) missingFields.push("userId");

			logger.error("Missing required fields", { missingFields });
			return NextResponse.json(
				{
					message: `Missing required fields: ${missingFields.join(", ")}`,
				},
				{ status: 400 }
			);
		}

		logger.info("Starting checkout process", {
			type,
			frequency,
			userEmail,
			userId,
			orgId,
		});

		let subscriptionData;
		try {
			logger.info("Getting subscription data", { type, frequency });
			subscriptionData = getSubscriptionData(type, frequency);
			logger.info("Subscription data retrieved", subscriptionData);
		} catch (error) {
			logger.error("Invalid subscription configuration", {
				type,
				frequency,
				error,
			});
			return NextResponse.json(
				{ message: error.message },
				{ status: 400 }
			);
		}

		const { price, priceId, portfolioLimit } = subscriptionData;

		if (!priceId) {
			logger.error("Invalid price configuration", {
				type,
				frequency,
			});
			return NextResponse.json(
				{ message: "Invalid subscription configuration" },
				{ status: 400 }
			);
		}

		logger.info("Initializing subscription");
		const subscriptionResult = await initializeSubscription({
			userId,
			orgId: orgId || null, // Make orgId optional
			portfolioLimit,
			type: type.toUpperCase(),
			frequency,
			priceId,
		});

		if (!subscriptionResult.success) {
			logger.error(
				"Subscription creation failed",
				subscriptionResult.error
			);
			return NextResponse.json(
				{ message: subscriptionResult.error },
				{ status: 400 }
			);
		}

		const subscription = subscriptionResult.data;
		logger.info("Subscription initialized", {
			subscriptionId: subscription.id,
		});

		logger.info("Creating transaction record");
		const txn = await createTransaction({
			userId,
			orgId,
			title: `${type} Subscription - ${frequency}`,
			subscriptionId: subscription.id,
			amount: price,
			priceId,
		});

		if (!txn.success) {
			logger.error("Transaction creation failed", txn.error);
			return NextResponse.json({ message: txn.error }, { status: 400 });
		}

		logger.info("Transaction created", { transactionId: txn.data.id });

		// Validate Flutterwave API key and redirect URL
		const flutterwaveKey = process.env.FLW_SECRET_KEY;
		const redirectUrl =
			returnUrl || `${process.env.NEXT_PUBLIC_APP_URL}/success`;

		if (!flutterwaveKey) {
			logger.error("Flutterwave API key is missing");
			return NextResponse.json(
				{ message: "Payment service configuration error" },
				{ status: 500 }
			);
		}

		if (!redirectUrl) {
			logger.error("Redirect URL is missing");
			return NextResponse.json(
				{ message: "Invalid redirect configuration" },
				{ status: 400 }
			);
		}

		logger.info("Initiating Flutterwave payment");
		try {
			const flutterwaveResponse = await axios.post(
				"https://api.flutterwave.com/v3/payments",
				{
					tx_ref: txn.data.id,
					amount: price, // Add the amount field - this is required
					currency: "USD",
					payment_options: "card",
					redirect_url: redirectUrl,
					payment_plan: priceId, // Use payment plan instead of amount
					customer: {
						email: userEmail,
					},
					meta: {
						subscriptionId: subscription.id,
						type,
						frequency,
						orgId,
					},
					customizations: {
						title: `${type} Subscription`,
						description: `${frequency} subscription payment`,
					},
				},
				{
					headers: {
						Authorization: `Bearer ${flutterwaveKey}`,
						"Content-Type": "application/json",
					},
				}
			);

			if (!flutterwaveResponse.data?.data?.link) {
				logger.error("Invalid Flutterwave response", {
					response: flutterwaveResponse.data,
				});
				throw new Error("Invalid payment link received");
			}

			logger.info("Flutterwave payment initiated", {
				paymentLink: flutterwaveResponse.data.data.link,
				transactionRef: txn.data.id,
			});

			return NextResponse.json({
				link: flutterwaveResponse.data.data.link,
				status: "success",
				transactionId: txn.data.id,
				transaction_id: flutterwaveResponse.data.data?.transaction_id, // Add this line
			});
		} catch (flwError) {
			logger.error("Flutterwave API error:", {
				error: flwError.message,
				response: flwError.response?.data,
				status: flwError.response?.status,
				data: {
					amount: price,
					currency: "USD",
					email: userEmail,
					transactionRef: txn.data.id,
				},
			});

			// Handle the failed transaction
			await handlePaymentFailure({ transactionId: txn.data.id });

			return NextResponse.json(
				{
					message: "Payment service error",
					details:
						flwError.response?.data?.message || flwError.message,
					transactionId: txn.data.id,
				},
				{ status: flwError.response?.status || 500 }
			);
		}
	} catch (error) {
		logger.error("Checkout process failed:", {
			error: error.message,
			stack: error.stack,
		});
		return NextResponse.json(
			{
				message: "Payment initialization failed",
				details: error.message,
			},
			{ status: 500 }
		);
	}
}

================
File: app/api/payment/verify/route.js
================
import { NextResponse } from "next/server";
import axios from "axios";
import {
	handlePaymentSuccess,
	handlePaymentFailure,
} from "@/services/subscription";
import { logger } from "@/lib/utils";
import axiosRetry from "axios-retry";

axiosRetry(axios, { retries: 3, retryDelay: axiosRetry.exponentialDelay });

export async function POST(request) {
	try {
		const { tx_ref, status, transaction_id } = await request.json();

		if (status === "cancelled") {
			await handlePaymentFailure({
				transactionId: tx_ref,
			});

			return NextResponse.json({
				success: false,
				message: "Payment was cancelled",
				status: "cancelled",
			});
		}

		// Verify that the transaction was successful
		if (status === "successful") {
			// Verify payment with Flutterwave
			const response = await axios.get(
				`https://api.flutterwave.com/v3/transactions/verify_by_reference?tx_ref=${tx_ref}`,
				{
					headers: {
						accept: "application/json",
						Authorization: `Bearer ${process.env.FLW_SECRET_KEY}`,
						"Content-Type": "application/json",
					},
				}
			);
			const { data } = response.data;
			if (!(data.status === status) || !(data.tx_ref === tx_ref)) {
				await handlePaymentFailure({
					transactionId: tx_ref,
				});

				return NextResponse.json({
					success: false,
					message: "Payment was cancelled",
					status: "cancelled",
				});
			}

			await handlePaymentSuccess({
				transactionId: tx_ref,
			});

			return NextResponse.json({
				success: true,
				message: "Payment verified successfully",
			});
		}

		return NextResponse.json(
			{
				success: false,
				message: "Payment verification failed",
			},
			{ status: 400 }
		);
	} catch (error) {
		logger.error("Payment verification error:", error);
		return NextResponse.json(
			{
				success: false,
				message: "Error verifying payment",
				error: error.message,
			},
			{ status: 500 }
		);
	}
}

================
File: app/api/portfolio/[portfolioId]/route.js
================
import { NextResponse } from "next/server";
import { getPortfolios } from "@/services/portfolio";
import { getBasics } from "@/services/basics";
import { getCertifications } from "@/services/certification";
import { getEducations } from "@/services/education";
import { getExperiences } from "@/services/experience";
import { getProfiles } from "@/services/profile";
import { getSkills } from "@/services/skill";
import { auth } from "@clerk/nextjs/server";
import { getProjects } from "@/services/project";
import { getHackathons } from "@/services/hackathon";
import { logger } from "@/lib/utils";

// Helper function to get CORS headers
const getCorsHeaders = (origin) => {
	const allowedOrigins = [
		process.env.NEXT_PUBLIC_APP_URL,
		`https://*.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
		// Add any other allowed origins
	];

	// Check if the origin is allowed
	const isAllowedOrigin = allowedOrigins.some((allowed) => {
		if (allowed.includes("*")) {
			const pattern = allowed.replace("*", ".*");
			return new RegExp(pattern).test(origin);
		}
		return allowed === origin;
	});

	return {
		"Access-Control-Allow-Origin": isAllowedOrigin
			? origin
			: allowedOrigins[0],
		"Access-Control-Allow-Methods": "GET, OPTIONS",
		"Access-Control-Allow-Headers":
			"Content-Type, Authorization, x-clerk-auth-status, x-clerk-auth-reason",
		"Access-Control-Allow-Credentials": "true",
		"Access-Control-Max-Age": "86400", // 24 hours
		Vary: "Origin",
	};
};

// Helper function to create error response
const createErrorResponse = (status, message, origin) => {
	return new NextResponse(JSON.stringify({ error: message }), {
		status,
		headers: {
			"Content-Type": "application/json",
			...getCorsHeaders(origin),
		},
	});
};

export async function GET(req, { params }) {
	const origin = req.headers.get("origin") || "";
	const { portfolioId } = params;

	try {
		const results = await Promise.allSettled([
			getBasics(portfolioId),
			getProfiles(portfolioId),
			getExperiences(portfolioId),
			getEducations(portfolioId),
			getCertifications(portfolioId),
			getSkills(portfolioId),
			getProjects(portfolioId),
			getHackathons(portfolioId),
		]);

		const [
			basics,
			profiles,
			experiences,
			educations,
			certifications,
			skills,
			projects,
			hackathons,
		] = results.map((result) =>
			result.status === "fulfilled" ? result.value : null
		);

		const portfolioData = {
			basics,
			profiles,
			experiences,
			educations,
			certifications,
			skills,
			projects,
			hackathons,
		};

		return new NextResponse(JSON.stringify({ portfolio: portfolioData }), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
				...getCorsHeaders(origin),
				"Cache-Control": "private, no-cache, no-store, must-revalidate",
				Pragma: "no-cache",
				Expires: "0",
			},
		});
	} catch (error) {
		logger.error("Error fetching user data:", error);
		return createErrorResponse(500, "Failed to fetch user data", origin);
	}
}

export async function OPTIONS(req) {
	const origin = req.headers.get("origin") || "";

	// Handle preflight requests
	return new NextResponse(null, {
		status: 204,
		headers: getCorsHeaders(origin),
	});
}

// Configure the API route
export const config = {
	api: {
		bodyParser: false, // Disable body parsing, consume as stream
		externalResolver: true, // Enable external resolving for Clerk auth
	},
};

================
File: app/api/portfolio/route.js
================
import { NextResponse } from "next/server";
import { getPortfolios } from "@/services/portfolio";
import { auth } from "@clerk/nextjs/server";
import { logger } from "@/lib/utils";
import { getUser } from "@/services/user";

// Helper function to get CORS headers
const getCorsHeaders = (origin) => {
	const allowedOrigins = [
		process.env.NEXT_PUBLIC_APP_URL,
		`https://*.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
		// Add any other allowed origins
	];

	// Check if the origin is allowed
	const isAllowedOrigin = allowedOrigins.some((allowed) => {
		if (allowed.includes("*")) {
			const pattern = allowed.replace("*", ".*");
			return new RegExp(pattern).test(origin);
		}
		return allowed === origin;
	});

	return {
		"Access-Control-Allow-Origin": isAllowedOrigin
			? origin
			: allowedOrigins[0],
		"Access-Control-Allow-Methods": "GET, OPTIONS",
		"Access-Control-Allow-Headers":
			"Content-Type, Authorization, x-clerk-auth-status, x-clerk-auth-reason",
		"Access-Control-Allow-Credentials": "true",
		"Access-Control-Max-Age": "86400", // 24 hours
		Vary: "Origin",
	};
};

// Helper function to create error response
const createErrorResponse = (status, message, origin) => {
	return new NextResponse(JSON.stringify({ error: message }), {
		status,
		headers: {
			"Content-Type": "application/json",
			...getCorsHeaders(origin),
		},
	});
};

export async function GET(req) {
	const origin = req.headers.get("origin") || "";
	const requestId = Math.random().toString(36).substring(7);

	logger.info("Portfolio API request received", {
		requestId,
		method: "GET",
		origin,
		url: req.url,
	});

	try {
		const { searchParams } = new URL(req.url);
		let userId = searchParams.get("userId");

		// Get both userId and orgId from auth
		const { userId: authenticatedUserId, orgId } = await auth();

		logger.info("Auth details", {
			requestId,
			userId,
			authenticatedUserId,
			orgId,
		});

		if (!userId && !authenticatedUserId) {
			logger.error("Unauthorized request", { requestId });
			return createErrorResponse(401, "Unauthorized", origin);
		}

		userId = userId || authenticatedUserId;

		logger.info("Fetching data", {
			requestId,
			userId,
			orgId,
		});

		// Get portfolios for both user and organization if available
		const portfoliosPromise = getPortfolios(userId, orgId);
		const userPromise = getUser(userId);

		const [user, portfolios] = await Promise.all([
			userPromise,
			portfoliosPromise,
		]);

		if (!user) {
			logger.error("User not found", {
				requestId,
				userId,
			});
			return createErrorResponse(404, "User not found", origin);
		}

		if (!portfolios.success) {
			logger.error("Portfolio fetch failed", {
				requestId,
				error: portfolios.error,
			});
			return createErrorResponse(
				400,
				portfolios.error || "Error getting portfolios",
				origin
			);
		}

		logger.info("Successfully fetched portfolio data", {
			requestId,
			portfolioCount: portfolios.data?.length,
		});

		return new NextResponse(JSON.stringify({ portfolios, user }), {
			status: 200,
			headers: {
				"Content-Type": "application/json",
				...getCorsHeaders(origin),
				"Cache-Control": "private, no-cache, no-store, must-revalidate",
				Pragma: "no-cache",
				Expires: "0",
			},
		});
	} catch (error) {
		logger.error("Error in portfolio API", {
			requestId,
			error: error.message,
			stack: error.stack,
			url: req.url,
		});
		return createErrorResponse(500, "Failed to fetch data", origin);
	}
}

export async function OPTIONS(req) {
	const origin = req.headers.get("origin") || "";

	// Handle preflight requests
	return new NextResponse(null, {
		status: 204,
		headers: getCorsHeaders(origin),
	});
}

// Configure the API route
export const config = {
	api: {
		bodyParser: false, // Disable body parsing, consume as stream
		externalResolver: true, // Enable external resolving for Clerk auth
	},
};

================
File: app/api/send-user-contact-email/route.js
================
import { NextResponse } from "next/server";
import { Resend } from "resend";
import { siteConfig } from "@/config/site";
import { logger } from "@/lib/utils";
import ContactNotification from "@/emails/templates/contact-notification";
import { getPortfolio } from "@/services/portfolio";

const resend = new Resend(process.env.RESEND_API_KEY);

export async function POST(request) {
	try {
		// Parse and validate the request body
		const reqData = await request.json();
		const { subdomain, subject, props } = reqData;

		if (!subdomain || !subject || !props) {
			return new NextResponse(
				{ error: "All field required" },
				{ status: 400 }
			);
		}
		logger.info("Request data: ", reqData);

		const resp = await getPortfolio(subdomain);

		// Check if user exists
		if (!resp.success) {
			return new NextResponse(
				{ error: "User not found" },
				{ status: 400 }
			);
		}
		logger.info("User resp: ", resp);

		// Get the user's primary email address
		const userEmail = resp?.data?.basics?.email;

		if (!userEmail) {
			return new NextResponse(
				{ error: "Portfolio email not found" },
				{ status: 400 }
			);
		}

		const { data, error } = await resend.emails.send({
			from: `${siteConfig.name} <onboarding@resend.dev>`,
			to: [userEmail],
			subject,
			react: (
				<ContactNotification
					name={props.name}
					email={props.email}
					message={props.message}
				/>
			),
		});

		if (error) {
			logger.error(error);
			return NextResponse.json({ error: error.message }, { status: 400 });
		}

		return NextResponse.json({ data, success: true }, { status: 200 });
	} catch (error) {
		logger.error("API route error:", error);

		return NextResponse.json(
			{
				success: false,
				error:
					error instanceof Error
						? error.message
						: "An unexpected error occurred",
			},
			{ status: 500 }
		);
	}
}

================
File: app/api/webhooks/clerk/route.js
================
import { Webhook } from "svix";
import { headers } from "next/headers";
import { createUser, updateUser, deleteUser } from "@/services/user";
import {
	createOrganization,
	deleteOrganization,
	updateOrganization,
} from "@/services/organization";
import { logger } from "@/lib/utils";

export async function POST(req) {
	const SIGNING_SECRET = process.env.SIGNING_SECRET;
	if (!SIGNING_SECRET) {
		throw new Error(
			"Error: Please add SIGNING_SECRET from Clerk Dashboard to .env or .env.local"
		);
	}

	// Create new Svix instance with secret
	const wh = new Webhook(SIGNING_SECRET);

	// Get headers
	const headerPayload = await headers();
	const svix_id = headerPayload.get("svix-id");
	const svix_timestamp = headerPayload.get("svix-timestamp");
	const svix_signature = headerPayload.get("svix-signature");

	// If there are no headers, error out
	if (!svix_id || !svix_timestamp || !svix_signature) {
		return new Response("Error: Missing Svix headers", {
			status: 400,
		});
	}

	// Get body
	const payload = await req.json();
	const body = JSON.stringify(payload);

	let evt;
	// Verify payload with headers
	try {
		evt = wh.verify(body, {
			"svix-id": svix_id,
			"svix-timestamp": svix_timestamp,
			"svix-signature": svix_signature,
		});
	} catch (err) {
		logger.error("Error: Could not verify webhook:", err);
		return new Response("Error: Verification error", {
			status: 400,
		});
	}
	logger.info("webhook body: ", body);
	logger.info("webhook evt data: ", evt.data);

	if (evt.type === "user.created") {
		const { id } = evt.data;
		if (!id) {
			return new Response("Error: User ID not found", {
				status: 400,
			});
		}

		logger.info("userId:", id);
		const user = await createUser(
			id,
			evt.data?.email_addresses[0]?.email_address
		);

		if (user.success) {
			logger.info("User creation successsful: ", user.data);
		}
	} else if (evt.type === "user.updated") {
		const { id } = evt.data;
		if (!id) {
			return new Response("Error: User ID not found", {
				status: 400,
			});
		}

		const user = await updateUser({
			id,
			email: evt.data?.email_addresses[0]?.email_address,
		});

		if (user.success) {
			logger.info("User update successsful: ", user.data);
		}
	} else if (evt.type === "user.deleted") {
		const { deleted, id } = evt.data;
		if (deleted) {
			const result = await deleteUser(id);
			if (result.success) {
				logger.info("User deleted");
			}
		}
	} else if (evt.type === "session.created") {
		const { status, user_id } = evt.data;
		if (status !== "active") return;
		if (!user_id) return;

		logger.info("User logged in: ", user_id);
	} else if (evt.type === "organization.created") {
		const { id, created_by } = evt.data;
		if (!id || !created_by) {
			return new Response("Error: Missing organization data", {
				status: 400,
			});
		}

		const org = await createOrganization(evt.data, created_by);
		if (org.success) {
			logger.info("Organization creation successful:", org.data);
		}
	} else if (evt.type === "organization.deleted") {
		const { deleted, id } = evt.data;
		if (deleted && id) {
			const result = await deleteOrganization(id);
			if (result.success) {
				logger.info(`Organization ${id} deleted successfully`);
			}
		}
	} else if (evt.type === "organization.updated") {
		const { id } = evt.data;
		if (!id) {
			return new Response("Error: Missing organization ID", {
				status: 400,
			});
		}

		const result = await updateOrganization(evt.data);
		if (result.success) {
			logger.info(`Organization ${id} updated successfully`);
		}
	}

	return new Response("Webhook received", { status: 200 });
}

================
File: app/api/webhooks/flutterwave/route.js
================
import { NextResponse } from "next/server";
import {
	handleChargeWebhook,
	handleSubscriptionCancelled,
} from "@/services/webhooks";
import { logger } from "@/lib/utils";

export async function POST(req) {
	const secretHash = process.env.FLW_SECRET_HASH;
	const signature = req.headers.get("verif-hash");

	if (!signature || signature !== secretHash) {
		return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
	}

	try {
		const payload = await req.json();
		logger.info(`Received webhook: ${payload.event}`);

		switch (payload.event) {
			case "charge.completed":
				await handleChargeWebhook(payload.data);
				break;

			case "subscription.cancelled":
				await handleSubscriptionCancelled(payload.data);
				break;

			default:
				logger.info(`Unhandled webhook event: ${payload.event}`);
				break;
		}

		return NextResponse.json({ received: true });
	} catch (error) {
		logger.error("Webhook processing error:", error);
		return NextResponse.json(
			{ error: "Webhook processing failed" },
			{ status: 500 }
		);
	}
}

================
File: app/blog/components/Prose.jsx
================
import clsx from "clsx";

export function Prose({ as, className, ...props }) {
	const Component = as ?? "div";

	return (
		<Component
			className={clsx(
				className,
				"prose prose-slate max-w-none dark:prose-invert dark:text-slate-400",
				// headings
				"prose-headings:scroll-mt-28 prose-headings:font-cal prose-headings:font-semibold lg:prose-headings:scroll-mt-[8.5rem]",
				// lead
				"prose-lead:text-slate-500 dark:prose-lead:text-slate-400",
				// links
				// "prose-a:font-semibold dark:prose-a:text-blue-400",
				// link underline
				"prose-a:no-underline",
				// pre
				"prose-pre:rounded-xl prose-pre:bg-slate-900 prose-pre:shadow-lg dark:prose-pre:bg-slate-800/60 dark:prose-pre:shadow-none dark:prose-pre:ring-1 dark:prose-pre:ring-slate-300/10",
				// hr
				"dark:prose-hr:border-slate-800"
			)}
			{...props}
		/>
	);
}

================
File: app/blog/components/ReadMore.jsx
================
import React from "react";
import Image from "next/image";
import Link from "next/link";
import { sanityFetch } from "@/sanity/lib/live";
import { recentPostsQuery } from "@/sanity/lib/queries";
import { logger } from "@/lib/utils";

export async function ReadMore() {
	const blogPosts = await sanityFetch({
		query: recentPostsQuery,
		tags: ["post"],
	});

	logger.info("Fetched blog posts:", blogPosts);
	return (
		<div className="grid gap-4 md:grid-cols-3">
			{blogPosts.data.map((post) => (
				<Link
					key={post.slug}
					href={`/blog/post/${post.slug}`}
					className="block h-full"
				>
					<div className="flex h-full flex-col overflow-hidden rounded-lg shadow-md transition-all duration-300 ease-in-out hover:scale-105 hover:shadow-lg">
						<Image
							src={post.image}
							alt={post.title}
							width={400}
							height={200}
							className="w-full object-cover"
						/>
						<div className="flex flex-grow flex-col bg-white dark:bg-gray-800 p-4 transition-colors duration-300 ease-in-out hover:bg-gray-50">
							<h3 className="mb-2 text-xl font-semibold transition-colors duration-300 ease-in-out hover:text-blue-500">
								{post.title}
							</h3>
							<p className="mb-2 flex-grow text-gray-600 dark:text-gray-300">
								{post.description}
							</p>
							<p className="text-sm text-gray-500 dark:text-gray-400">
								{post.date}
							</p>
						</div>
					</div>
				</Link>
			))}
		</div>
	);
}

================
File: app/blog/components/TableOfContents.jsx
================
"use client";

import React, { useState, useEffect } from "react";
import { extractTextFromPortableTextBlock, slugify } from "@/utils/text";

export function TableOfContents({ body }) {
	const [activeId, setActiveId] = useState(null);
	const headings = body.filter(
		(block) => block.style === "h2"
		// (block) => block.style === "h2" || block.style === "h3",
	);

	useEffect(() => {
		const observer = new IntersectionObserver(
			(entries) => {
				for (const entry of entries) {
					if (entry.isIntersecting) {
						setActiveId(entry.target.id);
					}
				}
			},
			{ rootMargin: "-50% 0% -50% 0%" }
		);

		for (const heading of headings) {
			const text = extractTextFromPortableTextBlock(heading);
			const id = slugify(text);
			const element = document.getElementById(id);
			if (element) observer.observe(element);
		}

		return () => observer.disconnect();
	}, [headings, setActiveId]);

	return (
		<nav className="sticky top-24 overflow-y-auto">
			<h2 className="mb-4 text-lg font-semibold">Table of Contents</h2>
			<ul className="space-y-2">
				{headings.map((heading, index) => {
					const text = extractTextFromPortableTextBlock(heading);
					const id = slugify(text);
					return (
						<li
							key={index}
							className={heading.style === "h3" ? "ml-4" : ""}
						>
							<a
								href={`#${id}`}
								className={`text-slate-700 dark:text-gray-300 hover:underline ${
									activeId === id
										? "font-bold text-blue-600"
										: ""
								}`}
							>
								{text}
							</a>
						</li>
					);
				})}
			</ul>
		</nav>
	);
}

================
File: app/blog/components/TryProduct.jsx
================
import React from "react";
import Image from "next/image";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { slugify } from "@/utils/text";
import { siteConfig } from "@/config/site";

export function TryProduct() {
	return (
		<Link
			href={`${process.env.NEXT_PUBLIC_BASE_URL}/?utm_source=blog&utm_medium=${slugify(siteConfig.name)}`}
		>
			<div className="rounded-lg border-2 border-primary shadow-xl transition-transform duration-300 hover:scale-105">
				<Image
					src="/og.png"
					alt={siteConfig.name}
					width={320}
					height={240}
					className="w-full rounded-t-lg shadow"
				/>
				<p className="p-4 text-gray-700 dark:text-gray-300">
					{siteConfig.description}
				</p>
				<div className="px-4 pb-4">
					<Button className="w-full">Try {siteConfig.name}</Button>
				</div>
			</div>
		</Link>
	);
}

================
File: app/blog/page.js
================
import Image from "next/image";
import Link from "next/link";
import { BlogWrapper } from "@/components/wrapper/blog-wrapper";
import { sanityFetch } from "@/sanity/lib/live";
import { postsQuery } from "@/sanity/lib/queries";
import { Card, CardContent } from "@/components/ui/card";

export const revalidate = 60;

export default async function BlogContentsPage() {
	const posts = await sanityFetch({ query: postsQuery });

	console.log("Fetched posts:", posts);

	return (
		<BlogWrapper>
			<Posts posts={posts.data} />
		</BlogWrapper>
	);
}

function Posts({ posts = [] }) {
	if (!Array.isArray(posts)) {
		console.error("Posts is not an array:", posts);
		return <div>No posts available</div>;
	}

	const allPosts = posts.map((post) => ({
		title: post.title,
		file: post.slug.current,
		description: post.description ?? "",
		date: new Date(post._createdAt).toLocaleDateString(),
		datetime: post._createdAt,
		author: {
			name: post.authorName,
			role: "Founder",
			href: "#",
			imageUrl: "/images/blog/elie-profile.jpg",
		},
		imageUrl: post.imageURL ?? "/images/reach-inbox-zero.png",
	}));

	return (
		<div className="py-16 sm:py-24">
			<div className="mx-auto max-w-7xl px-6 lg:px-8">
				<h2 className="mb-8 font-cal text-3xl tracking-tight text-gray-900 dark:text-white sm:text-4xl">
					From the blog
				</h2>
				<div className="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
					{allPosts.map((post) => (
						<PostCard key={post.title} post={post} />
					))}
				</div>
			</div>
		</div>
	);
}

function PostCard({ post }) {
	return (
		<Card className="overflow-hidden transition-transform duration-300 hover:scale-105">
			<Link href={`/blog/post/${post.file}`}>
				<div className="relative h-48 w-full">
					<Image
						src={post.imageUrl}
						alt={post.title}
						layout="fill"
						objectFit="cover"
					/>
				</div>
				<CardContent className="pt-4">
					<h3 className="mb-2 font-cal text-lg leading-6 text-gray-900 group-hover:text-gray-600 dark:text-gray-100 dark:group-hover:text-gray-300">
						{post.title}
					</h3>
					<p className="mb-4 line-clamp-2 text-sm leading-6 text-gray-600 dark:text-gray-300">
						{post.description}
					</p>
					<div className="flex items-center gap-x-4">
						<Image
							src={post.author.imageUrl}
							alt={post.title}
							className="h-8 w-8 rounded-full bg-gray-50 dark:bg-gray-800"
							width={32}
							height={32}
						/>
						<div className="text-sm">
							<p className="font-semibold text-gray-900 dark:text-gray-100">
								{post.author.name}
							</p>
							<time
								dateTime={post.datetime}
								className="text-gray-500"
							>
								{post.date}
							</time>
						</div>
					</div>
				</CardContent>
			</Link>
		</Card>
	);
}

================
File: app/blog/post/[slug]/page.js
================
import { sanityFetch } from "@/sanity/lib/live";
import { postPathsQuery, postQuery } from "@/sanity/lib/queries";
import { client } from "@/sanity/lib/client";
import imageUrlBuilder from "@sanity/image-url";
import { Post } from "@/app/blog/post/[slug]/Post";
import { logger } from "@/lib/utils";

export const revalidate = 60;

export async function generateStaticParams() {
	const posts = await client.fetch(postPathsQuery);
	return posts;
}

export async function generateMetadata({ params }, parent) {
	const { slug } = await params;
	const post = await sanityFetch({
		query: postQuery,
		params,
	});

	logger.info("Fetched Post:", post);

	if (!post) {
		logger.error(`Post not found. Slug: ${slug}`);
		return {};
	}

	const previousImages = (await parent).openGraph?.images || [];

	const builder = imageUrlBuilder(client);
	const imageUrl = post.mainImage
		? builder
				.image(post.mainImage)
				.auto("format")
				.fit("max")
				.width(1200)
				.height(630)
				.url()
		: undefined;

	return {
		title: post.title,
		description: post.description ?? "",
		alternates: { canonical: `/blog/post/${slug}` },
		openGraph: {
			images: imageUrl ? [imageUrl, ...previousImages] : previousImages,
		},
	};
}

// Multiple versions of this page will be statically generated
// using the `params` returned by `generateStaticParams`
export default async function Page({ params }) {
	const post = await sanityFetch({ query: postQuery, params });

	return <Post post={post.data} />;
}

================
File: app/blog/post/[slug]/Post.jsx
================
import React from "react";
import Link from "next/link";
import Image from "next/image";
import { LinkIcon } from "lucide-react";
import { PortableText } from "@portabletext/react";
import { client } from "@/sanity/lib/client";
import imageUrlBuilder from "@sanity/image-url";
import { Prose } from "@/app/blog/components/Prose";
import { TableOfContents } from "@/app/blog/components/TableOfContents";
import { Card, CardContent } from "@/components/ui/card";
import { extractTextFromPortableTextBlock, slugify } from "@/utils/text";
import { TryProduct } from "../../components/TryProduct";
import { ReadMore } from "@/app/blog/components/ReadMore";
import { BlogWrapper } from "@/components/wrapper/blog-wrapper";

const builder = imageUrlBuilder(client);

export function Post({ post }) {
	return (
		<BlogWrapper>
			<article className="mx-auto grid w-full max-w-screen-xl gap-5 px-0 pt-16 md:grid-cols-4 md:pt-24 lg:gap-4 lg:px-20 mb-10">
				<main className="md:col-span-3">
					<Card>
						<CardContent className="p-10">
							<Prose>
								<h1 className="text-3xl font-bold">
									{post.title}
								</h1>
								<p>{post.description}</p>
								{post.mainImage ? (
									<div className="-mx-10 my-8">
										<Image
											src={builder
												.image(post.mainImage)
												.width(1200)
												.height(675)
												.url()}
											alt={post?.mainImage?.alt || ""}
											width={1200}
											height={675}
											className="h-auto w-full"
										/>
									</div>
								) : null}
								{post.body ? (
									<PortableText
										value={post.body}
										components={{
											block: {
												h2: createHeadingComponent(
													"h2"
												),
												h3: createHeadingComponent(
													"h3"
												),
											},
											types: {
												image: ({ value }) => {
													// https://www.sanity.io/answers/how-to-get-the-width-height-or-dimensions-of-uploaded-image-with-sanity-and-next-js-to-prevent-cls
													const pattern =
														/^image-([a-f\d]+)-(\d+x\d+)-(\w+)$/;

													const decodeAssetId = (
														id
													) => {
														const match =
															pattern.exec(id);
														if (!match) {
															console.error(
																`Invalid asset ID: ${id}`
															);
															return null;
														}
														const [
															,
															assetId,
															dimensions,
															format,
														] = match;
														const [width, height] =
															dimensions
																.split("x")
																.map((v) =>
																	Number.parseInt(
																		v,
																		10
																	)
																);

														return {
															assetId,
															dimensions: {
																width,
																height,
															},
															format,
														};
													};

													const { dimensions } =
														decodeAssetId(
															value.asset?._id
														) || {};

													return (
														<Image
															src={builder
																.image(value)
																.width(800)
																.url()}
															alt={
																value.alt || ""
															}
															width={
																dimensions?.width ||
																800
															}
															height={
																dimensions?.height ||
																600
															}
															className="h-auto w-full"
														/>
													);
												},
											},
											marks: {
												link: ({ children, value }) => {
													const href = value?.href;
													return (
														<Link
															href={href}
															className="font-semibold text-blue-600 hover:underline"
														>
															{children}
														</Link>
													);
												},
											},
										}}
									/>
								) : null}
							</Prose>
						</CardContent>
					</Card>

					<div className="mt-4">
						<ReadMore />
					</div>
				</main>
				<aside className="hidden md:block">
					<div className="sticky top-20">
						<div className="mb-4">
							<TryProduct />
						</div>

						<Card className="mb-4">
							<CardContent className="pt-6">
								<h3 className="mb-2 text-lg font-semibold">
									Written by
								</h3>
								<div className="flex items-center">
									{post.authorImage && (
										<Image
											src={builder
												.image(post.authorImage)
												.width(40)
												.height(40)
												.url()}
											alt={post.authorName ?? ""}
											className="mr-3 h-10 w-10 rounded-full"
											width={40}
											height={40}
										/>
									)}
									<div>
										<p className="font-medium">
											{post.authorName}
										</p>
										{post.authorTwitter && (
											<Link
												href={`https://twitter.com/${post.authorTwitter}`}
												className="text-sm text-gray-500"
												target="_blank"
											>
												@{post.authorTwitter}
											</Link>
										)}
									</div>
								</div>
							</CardContent>
						</Card>

						{post.body && (
							<Card>
								<CardContent className="pt-6">
									<TableOfContents body={post.body} />
								</CardContent>
							</Card>
						)}
					</div>
				</aside>
			</article>
		</BlogWrapper>
	);
}

const createHeadingComponent = (Tag) => {
	const HeadingComponent = ({ children, value }) => {
		const text = extractTextFromPortableTextBlock(value);
		const id = slugify(text);

		return (
			<Tag id={id} className="group relative flex items-center">
				<Link href={`#${id}`} className="flex items-center">
					<span className="absolute left-0 -translate-x-full pr-2 opacity-0 transition-opacity group-hover:opacity-100">
						<LinkIcon className="size-4" />
					</span>
					{children}
				</Link>
			</Tag>
		);
	};

	HeadingComponent.displayName = `Heading${Tag}`;
	return HeadingComponent;
};

================
File: app/builder/[portfolioId]/layout.js
================
"use client";

import React, { Suspense } from "react";
import { LeftAppSidebar } from "@/components/left-app-sidebar";
import { RightSidebar } from "@/components/right-app-sidebar";
import { NavActions } from "@/components/nav-actions";
import {
	Breadcrumb,
	BreadcrumbItem,
	BreadcrumbList,
	BreadcrumbPage,
} from "@/components/ui/breadcrumb";
import { Separator } from "@/components/ui/separator";
import { cn } from "@/lib/utils";
import {
	PORTFOLIO_TAILWIND_CLASS,
	CONTAINER_CLASS,
	CONTENT_CLASS,
} from "@/utils/constants";
import {
	ResizableHandle,
	ResizablePanel,
	ResizablePanelGroup,
} from "@/components/ui/resizable";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Button } from "@/components/ui/button";
import { PanelLeft, PanelRight } from "lucide-react";
import { useVerifyPayment } from "@/hooks/use-verify-payment";

function BuilderLayoutContent({ children }) {
	useVerifyPayment();
	const isDesktop = useMediaQuery("(min-width: 1024px)");
	const [leftOpen, setLeftOpen] = React.useState(true);
	const [rightOpen, setRightOpen] = React.useState(false);
	const [leftCollapsed, setLeftCollapsed] = React.useState(false);
	const [rightCollapsed, setRightCollapsed] = React.useState(true);

	if (isDesktop) {
		return (
			<div className="relative h-screen overflow-hidden">
				<ResizablePanelGroup direction="horizontal">
					<ResizablePanel
						defaultSize={20}
						minSize={0}
						maxSize={30}
						collapsible={true}
						collapsedSize={0}
						onCollapse={() => setLeftCollapsed(true)}
						onExpand={() => setLeftCollapsed(false)}
						className={cn(
							"bg-background transition-all duration-300",
							leftCollapsed && "min-w-0 max-w-0 p-0 opacity-0"
						)}
					>
						<LeftAppSidebar />
					</ResizablePanel>
					<ResizableHandle withHandle />
					<ResizablePanel>
						<div className="flex h-full flex-col">
							<header className="flex h-14 shrink-0 items-center gap-2 px-4 sm:px-6 lg:px-8">
								<div className="flex flex-1 items-center gap-2">
									<Button
										variant="ghost"
										size="icon"
										onClick={() =>
											setLeftCollapsed(!leftCollapsed)
										}
										className={cn(
											"transition-transform",
											leftCollapsed && "rotate-180"
										)}
									>
										<PanelLeft className="h-5 w-5" />
									</Button>
									<Breadcrumb>
										<BreadcrumbList>
											<BreadcrumbItem>
												<BreadcrumbPage className="line-clamp-1">
													Portfolio Builder
												</BreadcrumbPage>
											</BreadcrumbItem>
										</BreadcrumbList>
									</Breadcrumb>
								</div>
								<div className="ml-auto flex items-center gap-2">
									<NavActions />
									<Button
										variant="ghost"
										size="icon"
										onClick={() =>
											setRightCollapsed(!rightCollapsed)
										}
										className={cn(
											"transition-transform",
											rightCollapsed && "-rotate-180"
										)}
									>
										<PanelRight className="h-5 w-5" />
									</Button>
								</div>
							</header>
							<main
								className={cn(
									"flex-1 overflow-auto",
									CONTAINER_CLASS
								)}
							>
								<div className={CONTENT_CLASS}>{children}</div>
							</main>
						</div>
					</ResizablePanel>
					<ResizableHandle withHandle />
					<ResizablePanel
						defaultSize={20}
						minSize={0}
						maxSize={30}
						collapsible={true}
						collapsedSize={0}
						onCollapse={() => setRightCollapsed(true)}
						onExpand={() => setRightCollapsed(false)}
						className={cn(
							"bg-background transition-all duration-300",
							rightCollapsed && "min-w-0 max-w-0 p-0 opacity-0"
						)}
					>
						<RightSidebar />
					</ResizablePanel>
				</ResizablePanelGroup>
			</div>
		);
	}

	return (
		<div className="relative min-h-screen">
			<Sheet open={leftOpen} onOpenChange={setLeftOpen}>
				<SheetContent side="left" className="w-[80vw] sm:w-[350px] p-0">
					<LeftAppSidebar />
				</SheetContent>
			</Sheet>

			<div className="flex min-h-screen flex-col">
				<header className="flex h-14 shrink-0 items-center gap-2 px-4">
					<div className="flex flex-1 items-center gap-2">
						<Button
							variant="ghost"
							size="icon"
							onClick={() => setLeftOpen(true)}
						>
							<PanelLeft className="h-5 w-5" />
						</Button>
						<Breadcrumb>
							<BreadcrumbList>
								<BreadcrumbItem>
									<BreadcrumbPage className="line-clamp-1">
										Portfolio Builder
									</BreadcrumbPage>
								</BreadcrumbItem>
							</BreadcrumbList>
						</Breadcrumb>
					</div>
					<div className="ml-auto flex items-center gap-2">
						<NavActions />
						<Button
							variant="ghost"
							size="icon"
							onClick={() => setRightOpen(true)}
						>
							<PanelRight className="h-5 w-5" />
						</Button>
					</div>
				</header>
				<main className={cn("flex-1", CONTAINER_CLASS)}>
					<div className={CONTENT_CLASS}>{children}</div>
				</main>
			</div>

			<Sheet open={rightOpen} onOpenChange={setRightOpen}>
				<SheetContent
					side="right"
					className="w-[80vw] sm:w-[350px] p-0"
				>
					<RightSidebar />
				</SheetContent>
			</Sheet>
		</div>
	);
}

function BuilderLayout({ children }) {
	return (
		<Suspense fallback={null}>
			<BuilderLayoutContent>{children}</BuilderLayoutContent>
		</Suspense>
	);
}

export default BuilderLayout;

================
File: app/builder/[portfolioId]/page.jsx
================
"use client";

import { Button } from "@/components/ui/button";
import { X } from "lucide-react";
import Link from "next/link";
import { useSelector } from "react-redux";
import { useParams } from "next/navigation";
import { TemplateWrapper } from "@/components/templates/template-wrapper";
import { defaultBasics } from "@/schema/sections/basics";
import { useState } from "react";
import { CONTAINER_CLASS, CONTENT_CLASS } from "@/utils/constants";
import { cn } from "@/lib/utils";

export default function Page() {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const user = useSelector((state) => state.user.data);
	const [showBanner, setShowBanner] = useState(true);

	const templateData = {
		basics: portfolio?.basics || defaultBasics,
		projects: (portfolio?.projects?.items || []).filter(
			(item) => item.visible
		),
		experiences: (portfolio?.experiences?.items || []).filter(
			(item) => item.visible
		),
		educations: (portfolio?.educations?.items || []).filter(
			(item) => item.visible
		),
		skills: (portfolio?.skills?.items || []).filter((item) => item.visible),
		hackathons: (portfolio?.hackathons?.items || []).filter(
			(item) => item.visible
		),
		certifications: (portfolio?.certifications?.items || []).filter(
			(item) => item.visible
		),
		testimonials: (portfolio?.testimonials?.items || []).filter(
			(item) => item.visible
		),
		teams: (portfolio?.teams?.items || []).filter((item) => item.visible),
		profiles: portfolio?.profiles?.items || [],
		blogEnabled: portfolio?.blogEnabled || false,
	};

	return (
		<div className="min-h-screen w-full">
			{!(user?.subscription?.status === "active") && showBanner && (
				<div className={cn(CONTAINER_CLASS, "mb-6")}>
					<div className="relative bg-blue-50 dark:bg-blue-900/50 px-4 sm:px-6 py-4 flex items-center justify-between rounded-lg border border-blue-100 dark:border-blue-800">
						<div className="flex items-center gap-x-3">
							<p className="text-sm text-blue-700 dark:text-blue-100">
								You do not have an active subscription!{" "}
								<Link
									href="/#pricing"
									className="font-medium underline hover:text-blue-600 dark:hover:text-blue-400"
								>
									Subscribe now
								</Link>
							</p>
						</div>
						<Button
							variant="ghost"
							size="icon"
							className="h-8 w-8 hover:bg-blue-100/50 dark:hover:bg-blue-800/50"
							onClick={() => setShowBanner(false)}
						>
							<X className="h-4 w-4" />
						</Button>
					</div>
				</div>
			)}

			<div className={CONTENT_CLASS}>
				<TemplateWrapper
					template={portfolio?.template || "default"}
					data={templateData}
					className="h-[calc(100vh-120px)]"
				/>
			</div>
		</div>
	);
}

================
File: app/contact-us/components/contact-form.jsx
================
import { Spinner } from "@/components/ui/Spinner";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { cn } from "@/lib/utils";

export const ContactForm = ({
	formData,
	errors,
	isSubmitting,
	handleChange,
	handleSubmit,
	revert = false,
}) => {
	return (
		<form onSubmit={handleSubmit} className="grid space-y-3">
			<div className="space-y-2">
				<Label>Email</Label>
				<Input
					type="email"
					name="email"
					value={formData.email}
					onChange={handleChange}
					className={cn(
						errors.email ? "border-red-500" : "",
						revert ? "text-black dark:text-white" : ""
					)}
				/>
				{errors.email && <p className="text-red-500">{errors.email}</p>}
			</div>

			<div className="space-y-2">
				<Label>Full Name</Label>
				<Input
					type="text"
					name="full_name"
					value={formData.full_name}
					onChange={handleChange}
					className={cn(
						errors.full_name ? "border-red-500" : "",
						revert ? "text-black dark:text-white" : ""
					)}
				/>
				{errors.full_name && (
					<p className="text-red-500">{errors.full_name}</p>
				)}
			</div>

			<div className="space-y-2">
				<Label>Your Message</Label>
				<Textarea
					name="message"
					value={formData.message}
					onChange={handleChange}
					placeholder="Your message"
					className={cn(
						errors.message ? "border-red-500" : "",
						revert ? "text-black dark:text-white" : ""
					)}
					rows={4}
				/>
				{errors.message && (
					<p className="text-red-500">{errors.message}</p>
				)}
			</div>

			<Button type="submit" disabled={isSubmitting} className="w-full">
				{isSubmitting && <Spinner />}
				{isSubmitting ? "Sending..." : "Send Message"}
			</Button>
		</form>
	);
};

================
File: app/contact-us/page.js
================
"use client";
import { ContactForm } from "./components/contact-form";
import FormWrapper from "@/components/wrapper/form-wrapper";
import { useContactForm } from "@/hooks/use-contact-form";

const Page = () => {
	const { formData, errors, isSubmitting, handleChange, handleSubmit } =
		useContactForm();

	return (
		<FormWrapper
			title={"Contact us for anything"}
			description={"Our goal is to be as helpful as possible."}
		>
			<ContactForm
				formData={formData}
				errors={errors}
				isSubmitting={isSubmitting}
				handleChange={handleChange}
				handleSubmit={handleSubmit}
			/>
		</FormWrapper>
	);
};

export default Page;

================
File: app/dashboard/blogs/[postId]/edit/page.jsx
================
"use client";

import { useDispatch, useSelector } from "react-redux";
import { useRouter, useParams } from "next/navigation";
import { toast } from "sonner";
import { BlogForm } from "../../components/blog-form";
import { updateBlogInDatabase } from "@/redux/thunks/blog";

export default function Page() {
	const dispatch = useDispatch();
	const router = useRouter();
	const { postId } = useParams();
	const { loading } = useSelector((state) => state.blogs);
	const portfolios = useSelector((state) => state.portfolios.items);
	const blog = useSelector((state) =>
		state.blogs.items.find((blog) => blog.id === postId)
	);

	const onSubmit = async (data) => {
		try {
			await dispatch(
				updateBlogInDatabase({
					blogId: postId,
					portfolioId: blog.portfolioId,
					data,
				})
			).unwrap();

			toast.success("Blog post updated successfully");
			router.push("/dashboard/blogs");
		} catch (error) {
			toast.error(error.message || "Failed to update blog post");
		}
	};

	if (!blog) {
		return <div>Loading...</div>;
	}

	return (
		<div className="container max-w-4xl py-10">
			<BlogForm
				onSubmit={onSubmit}
				loading={loading}
				defaultValues={blog}
				portfolios={portfolios}
			/>
		</div>
	);
}

================
File: app/dashboard/blogs/[postId]/page.jsx
================
"use client";

import { useSelector, useDispatch } from "react-redux";
import { useRouter, useParams } from "next/navigation";
import { Button } from "@/components/ui/button";
import { updateBlogInDatabase } from "@/redux/thunks/blog";
import {
	ArrowLeft,
	PencilSimple,
	CloudArrowUp,
	CloudX,
} from "@phosphor-icons/react";
import { toast } from "sonner";
import dayjs from "dayjs";
import { BlogPostSkeleton } from "@/components/blog/blog-post-skeleton";
import { useState } from "react";
import { Spinner } from "@/components/ui/Spinner";
import { BlogPost } from "@/components/blog/blog-post";

export default function Page() {
	const dispatch = useDispatch();
	const router = useRouter();
	const [isPublishing, setIsPublishing] = useState(false);
	const { postId } = useParams();
	const blog = useSelector((state) =>
		state.blogs.items.find((blog) => blog.id === postId)
	);
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((p) => p.id === blog?.portfolioId)
	);

	const handleBack = () => {
		router.push("/dashboard/blogs");
	};

	const handleEdit = () => {
		router.push(`/dashboard/blogs/${postId}/edit`);
	};

	const handlePublish = async () => {
		try {
			setIsPublishing(true);
			await dispatch(
				updateBlogInDatabase({
					blogId: postId,
					portfolioId: blog.portfolioId,
					data: {
						status: blog.status === "draft" ? "published" : "draft",
						publishedAt:
							blog.status === "draft" ? new Date() : null,
					},
				})
			).unwrap();

			toast.success(
				`Blog post ${blog.status === "draft" ? "published" : "unpublished"} successfully`
			);
		} catch (error) {
			toast.error(
				error.message ||
					`Failed to ${
						blog.status === "draft" ? "publish" : "unpublish"
					} the blog post`
			);
		} finally {
			setIsPublishing(false);
		}
	};

	if (!blog || !portfolio) {
		return <BlogPostSkeleton />;
	}

	const contentHtml =
		typeof blog.content === "string"
			? blog.content
			: JSON.stringify(blog.content);

	return (
		<div className="relative">
			<div className="sticky top-0 z-10 flex items-center justify-between gap-4 bg-background/80 backdrop-blur-sm px-6 py-4 border-b">
				<Button variant="ghost" size="sm" onClick={handleBack}>
					<ArrowLeft size={20} className="mr-2" />
					Back
				</Button>

				<div className="flex items-center gap-2">
					<Button variant="outline" size="sm" onClick={handleEdit}>
						<PencilSimple size={20} className="mr-2" />
						Edit
					</Button>
					<Button
						variant={
							blog.status === "draft" ? "default" : "secondary"
						}
						size="sm"
						onClick={handlePublish}
						disabled={isPublishing}
					>
						{blog.status === "draft" ? (
							<CloudArrowUp size={20} className="mr-2" />
						) : (
							<CloudX size={20} className="mr-2" />
						)}
						{isPublishing && <Spinner />}
						{blog.status === "draft" ? "Publish" : "Unpublish"}
					</Button>
				</div>
			</div>

			<BlogPost
				title={blog.title}
				date={dayjs(blog.publishedAt || blog.updatedAt).format(
					"MMMM D, YYYY"
				)}
				author={{
					name: portfolio?.basics?.name || "Anonymous",
					image: portfolio?.basics?.picture,
				}}
				featuredImage={blog.featuredImage}
				excerpt={blog.excerpt}
				content={contentHtml}
			/>
		</div>
	);
}

================
File: app/dashboard/blogs/components/blog-form.jsx
================
"use client";

import { useEffect, useState } from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { slugify } from "@/utils/text";
import { blogMetadataSchema } from "@/schema/sections/blog";
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "@/components/ui/form";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { RichInput } from "@/components/ui/rich-input";
import { FeaturedImage } from "./featured-image";
import { z } from "zod";
import { logger } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { BadgeInput } from "@/components/ui/badge-input";
import { X } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

// Form Schema
const blogFormSchema = blogMetadataSchema.extend({
	portfolioId: z.string({
		required_error: "Please select a portfolio",
	}),
	content: z.any().nullable(),
});

// Transform a tag string into a tag object
const createTagObject = (tagName) => ({
	name: tagName,
	slug: slugify(tagName),
});

export function BlogForm({
	onSubmit,
	portfolios,
	loading,
	defaultValues = {
		portfolioId: "",
		title: "",
		excerpt: "",
		content: null,
		featuredImage: undefined,
		tags: [],
	},
}) {
	const [validationLoading, setValidationLoading] = useState(false);
	const form = useForm({
		resolver: zodResolver(blogFormSchema),
		defaultValues,
		mode: "onChange", // Enable real-time validation
	});

	const {
		formState: { errors },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors]);

	logger.info("BlogForm initialized", {
		portfoliosAvailable: portfolios.length,
		hasDefaultValues: !!Object.keys(defaultValues).length,
	});

	const validateSlugUniqueness = async (slug, blogId = null) => {
		try {
			const response = await fetch("/api/blogs/validate-slug", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({ slug, excludeId: blogId }),
			});

			const data = await response.json();
			if (!data.isUnique) {
				throw new Error(
					"This slug is already in use. Please choose a different one."
				);
			}
		} catch (error) {
			throw new Error(
				error.message || "Failed to validate slug uniqueness"
			);
		}
	};

	const handleSubmit = async (data) => {
		setValidationLoading(true);
		try {
			logger.info("Validating form data", { data });

			// Validate required fields
			if (!data.title || !data.portfolioId) {
				logger.error("Form validation failed", { data });
				throw new Error("Please fill in all required fields");
			}

			// Validate slug uniqueness
			await validateSlugUniqueness(data.slug, defaultValues.id);

			// Ensure content is not null
			const formData = {
				...data,
				content: data.content || "", // Provide default empty string if null
			};

			logger.info("Submitting form data", { formData });
			await onSubmit(formData);
		} catch (error) {
			logger.error("Form submission error", {
				error: error.message,
				formData: data,
			});
			// Set form error for slug field if it's a slug uniqueness error
			if (error.message.includes("slug is already in use")) {
				form.setError("slug", {
					type: "manual",
					message: error.message,
				});
			}
			// Let the error propagate to be handled by the parent
			throw error;
		} finally {
			setValidationLoading(false);
		}
	};

	const generateSlug = () => {
		const title = form.getValues("title");
		form.setValue("slug", slugify(title));
	};

	return (
		<Form {...form}>
			<form
				onSubmit={form.handleSubmit(handleSubmit)}
				className="space-y-8"
				noValidate // Let our custom validation handle it
			>
				<FormField
					control={form.control}
					name="portfolioId"
					render={({ field, fieldState }) => (
						<FormItem>
							<FormLabel>Select Portfolio</FormLabel>
							<Select
								onValueChange={field.onChange}
								defaultValue={field.value}
							>
								<FormControl>
									<SelectTrigger>
										<SelectValue placeholder="Select a portfolio" />
									</SelectTrigger>
								</FormControl>
								<SelectContent>
									{portfolios.map((portfolio) => (
										<SelectItem
											key={portfolio.id}
											value={portfolio.id}
										>
											{portfolio.name}
										</SelectItem>
									))}
								</SelectContent>
							</Select>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="title"
					render={({ field, fieldState }) => (
						<FormItem>
							<FormLabel>Title</FormLabel>
							<FormControl>
								<Input
									placeholder="Enter blog title"
									{...field}
								/>
							</FormControl>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="slug"
					render={({ field, fieldState }) => (
						<FormItem>
							<FormLabel>Slug</FormLabel>
							<div className="flex gap-2">
								<FormControl>
									<Input
										placeholder="Enter post slug"
										{...field}
									/>
								</FormControl>
								<Button
									type="button"
									variant="outline"
									onClick={generateSlug}
								>
									Generate
								</Button>
							</div>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="excerpt"
					render={({ field, fieldState }) => (
						<FormItem>
							<FormLabel>Excerpt</FormLabel>
							<FormControl>
								<Textarea
									placeholder="Enter blog excerpt"
									{...field}
								/>
							</FormControl>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="tags"
					render={({ field, fieldState }) => (
						<FormItem>
							<FormLabel>Tags</FormLabel>
							<FormControl>
								<div className="space-y-2">
									<BadgeInput
										value={
											field.value?.map(
												(tag) => tag.name
											) || []
										}
										onChange={(newTags) => {
											const tagObjects =
												newTags.map(createTagObject);
											field.onChange(tagObjects);
										}}
										placeholder="Enter tags separated by commas"
									/>
									<div className="flex flex-wrap items-center gap-x-2 gap-y-3">
										<AnimatePresence>
											{field.value?.map((tag, index) => (
												<motion.div
													key={tag.slug}
													layout
													initial={{
														opacity: 0,
														y: -50,
													}}
													animate={{
														opacity: 1,
														y: 0,
														transition: {
															delay: index * 0.1,
														},
													}}
													exit={{
														opacity: 0,
														x: -50,
													}}
												>
													<Badge
														className="cursor-pointer"
														onClick={() => {
															field.onChange(
																field.value.filter(
																	(v) =>
																		v.slug !==
																		tag.slug
																)
															);
														}}
													>
														<span className="mr-1">
															{tag.name}
														</span>
														<X
															size={12}
															weight="bold"
														/>
													</Badge>
												</motion.div>
											))}
										</AnimatePresence>
									</div>
								</div>
							</FormControl>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="featuredImage"
					render={({ field, fieldState }) => (
						<FormItem className="flex flex-col space-y-5">
							<FormLabel>Featured Image</FormLabel>
							<FormControl>
								<FeaturedImage
									image={field.value}
									setImage={field.onChange}
								/>
							</FormControl>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<FormField
					control={form.control}
					name="content"
					render={({ field, fieldState }) => (
						<FormItem>
							<FormLabel>Content</FormLabel>
							<FormControl>
								<RichInput
									content={field.value}
									onChange={field.onChange}
									className="min-h-[500px]"
									editorClassName="min-h-[500px]"
								/>
							</FormControl>
							{fieldState.error && (
								<FormMessage>
									{fieldState.error?.message}
								</FormMessage>
							)}
						</FormItem>
					)}
				/>

				<Button type="submit" disabled={loading || validationLoading}>
					{loading || validationLoading
						? "Saving..."
						: "Save Blog Post"}
				</Button>
			</form>
		</Form>
	);
}

================
File: app/dashboard/blogs/components/featured-image.jsx
================
"use client";

import { useState, useCallback } from "react";
import { Camera, X, Upload, Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { logger } from "@/lib/utils";
import {
	Dialog,
	DialogContent,
	DialogDescription,
	DialogHeader,
	DialogTitle,
	DialogTrigger,
} from "@/components/ui/dialog";

export const FeaturedImage = ({ image, setImage }) => {
	const [isDragging, setIsDragging] = useState(false);
	const [isHovering, setIsHovering] = useState(false);

	const handleUpload = async (file) => {
		if (!file) return;

		if (file.size / 1024 / 1024 > 50) {
			toast.error("File size too big (max 50MB)");
			return;
		}

		if (!file.type.startsWith("image/")) {
			toast.error("Invalid file type (must be an image)");
			return;
		}

		const loadingToast = toast.loading("Uploading image...");

		try {
			const response = await fetch("/api/file-upload", {
				method: "POST",
				body: file,
			});

			if (!response.ok) {
				throw new Error("Failed to upload file");
			}

			const { blob } = await response.json();
			setImage(blob.url);
			toast.dismiss(loadingToast);
			toast.success("Image uploaded successfully");
			logger.info("Image uploaded:", blob.url);
		} catch (error) {
			logger.error("Upload error:", error);
			toast.dismiss(loadingToast);
			toast.error("Failed to upload image");
		}
	};

	const handleDrop = useCallback(
		(e) => {
			e.preventDefault();
			setIsDragging(false);

			if (e.dataTransfer.files && e.dataTransfer.files[0]) {
				const file = e.dataTransfer.files[0];
				handleUpload(file);
			}
		},
		[setIsDragging]
	);

	const handleDrag = useCallback((e) => {
		e.preventDefault();
		e.stopPropagation();
		if (e.type === "dragenter" || e.type === "dragover") {
			setIsDragging(true);
		} else if (e.type === "dragleave") {
			setIsDragging(false);
		}
	}, []);

	const handleFileSelect = useCallback((e) => {
		if (e.target.files && e.target.files[0]) {
			const file = e.target.files[0];
			handleUpload(file);
		}
	}, []);

	const removeImage = () => {
		setImage(null);
	};

	if (!image) {
		return (
			<Dialog>
				<DialogTrigger>
					<span className="flex gap-1 text-muted-foreground font-semibold">
						<Plus /> Add feature image
					</span>
				</DialogTrigger>
				<DialogContent>
					<DialogHeader>
						<DialogTitle>Upload Feature Image</DialogTitle>
						<DialogDescription>
							Drag and drop an image or click to select a file.
						</DialogDescription>
					</DialogHeader>
					<div>
						<label
							className="group relative flex cursor-pointer flex-col items-center justify-center aspect-video max-w-screen-lg border-gray-300 bg-white hover:border-gray-400 transition-colors shadow-sm"
							htmlFor="featured-image"
						>
							<div
								className="absolute z-[5] h-full w-full rounded-md"
								onDragEnter={handleDrag}
								onDragLeave={handleDrag}
								onDragOver={handleDrag}
								onDrop={handleDrop}
							/>
							<div
								className={`${isDragging ? "border-blue-500 bg-blue-50" : ""} 
						absolute z-[3] flex h-full w-full flex-col items-center justify-center rounded-md px-10 transition-all`}
							>
								<Camera className="w-12 h-12 text-gray-400 mb-4" />

								<p className="mt-2 text-center text-sm text-gray-500">
									Drag and drop or click to upload.
								</p>
							</div>
						</label>
						<div className="mt-1 flex rounded-md shadow-sm">
							<input
								type="file"
								className="hidden"
								accept="image/*"
								onChange={handleFileSelect}
								id="featured-image"
							/>
						</div>
					</div>
				</DialogContent>
			</Dialog>
		);
	}

	return (
		<div
			className="relative max-w-screen-lg aspect-video group mx-auto"
			onMouseEnter={() => setIsHovering(true)}
			onMouseLeave={() => setIsHovering(false)}
		>
			<img
				src={image}
				alt={"Blog image"}
				className="w-full h-full object-cover rounded-lg"
			/>

			{/* Overlay and controls */}
			<div
				className={`absolute inset-0 bg-black bg-opacity-50 transition-opacity rounded-lg
        ${isHovering ? "opacity-100" : "opacity-0"}
      `}
			>
				<div className="absolute top-4 right-4 flex gap-2">
					<label className="cursor-pointer">
						<Button
							variant="secondary"
							size="sm"
							className="bg-white hover:bg-gray-100"
						>
							<Upload className="w-4 h-4 mr-2" />
							Change
						</Button>
						<input
							type="file"
							className="hidden"
							accept="image/*"
							onChange={handleFileSelect}
						/>
					</label>
					<Button
						variant="secondary"
						size="sm"
						className="bg-white hover:bg-gray-100"
						onClick={removeImage}
					>
						<X className="w-4 h-4" />
					</Button>
				</div>

				{/* Image caption/alt text */}
				{/* <div className="absolute bottom-4 left-4 right-4">
					<input
						type="text"
						value={image.alt}
						onChange={(e) =>
							setImage({ ...image, alt: e.target.value })
						}
						placeholder="Write a caption for your image (optional)"
						className="w-full px-3 py-2 bg-white bg-opacity-90 rounded-md text-sm"
					/>
				</div> */}
			</div>
		</div>
	);
};

================
File: app/dashboard/blogs/new/page.js
================
"use client";

import { useDispatch, useSelector } from "react-redux";
import { useRouter } from "next/navigation";
import { BlogForm } from "../components/blog-form";
import { createBlogInDatabase } from "@/redux/thunks/blog";
import { toast } from "sonner";
import { defaultBlogMetadata } from "@/schema/sections/blog";
import { logger } from "@/lib/utils";

export default function NewBlogPost() {
	const dispatch = useDispatch();
	const router = useRouter();
	const { loading } = useSelector((state) => state.blogs);
	const portfolios = useSelector((state) => state.portfolios.items);

	logger.info("Initializing NewBlogPost component", {
		portfoliosCount: portfolios?.length,
	});

	logger.info("Available portfolios for blog post: ", { portfolios });

	const onSubmit = async (data) => {
		const startTime = performance.now();
		logger.info("Starting blog creation", { blogTitle: data.title });

		try {
			// Destructure portfolioId and create proper payload structure
			const { portfolioId, ...blogData } = data;

			logger.info("Creating blog with data:", { portfolioId, blogData });

			await dispatch(
				createBlogInDatabase({
					portfolioId,
					data: {
						...defaultBlogMetadata,
						...blogData,
					},
				})
			).unwrap();

			const endTime = performance.now();
			logger.info("Blog post created successfully", {
				duration: `${(endTime - startTime).toFixed(2)}ms`,
				blogTitle: data.title,
				portfolioId: data.portfolioId,
			});

			toast.success("Blog post created successfully");
			router.push("/dashboard/blogs");
		} catch (error) {
			logger.error("Failed to create blog post", {
				error: error.message,
				stack: error.stack,
				blogData: data,
			});
			toast.error(error.message || "Failed to create blog post");
		}
	};

	return (
		<div className="container max-w-4xl py-10">
			<BlogForm
				onSubmit={onSubmit}
				portfolios={portfolios}
				loading={loading}
			/>
		</div>
	);
}

================
File: app/dashboard/blogs/page.js
================
"use client";

import React from "react";
import { useSelector } from "react-redux";
import { AnimatePresence, motion } from "framer-motion";
import { CreateBlogCard } from "../components/create-blog-card";
import { BaseCard } from "../components/base-card";
import { BlogCard } from "../components/blog-card";
import { logger } from "@/lib/utils";

function Page() {
	const { items: blogs, loading } = useSelector((state) => state.blogs);

	// Create a mutable copy of the blogs array before sorting
	const sortedBlogs = [...blogs].sort((a, b) => {
		// Apply your sorting logic here
		return new Date(b.updatedAt) - new Date(a.updatedAt);
	});

	logger.info("Sorted blogs:", sortedBlogs);

	return (
		<div className="grid grid-cols-1 gap-8 sm:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
			<motion.div
				initial={{ opacity: 0, x: -50 }}
				animate={{ opacity: 1, x: 0 }}
			>
				<CreateBlogCard />
			</motion.div>

			{loading &&
				Array.from({ length: 4 }).map((_, i) => (
					<div
						key={i}
						className="duration-300 animate-in fade-in"
						style={{
							animationFillMode: "backwards",
							animationDelay: `${i * 300}ms`,
						}}
					>
						<BaseCard />
					</div>
				))}

			{blogs && (
				<AnimatePresence>
					{sortedBlogs.map((blog, index) => (
						<motion.div
							key={blog.id}
							layout
							initial={{ opacity: 0, x: -50 }}
							animate={{
								opacity: 1,
								x: 0,
								transition: { delay: (index + 2) * 0.1 },
							}}
							exit={{
								opacity: 0,
								filter: "blur(8px)",
								transition: { duration: 0.5 },
							}}
						>
							<BlogCard blog={blog} />
						</motion.div>
					))}
				</AnimatePresence>
			)}
		</div>
	);
}

export default Page;

================
File: app/dashboard/components/base-card.jsx
================
import { Card } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import Tilt from "react-parallax-tilt";

import { defaultTiltProps } from "@/utils/constants";

export const BaseCard = ({ children, className, onClick }) => (
	<Tilt {...defaultTiltProps}>
		<Card
			className={cn(
				"relative flex aspect-[1/1.4142] scale-100 cursor-pointer items-center justify-center bg-secondary/50 p-0 transition-transform active:scale-95",
				className
			)}
			onClick={onClick}
		>
			{children}
		</Card>
	</Tilt>
);

================
File: app/dashboard/components/blog-card.jsx
================
import {
	CopySimple,
	FolderOpen,
	Lock,
	LockOpen,
	PencilSimple,
	TrashSimple,
	CloudArrowUp,
	CloudX,
} from "@phosphor-icons/react";
import { useDispatch } from "react-redux";
import { useState } from "react";
import {
	AlertDialog,
	AlertDialogAction,
	AlertDialogCancel,
	AlertDialogContent,
	AlertDialogDescription,
	AlertDialogFooter,
	AlertDialogHeader,
	AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import {
	removeBlogFromDatabase,
	updateBlogInDatabase,
	createBlogInDatabase,
} from "@/redux/thunks/blog";
import {
	ContextMenu,
	ContextMenuContent,
	ContextMenuItem,
	ContextMenuSeparator,
	ContextMenuTrigger,
} from "@/components/ui/context-menu";
import { cn, logger } from "@/lib/utils";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { AnimatePresence, motion } from "framer-motion";
import { toast } from "sonner";
import { BaseCard } from "./base-card";
import { useRouter } from "next/navigation";

// Initialize the relative time plugin
dayjs.extend(relativeTime);

export const BlogCard = ({ blog }) => {
	const dispatch = useDispatch();
	const router = useRouter();
	const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);

	const formattedDate = dayjs(new Date(blog.updatedAt)).fromNow();

	const onOpen = () => {
		router.push(`/dashboard/blogs/${blog.id}`);
	};

	const onUpdate = () => {
		router.push(`/dashboard/blogs/${blog.id}/edit`);
	};

	const onDuplicate = async () => {
		try {
			const result = await dispatch(
				createBlogInDatabase({
					portfolioId: blog.portfolioId,
					data: {
						title: `${blog.title} (Copy)`,
						slug: `${blog.slug}-copy`,
						excerpt: blog.excerpt || "",
						content: blog.content,
						featuredImage: blog.featuredImage,
						status: "draft",
						tags: blog.tags?.map((tag) => tag.name) || [],
					},
				})
			).unwrap();

			if (result.error) {
				throw new Error(result.error);
			}

			toast.success("Blog post duplicated successfully");
		} catch (error) {
			toast.error(error.message || "Failed to duplicate the blog post");
			logger.error("Blog duplication error:", error);
		}
	};

	const onDelete = async () => {
		setDeleteDialogOpen(true);
	};

	const handleDelete = async () => {
		try {
			const result = await dispatch(
				removeBlogFromDatabase({
					blogId: blog.id,
					portfolioId: blog.portfolioId,
				})
			).unwrap();

			if (result.error) {
				throw new Error(result.error);
			}

			toast.success("Blog post deleted successfully");
		} catch (error) {
			toast.error(error.message || "Failed to delete the blog post");
		} finally {
			setDeleteDialogOpen(false);
		}
	};

	const onPublish = async () => {
		try {
			const result = await dispatch(
				updateBlogInDatabase({
					blogId: blog.id,
					portfolioId: blog.portfolioId,
					data: {
						status: blog.status === "draft" ? "published" : "draft",
						publishedAt:
							blog.status === "draft" ? new Date() : null,
					},
				})
			).unwrap();

			if (result.error) {
				throw new Error(result.error);
			}

			toast.success(
				`Blog post ${blog.status === "draft" ? "published" : "unpublished"} successfully`
			);
		} catch (error) {
			toast.error(
				error.message ||
					`Failed to ${blog.status === "draft" ? "publish" : "unpublish"} the blog post`
			);
		}
	};

	if (!blog) return;

	return (
		<>
			<ContextMenu>
				<ContextMenuTrigger>
					<BaseCard className="space-y-0" onClick={onOpen}>
						<AnimatePresence>
							{blog.status === "draft" && (
								<motion.div
									initial={{ opacity: 0 }}
									animate={{ opacity: 1 }}
									exit={{ opacity: 0 }}
									className="absolute inset-0 flex items-center justify-center bg-background/75 backdrop-blur-sm"
								>
									<Lock size={42} />
								</motion.div>
							)}
						</AnimatePresence>

						<div
							className={cn(
								"absolute inset-x-0 bottom-0 z-10 flex flex-col justify-end space-y-0.5 p-4 pt-12",
								"bg-gradient-to-t from-background/80 to-transparent"
							)}
						>
							<h4 className="line-clamp-2 font-medium">
								{blog.title}
							</h4>
							<p className="line-clamp-1 text-xs opacity-75">{`Last updated ${formattedDate}`}</p>
						</div>
					</BaseCard>
				</ContextMenuTrigger>

				<ContextMenuContent>
					<ContextMenuItem onClick={onOpen}>
						<FolderOpen size={14} className="mr-2" />
						{`Open`}
					</ContextMenuItem>
					<ContextMenuItem onClick={onUpdate}>
						<PencilSimple size={14} className="mr-2" />
						{`Update`}
					</ContextMenuItem>
					{/* <ContextMenuItem onClick={onDuplicate}>
						<CopySimple size={14} className="mr-2" />
						{`Duplicate`}
					</ContextMenuItem> */}
					{blog.status == "draft" ? (
						<ContextMenuItem onClick={onPublish}>
							<CloudArrowUp size={14} className="mr-2" />
							{`Publish`}
						</ContextMenuItem>
					) : (
						<ContextMenuItem onClick={onPublish}>
							<CloudX size={14} className="mr-2" />
							{`Unpublish`}
						</ContextMenuItem>
					)}
					<ContextMenuSeparator />
					<ContextMenuItem className="text-error" onClick={onDelete}>
						<TrashSimple size={14} className="mr-2" />
						{`Delete`}
					</ContextMenuItem>
				</ContextMenuContent>
			</ContextMenu>

			<AlertDialog
				open={deleteDialogOpen}
				onOpenChange={setDeleteDialogOpen}
			>
				<AlertDialogContent>
					<AlertDialogHeader>
						<AlertDialogTitle>Are you sure?</AlertDialogTitle>
						<AlertDialogDescription>
							This action cannot be undone. This will permanently
							delete the blog post.
						</AlertDialogDescription>
					</AlertDialogHeader>
					<AlertDialogFooter>
						<AlertDialogCancel>Cancel</AlertDialogCancel>
						<AlertDialogAction onClick={handleDelete}>
							Delete
						</AlertDialogAction>
					</AlertDialogFooter>
				</AlertDialogContent>
			</AlertDialog>
		</>
	);
};

================
File: app/dashboard/components/create-blog-card.jsx
================
"use client";

import { Plus } from "@phosphor-icons/react";
import { cn } from "@/lib/utils";
import { BaseCard } from "./base-card";
import { useRouter } from "next/navigation";

export const CreateBlogCard = () => {
	const router = useRouter();
	return (
		<BaseCard onClick={() => router.push("/dashboard/blogs/new")}>
			<Plus size={64} weight="thin" />

			<div
				className={cn(
					"absolute inset-x-0 bottom-0 z-10 flex flex-col justify-end space-y-0.5 p-4 pt-12",
					"bg-gradient-to-t from-background/80 to-transparent"
				)}
			>
				<h4 className="font-medium">
					{`Create a new post`}
					{/* <KeyboardShortcut className="ml-2">^N</KeyboardShortcut> */}
				</h4>

				<p className="text-xs opacity-75">{`Start a new post`}</p>
			</div>
		</BaseCard>
	);
};

================
File: app/dashboard/components/create-portfolio-card.jsx
================
"use client";

import { Plus } from "@phosphor-icons/react";
import { cn } from "@/lib/utils";
import { BaseCard } from "./base-card";
import { useState, useEffect } from "react";
import { defaultPortfolio, portfolioSchema } from "@/schema/sections";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { logger } from "@/lib/utils";
import { PortfolioDialog } from "@/components/dialogs/portfolio-dialog";

export const CreatePortfolioCard = () => {
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(portfolioSchema),
		defaultValues: defaultPortfolio,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	return (
		<>
			<BaseCard onClick={() => setIsOpen(true)}>
				<Plus size={64} weight="thin" />
				<div
					className={cn(
						"absolute inset-x-0 bottom-0 z-10 flex flex-col justify-end space-y-0.5 p-4 pt-12",
						"bg-gradient-to-t from-background/80 to-transparent"
					)}
				>
					<h4 className="font-medium">
						{`Create a new portfolio`}
						{/* <KeyboardShortcut className="ml-2">^N</KeyboardShortcut> */}
					</h4>
					<p className="text-xs opacity-75">
						Start a new presentation
					</p>
				</div>
			</BaseCard>
			<PortfolioDialog
				form={form}
				isOpen={isOpen}
				setIsOpen={setIsOpen}
			/>
		</>
	);
};

================
File: app/dashboard/components/portfolio-card.jsx
================
"use client";

import {
	CopySimple,
	FolderOpen,
	Lock,
	PencilSimple,
	TrashSimple,
	Globe,
	Star,
	Layout,
	FileText,
} from "@phosphor-icons/react";
import { StarOff } from "lucide-react";
import {
	ContextMenu,
	ContextMenuContent,
	ContextMenuItem,
	ContextMenuSeparator,
	ContextMenuTrigger,
} from "@/components/ui/context-menu";
import { cn } from "@/lib/utils";
import dayjs from "dayjs";
import { AnimatePresence, motion } from "framer-motion";
import { BaseCard } from "./base-card";
import { useRouter } from "next/navigation";
import { useDispatch } from "react-redux";
import {
	updatePortfolioInDatabase,
	removePortfolioFromDatabase,
	addPortfolioInDatabase,
} from "@/redux/thunks/portfolio";
import { createId } from "@paralleldrive/cuid2";
import { useState, useEffect } from "react";
import { PortfolioDialog } from "@/components/dialogs/portfolio-dialog";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { portfolioSchema } from "@/schema/sections";
import { useOrganizationContext } from "@/context/OrganizationContext";
import { logger } from "@/lib/utils";

export const PortfolioCard = ({ portfolio }) => {
	const router = useRouter();
	const [isOpen, setIsOpen] = useState(false);
	const dispatch = useDispatch();
	const { organization, canManagePortfolios } = useOrganizationContext();

	const form = useForm({
		resolver: zodResolver(portfolioSchema),
		defaultValues: portfolio,
	});

	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	const lastUpdated = dayjs(portfolio.updatedAt);

	const onOpen = () => {
		router.push(`/builder/${portfolio.id}`);
	};

	const onDuplicate = () => {
		const duplicatedPortfolio = {
			...portfolio,
			id: createId(), // Remove ID to create a new one
			name: `${portfolio.name} (Copy)`,
			slug: `${portfolio.slug}-copy`,
		};
		dispatch(addPortfolioInDatabase(duplicatedPortfolio));
	};

	const onDelete = () => {
		dispatch(removePortfolioFromDatabase(portfolio.id));
	};

	// Only show edit/delete options if user has permission
	const showManageOptions = !organization || canManagePortfolios;

	return (
		<ContextMenu>
			<ContextMenuTrigger>
				<BaseCard
					className="relative overflow-hidden cursor-pointer hover:shadow-lg transition-all"
					onClick={onOpen}
				>
					<AnimatePresence>
						{portfolio.locked && (
							<motion.div
								initial={{ opacity: 0 }}
								animate={{ opacity: 1 }}
								exit={{ opacity: 0 }}
								className="absolute inset-0 z-50 flex items-center justify-center bg-background/75 backdrop-blur-sm"
							>
								<Lock size={42} />
							</motion.div>
						)}
					</AnimatePresence>

					<div
						className={cn(
							"absolute inset-x-0 bottom-0 z-10 flex flex-col justify-end space-y-0.5 p-4 pt-12",
							"bg-gradient-to-t from-background/80 to-transparent"
						)}
					>
						<div className="mb-4">
							<div className="flex items-center gap-2 mb-2">
								<Layout className="w-5 h-5" />
								<h3 className="font-medium">
									{portfolio.name}
								</h3>
							</div>
							<div className="flex items-center gap-2 text-sm text-muted-foreground">
								<Globe className="w-4 h-4" />
								<span>
									{portfolio.customDomain || "No domain set"}
								</span>
							</div>
						</div>

						<div className="space-y-2 text-sm text-muted-foreground">
							<p>Template: {portfolio.template || "Default"}</p>
							{lastUpdated && (
								<p>
									Last updated:{" "}
									{lastUpdated.format("MMMM D, YYYY")}
								</p>
							)}
							<div className="flex items-center gap-2">
								<FileText className="w-4 h-4" />
								Blog:{" "}
								{portfolio.blogEnabled ? "Enabled" : "Disabled"}
							</div>
							{portfolio.organization && (
								<p className="text-xs">
									Organization: {portfolio.organization.name}
								</p>
							)}
						</div>
					</div>
				</BaseCard>
			</ContextMenuTrigger>

			<PortfolioDialog
				form={form}
				currentPortfolio={portfolio}
				isOpen={isOpen}
				setIsOpen={setIsOpen}
			/>

			{showManageOptions && (
				<ContextMenuContent>
					<ContextMenuItem onClick={onOpen}>
						<FolderOpen size={14} className="mr-2" />
						{`Open`}
					</ContextMenuItem>
					<ContextMenuItem onClick={() => setIsOpen(true)}>
						<PencilSimple size={14} className="mr-2" />
						{`Rename`}
					</ContextMenuItem>
					<ContextMenuItem onClick={onDuplicate}>
						<CopySimple size={14} className="mr-2" />
						{`Duplicate`}
					</ContextMenuItem>
					<ContextMenuSeparator />
					<ContextMenuItem className="text-error" onClick={onDelete}>
						<TrashSimple size={14} className="mr-2" />
						{`Delete`}
					</ContextMenuItem>
				</ContextMenuContent>
			)}
		</ContextMenu>
	);
};

================
File: app/dashboard/layout.js
================
"use client";
import React, { useState, useEffect, Suspense } from "react";
import Link from "next/link";
import { motion } from "framer-motion";
import Image from "next/image";
import { siteConfig } from "@/config/site";
import { useDispatch } from "react-redux";
import { setPortfolios } from "@/redux/features/portfolioSlice";
import { setBlogs } from "@/redux/features/blogSlice";
import { logger } from "@/lib/utils";
import { setUser } from "@/redux/features/userSlice";
import { OrganizationProvider } from "@/context/OrganizationContext";
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { DashboardSidebar } from "@/components/dashboard-sidebar";
import ModeToggle from "@/components/mode-toggle";
import { useVerifyPayment } from "@/hooks/use-verify-payment";
import { usePathname } from "next/navigation";
import {
	Breadcrumb,
	BreadcrumbItem,
	BreadcrumbLink,
	BreadcrumbList,
	BreadcrumbPage,
	BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";

const generateBreadcrumbs = (pathname) => {
	const paths = pathname.split("/").filter(Boolean);
	return paths.map((path, index) => ({
		label: path.charAt(0).toUpperCase() + path.slice(1),
		href: "/" + paths.slice(0, index + 1).join("/"),
		current: index === paths.length - 1,
	}));
};

const DashboardLayoutContent = ({ children }) => {
	useVerifyPayment();
	const dispatch = useDispatch();
	const pathname = usePathname();
	const breadcrumbs = generateBreadcrumbs(pathname);

	useEffect(() => {
		const fetchData = async () => {
			const startTime = performance.now();
			logger.info("Starting dashboard data fetch");

			try {
				logger.info("Fetching portfolio data from API");
				const response = await fetch(`/api/portfolio`);

				if (!response.ok) {
					logger.error("API request failed", {
						status: response.status,
						statusText: response.statusText,
					});
					throw new Error("Failed to fetch user data");
				}

				const { portfolios, user } = await response.json();
				logger.info("Data received from API", {
					portfoliosCount: portfolios?.data?.length,
					hasUser: !!user,
				});

				if (portfolios?.data) {
					logger.info("Updating portfolios in store", {
						count: portfolios.data.length,
					});
					dispatch(setPortfolios(portfolios.data));

					// Fetch blogs for each portfolio
					const blogsPromises = portfolios.data.map(
						async (portfolio) => {
							try {
								const blogResponse = await fetch(
									`/api/blogs?portfolioId=${portfolio.id}`
								);
								if (!blogResponse.ok)
									throw new Error(
										`Failed to fetch blogs for portfolio ${portfolio.id}`
									);
								const { blogs } = await blogResponse.json();
								return blogs?.data || [];
							} catch (error) {
								logger.error(
									`Error fetching blogs for portfolio ${portfolio.id}:`,
									error
								);
								return [];
							}
						}
					);

					// Wait for all blog fetches to complete
					const allBlogs = await Promise.all(blogsPromises);
					// Combine all blogs into a single array
					const flattenedBlogs = allBlogs.flat();

					logger.info("Updating blogs in store", {
						totalBlogs: flattenedBlogs.length,
						portfoliosCount: portfolios.data.length,
						blogs: flattenedBlogs,
					});

					dispatch(setBlogs(flattenedBlogs));
				}

				if (user) {
					logger.info("Updating user in store", {
						userId: user.id,
					});
					dispatch(setUser(user));
				}

				const endTime = performance.now();
				logger.info("Dashboard data fetch completed", {
					duration: `${(endTime - startTime).toFixed(2)}ms`,
				});
			} catch (error) {
				logger.error("Error in dashboard data fetch", {
					error: error.message,
					stack: error.stack,
				});
			}
		};

		fetchData();
	}, [dispatch]);

	logger.info("Rendering dashboard layout");
	return (
		<OrganizationProvider>
			<SidebarProvider>
				<DashboardSidebar />
				<main className="flex flex-1 min-h-screen">
					<div className="p-2 md:p-10 flex flex-col gap-2 flex-1 w-full h-full">
						<div className="flex items-center justify-between">
							<div className="flex items-center gap-4">
								<SidebarTrigger />
								<Breadcrumb>
									<BreadcrumbList>
										<BreadcrumbItem>
											<BreadcrumbLink href="/dashboard">
												Dashboard
											</BreadcrumbLink>
										</BreadcrumbItem>
										{breadcrumbs
											.slice(1)
											.map((breadcrumb, index) => (
												<React.Fragment
													key={breadcrumb.href}
												>
													<BreadcrumbSeparator />
													<BreadcrumbItem>
														{breadcrumb.current ? (
															<BreadcrumbPage>
																{
																	breadcrumb.label
																}
															</BreadcrumbPage>
														) : (
															<BreadcrumbLink
																href={
																	breadcrumb.href
																}
															>
																{
																	breadcrumb.label
																}
															</BreadcrumbLink>
														)}
													</BreadcrumbItem>
												</React.Fragment>
											))}
									</BreadcrumbList>
								</Breadcrumb>
							</div>
							<ModeToggle />
						</div>
						{children}
					</div>
				</main>
			</SidebarProvider>
		</OrganizationProvider>
	);
};

export default function DashboardLayout({ children }) {
	return (
		<Suspense fallback={null}>
			<DashboardLayoutContent>{children}</DashboardLayoutContent>
		</Suspense>
	);
}

export const Logo = () => {
	return (
		<Link
			href="/"
			className="font-normal flex space-x-2 items-center text-sm text-black py-1 relative z-20"
		>
			<Image
				src="/icon.png"
				className="h-7 w-7 flex-shrink-0 rounded-full"
				width={50}
				height={50}
				alt={siteConfig.name}
			/>
			<motion.span
				initial={{ opacity: 0 }}
				animate={{ opacity: 1 }}
				className="font-medium text-black dark:text-white whitespace-pre"
			>
				{siteConfig.name}
			</motion.span>
		</Link>
	);
};
export const LogoIcon = () => {
	return (
		<Link
			href="/"
			className="font-normal flex space-x-2 items-center text-sm text-black py-1 relative z-20"
		>
			<Image
				src="/icon.png"
				className="h-7 w-7 flex-shrink-0 rounded-full"
				width={50}
				height={50}
				alt={siteConfig.name}
			/>
		</Link>
	);
};

================
File: app/dashboard/portfolios/page.js
================
"use client";

import { useSelector } from "react-redux";
import { AnimatePresence, motion } from "framer-motion";
import { PortfolioCard } from "../components/portfolio-card";
import { BaseCard } from "../components/base-card";
import { CreatePortfolioCard } from "../components/create-portfolio-card";

function Page() {
	const portfolios = useSelector((state) => state.portfolios.items);
	const loading = useSelector((state) => state.portfolios.loading);

	return (
		<div className="grid grid-cols-1 gap-8 sm:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5">
			<motion.div
				initial={{ opacity: 0, x: -50 }}
				animate={{ opacity: 1, x: 0 }}
			>
				<CreatePortfolioCard />
			</motion.div>

			{loading &&
				Array.from({ length: 4 }).map((_, i) => (
					<div
						key={i}
						className="duration-300 animate-in fade-in"
						style={{
							animationFillMode: "backwards",
							animationDelay: `${i * 300}ms`,
						}}
					>
						<BaseCard />
					</div>
				))}

			{portfolios && (
				<AnimatePresence key={"portfolios"}>
					{portfolios.map((portfolio, index) => (
						<motion.div
							key={index}
							layout
							initial={{ opacity: 0, x: -50 }}
							animate={{
								opacity: 1,
								x: 0,
								transition: { delay: (index + 2) * 0.1 },
							}}
							exit={{
								opacity: 0,
								filter: "blur(8px)",
								transition: { duration: 0.5 },
							}}
						>
							<PortfolioCard portfolio={portfolio} />
						</motion.div>
					))}
				</AnimatePresence>
			)}
		</div>
	);
}

export default Page;

================
File: app/dashboard/settings/components/subscription-settings.jsx
================
"use client";

import { Button } from "@/components/ui/button";
import { useSelector } from "react-redux";
import { Card } from "@/components/ui/card";
import { CreditCard, Package } from "@phosphor-icons/react";
import {
	Dialog,
	DialogContent,
	DialogTrigger,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import Pricing from "@/components/homepage/pricing";
import { Separator } from "@/components/ui/separator";

export function SubscriptionSettings() {
	const subscription = useSelector((state) => state.user.subscription);

	return (
		<Card>
			<div className="space-y-6 p-6">
				<div>
					<h3 className="text-lg font-medium">Subscription</h3>
					<p className="text-sm text-muted-foreground">
						Manage your subscription and billing information.
					</p>
				</div>
				<Separator />

				<div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6 items-center">
					<div className="space-y-1">
						<h4 className="font-medium flex items-center gap-2">
							<Package className="h-4 w-4" />
							Current Plan
						</h4>
						<p className="text-sm text-muted-foreground">
							{subscription?.plan || "Not Subscribed"}
						</p>
					</div>
					<div className="flex justify-start sm:justify-end">
						<Dialog>
							<DialogTrigger asChild>
								<Button variant="outline">
									<CreditCard className="mr-2 h-4 w-4" />
									Manage Subscription
								</Button>
							</DialogTrigger>
							<DialogContent className="max-w-5xl max-h-[90vh] overflow-y-auto">
								<DialogHeader>
									<DialogTitle>
										Manage Your Subscription
									</DialogTitle>
								</DialogHeader>
								<Pricing
									isDialog={true}
									returnUrl={window.location.href}
								/>
							</DialogContent>
						</Dialog>
					</div>
				</div>
			</div>
		</Card>
	);
}

================
File: app/dashboard/settings/page.js
================
"use client";

import { Separator } from "@/components/ui/separator";
import { SubscriptionSettings } from "./components/subscription-settings";

export default function SettingsPage() {
	return (
		<div className="w-full space-y-6">
			<div className="flex mx-auto max-w-3xl flex-col space-y-6">
				<div>
					<h3 className="text-lg font-medium">Settings</h3>
					<p className="text-sm text-muted-foreground">
						Manage your account settings and preferences.
					</p>
				</div>
				<Separator />
				<SubscriptionSettings />
			</div>
		</div>
	);
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
    --color-1: 0 100% 63%;
    --color-2: 270 100% 63%;
    --color-3: 210 100% 63%;
    --color-4: 195 100% 63%;
    --color-5: 90 100% 63%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
    --color-1: 0 100% 63%;
    --color-2: 270 100% 63%;
    --color-3: 210 100% 63%;
    --color-4: 195 100% 63%;
    --color-5: 90 100% 63%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.js
================
import { ClerkProvider } from "@clerk/nextjs";
import localFont from "next/font/local";
import CustomProvider from "@/redux/provider";
import { ThemeProvider, CSPostHogProvider } from "./providers";
import { Toaster } from "sonner";
import { cn } from "@/lib/utils";
import { Inter as FontSans } from "next/font/google";
import "./globals.css";
import { TooltipProvider } from "@/components/ui/tooltip";
import { siteConfig } from "@/config/site";
import { SanityLive } from "@/sanity/lib/live";

const fontSans = FontSans({
	subsets: ["latin"],
	variable: "--font-sans",
});

export const metadata = {
	title: {
		default: siteConfig.name,
		template: `%s | ${siteConfig.name}`,
	},
	description: siteConfig.description,
	keywords: siteConfig.keywords,
	openGraph: {
		type: "website",
		url: siteConfig.url,
		title: siteConfig.name,
		description: siteConfig.description,
		images: [
			{
				url: `/og.png`,
				width: 1200,
				height: 630,
				alt: siteConfig.name,
			},
		],
	},
	twitter: {
		card: "summary_large_image",
		title: siteConfig.name,
		description: siteConfig.description,
		images: [`/og.png`],
		creator: siteConfig.twitterHandle,
	},
	icons: {
		icon: "/favicon.ico",
		apple: "/apple-touch-icon.png",
	},
	metadataBase: new URL(siteConfig.url),
};

export default function RootLayout({ children }) {
	return (
		<ClerkProvider>
			<html lang="en" suppressHydrationWarning>
				<CSPostHogProvider>
					<body
						className={cn(
							"min-h-screen bg-background font-sans antialiased",
							fontSans.variable
						)}
					>
						<CustomProvider>
							<ThemeProvider
								attribute="class"
								defaultTheme="system"
								enableSystem
								disableTransitionOnChange
							>
								<TooltipProvider delayDuration={0}>
									<Toaster />
									<SanityLive />
									{children}
								</TooltipProvider>
							</ThemeProvider>
						</CustomProvider>
					</body>
				</CSPostHogProvider>
			</html>
		</ClerkProvider>
	);
}

================
File: app/not-found.jsx
================
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import Link from "next/link";

export default function NotFound() {
	return (
		<>
			<main className="grid min-h-full place-items-center px-6 py-24 sm:py-32 lg:px-8">
				<div className="text-center">
					<Badge className="text-base font-semibold">404</Badge>
					<h1 className="mt-4 text-balance text-5xl font-semibold tracking-tight sm:text-7xl">
						Page not found
					</h1>
					<p className="mt-6 text-pretty text-lg font-medium sm:text-xl/8">
						Sorry, we couldn&rsquo;t find the page you&rsquo;re
						looking for.
					</p>
					<div className="mt-10 flex items-center justify-center gap-x-6">
						<Button size="sm">
							<Link href={process.env.NEXT_PUBLIC_APP_URL}>
								Go back home
							</Link>
						</Button>
						<Button
							size="sm"
							variant="link"
							className="text-sm font-semibold"
						>
							<Link
								href={`${process.env.NEXT_PUBLIC_APP_URL}/contact-us`}
							>
								Contact support{" "}
								<span aria-hidden="true">&rarr;</span>
							</Link>
						</Button>
					</div>
				</div>
			</main>
		</>
	);
}

================
File: app/page.js
================
import { AccordionComponent } from "@/components/homepage/accordion-component";
import { HeroSection } from "@/components/homepage/hero-section";
import Newsletter from "@/components/homepage/newsletter";
import Pricing from "@/components/homepage/pricing";
import { Features } from "@/components/homepage/features";
import PageWrapper from "@/components/wrapper/page-wrapper";

export default function Home() {
	return (
		<PageWrapper>
			<div className="flex mb-[8rem] md:mb-0 w-full">
				<HeroSection />
			</div>
			<div className="flex my-md-[8rem] w-full" id="features">
				<Features />
			</div>
			<div id="pricing" className="flex my-[8rem]">
				<Pricing />
			</div>
			{/* <div
				id="newsletter"
				className="flex mt-[8rem] w-full justify-center items-center px-4"
			>
				<Newsletter />
			</div>{" "} */}
			<div className="flex justify-center items-center w-full my-[8rem]">
				<AccordionComponent />
			</div>
		</PageWrapper>
	);
}

================
File: app/privacy-policy/page.js
================
import { Button } from "@/components/ui/button";
import PageWrapper from "@/components/wrapper/page-wrapper";
import { ArrowRight } from "lucide-react";
import Link from "next/link";
import React from "react";

export default function Page() {
	return (
		<PageWrapper>
			<div className="min-h-screen flex flex-col items-center py-10 px-4">
				<div className="max-w-4xl rounded-lg p-6 md:p-10">
					<h1 className="text-4xl font-bold text-center mb-6">
						Privacy Policy
					</h1>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							1. Information We Collect
						</h2>
						<p className="mb-4">
							We collect the following types of information to
							provide our services and improve your experience:
						</p>
						<div className="mb-4">
							<h3 className="text-xl font-medium">
								1.1. Information You Provide
							</h3>
							<ul className="list-disc list-inside">
								<li>
									Account Information: name, email, payment
									details.
								</li>
								<li>
									Usage Information: activity data,
									subscriptions, and preferences.
								</li>
							</ul>
						</div>
						<div className="mb-4">
							<h3 className="text-xl font-medium">
								1.2. Automatically Collected Information
							</h3>
							<ul className="list-disc list-inside">
								<li>
									Device Information: IP address, browser
									type, and device identifiers.
								</li>
								<li>
									Usage Data: interaction metrics like page
									views and feature use.
								</li>
							</ul>
						</div>
						<div>
							<h3 className="text-xl font-medium">
								1.3. Third-Party Information
							</h3>
							<p>
								Data from integrated services like Google or
								payment providers.
							</p>
						</div>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							2. How We Use Your Information
						</h2>
						<p>Your information is used to:</p>
						<ul className="list-disc list-inside space-y-2">
							<li>
								Provide, maintain, and improve our services.
							</li>
							<li>Process payments and manage subscriptions.</li>
							<li>
								Send emails, updates, and promotional content
								(if consented).
							</li>
							<li>
								Analyze behavior to enhance user experience.
							</li>
							<li>
								Comply with legal obligations and prevent
								misuse.
							</li>
						</ul>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							3. Sharing Your Information
						</h2>
						<p>
							We share your data only in the following situations:
						</p>
						<ul className="list-disc list-inside space-y-2">
							<li>
								With service providers for payments, analytics,
								and data storage.
							</li>
							<li>
								For legal compliance or to protect the
								platform&apos;s integrity.
							</li>
							<li>
								During business transfers, such as mergers or
								acquisitions.
							</li>
						</ul>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							4. Data Retention
						</h2>
						<p>
							Your data is retained as long as your account is
							active or necessary for legal and operational
							purposes. Upon termination, data is deleted or
							anonymized.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							5. Your Privacy Rights
						</h2>
						<p>You can:</p>
						<ul className="list-disc list-inside space-y-2">
							<li>Request access to your data.</li>
							<li>Update or correct your information.</li>
							<li>Request deletion of your data.</li>
							<li>Opt out of promotional communications.</li>
						</ul>
						<p className="mt-4">
							To exercise these rights,{" "}
							<Link href="/contact-us">
								<Button size="sm">
									contact us{" "}
									<ArrowRight className="h-4 w-4" />
								</Button>
							</Link>
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							6. Security Measures
						</h2>
						<p>
							We use encryption, secure servers, and regular
							audits to protect your data. However, no system can
							guarantee 100% security. Please keep your passwords
							safe.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							7. Contact Us
						</h2>
						<p>
							If you have any questions about this Privacy Policy,{" "}
							<Link href="/contact-us">
								<Button size="sm">
									contact us{" "}
									<ArrowRight className="h-4 w-4" />
								</Button>
							</Link>
						</p>
					</section>
				</div>
			</div>
		</PageWrapper>
	);
}

================
File: app/providers.js
================
// app/providers.js
"use client";
import posthog from "posthog-js";
import { PostHogProvider } from "posthog-js/react";
import { ThemeProvider as NextThemesProvider } from "next-themes";

if (typeof window !== "undefined") {
	posthog.init(process.env.NEXT_PUBLIC_POSTHOG_KEY, {
		api_host: process.env.NEXT_PUBLIC_POSTHOG_HOST,
		person_profiles: "identified_only", // or 'always' to create profiles for anonymous users as well
	});
}
export function CSPostHogProvider({ children }) {
	return <PostHogProvider client={posthog}>{children}</PostHogProvider>;
}

export function ThemeProvider({ children, ...props }) {
	return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}

================
File: app/robots.js
================
export default function robots() {
	return {
		rules: {
			userAgent: "*",
			allow: "/",
			disallow: "/bulder/, /studio/, /dashboard/",
		},
		sitemap: `${process.env.NEXT_PUBLIC_APP_URL}/sitemap.xml`,
	};
}

================
File: app/sign-in/[[...sign-in]]/page.js
================
import FormWrapper from "@/components/wrapper/form-wrapper";
import { SignIn } from "@clerk/nextjs";
import React from "react";

function Page() {
	return (
		<FormWrapper>
			<SignIn signUpUrl="/sign-up" />
		</FormWrapper>
	);
}

export default Page;

================
File: app/sign-up/[[...sign-up]]/page.js
================
import FormWrapper from "@/components/wrapper/form-wrapper";
import { SignUp } from "@clerk/nextjs";
import React from "react";

function Page() {
	return (
		<FormWrapper>
			<SignUp signInUrl="/sign-in" />
		</FormWrapper>
	);
}

export default Page;

================
File: app/sitemap.js
================
import { getBlogPosts } from "@/services/blog";
import { getAllPortfolios } from "@/services/portfolio";
import { client } from "@/sanity/lib/client";
import { postSlugsQuery } from "@/sanity/lib/queries";

export default async function sitemap() {
	const baseUrl = process.env.NEXT_PUBLIC_APP_URL;

	// Fetch data with null checks
	const portfolios = await getAllPortfolios();
	const blogPosts = (await client.fetch(postSlugsQuery)) || [];

	const portfolioSitemapEntries = portfolios?.data?.map((portfolio) => ({
		url: portfolio.customDomain
			? portfolio.customDomain
			: `https://${portfolio.slug}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
		lastModified: new Date().toISOString(),
		changeFrequency: "daily",
		priority: 0.9,
	}));

	// Fetch and process blog entries for each portfolio
	const blogsSitemapEntries = await Promise.all(
		portfolios.data?.map(async (portfolio) => {
			const blogs = await getBlogPosts(portfolio.id);
			return blogs.data?.map((blog) => ({
				url: portfolio.customDomain
					? `${portfolio.customDomain}/blog/post/${blog.slug}`
					: `https://${portfolio.slug}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}/blog/post/${blog.slug}`,
				lastModified: new Date(
					blog.updatedAt || new Date()
				).toISOString(),
				changeFrequency: "daily",
				priority: 0.9,
			}));
		})
	);

	// Flatten the array of arrays
	const flattenedBlogEntries = blogsSitemapEntries.flat();

	const staticPages = [
		{
			url: baseUrl,
			lastModified: new Date().toISOString(),
			changeFrequency: "monthly",
			priority: 1,
		},
		{
			url: `${baseUrl}/contact-us`,
			lastModified: new Date().toISOString(),
			changeFrequency: "monthly",
			priority: 0.8,
		},
		{
			url: `${baseUrl}/terms`,
			lastModified: new Date().toISOString(),
			changeFrequency: "monthly",
			priority: 0.8,
		},
		{
			url: `${baseUrl}/privacy-policy`,
			lastModified: new Date().toISOString(),
			changeFrequency: "monthly",
			priority: 0.8,
		},
	];

	const blogSitemapEntries = blogPosts.map((post) => ({
		url: `${baseUrl}/blog/post/${post.slug}`,
		lastModified: new Date(post?.date || new Date()).toISOString(),
		changeFrequency: "weekly",
		priority: 0.7,
	}));

	return [
		...staticPages,
		...portfolioSitemapEntries,
		...flattenedBlogEntries,
		...blogSitemapEntries,
	];
}

================
File: app/studio/[[...tool]]/page.jsx
================
/**
 * This route is responsible for the built-in authoring environment using Sanity Studio.
 * All routes under your studio path is handled by this file using Next.js' catch-all routes:
 * https://nextjs.org/docs/routing/dynamic-routes#catch-all-routes
 *
 * You can learn more about the next-sanity package here:
 * https://github.com/sanity-io/next-sanity
 */

import { NextStudio } from "next-sanity/studio";
import config from "../../../sanity.config";

export const dynamic = "force-static";

export { metadata, viewport } from "next-sanity/studio";

export default function StudioPage() {
	return <NextStudio config={config} />;
}

================
File: app/success/page.js
================
"use client";

import { Button } from "@/components/ui/button";
import { useRouter, useSearchParams } from "next/navigation";
import { Suspense, useEffect, useState } from "react";
import { logger } from "@/lib/utils";
import { Spinner } from "@/components/ui/Spinner";
import { toast } from "sonner";

function PaymentStatusContent() {
	const router = useRouter();
	const searchParams = useSearchParams();
	const [isProcessing, setIsProcessing] = useState(true);

	// Get all required parameters
	const status = searchParams.get("status");
	const tx_ref = searchParams.get("tx_ref");
	const transaction_id = searchParams.get("transaction_id");

	useEffect(() => {
		const verifyPayment = async () => {
			logger.info("Starting payment verification", {
				tx_ref,
				status,
				transaction_id,
			});

			if ((!tx_ref && !transaction_id) || !status) {
				logger.error("Missing verification parameters", {
					tx_ref,
					transaction_id,
					status,
				});
				toast.error("Invalid payment verification data");
				setIsProcessing(false);
				return;
			}

			try {
				logger.info("Sending verification request");
				const response = await fetch("/api/payment/verify", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({
						tx_ref,
						status,
						transaction_id,
					}),
				});

				const data = await response.json();
				logger.info("Verification response received", {
					success: response.ok,
					data,
				});

				if (!response.ok) {
					logger.error("Verification request failed", {
						status: response.status,
						data,
					});
					throw new Error(
						data.message || "Payment verification failed"
					);
				}

				if (status === "successful") {
					logger.info("Payment verified successfully");
					toast.success("Payment verified successfully!");
				} else {
					logger.warn("Payment was not successful", { status });
					toast.error("Payment was not successful");
				}

				logger.info("Payment verification completed:", data);
			} catch (error) {
				logger.error("Payment verification error:", {
					message: error.message,
					stack: error.stack,
				});
				toast.error(error.message || "Error verifying payment");
				logger.error("Payment verification error:", error);
			} finally {
				setIsProcessing(false);
			}
		};

		verifyPayment();
	}, [status, tx_ref, transaction_id]);

	if (isProcessing) {
		return (
			<div className="flex flex-col items-center justify-center min-h-[60vh] space-y-4">
				<Spinner className="w-8 h-8" />
				<p className="text-lg">Verifying your payment...</p>
			</div>
		);
	}

	return (
		<div className="flex flex-col items-center justify-center min-h-[60vh] space-y-6">
			<div className="text-center space-y-4">
				<h1 className="text-3xl font-semibold">
					{status === "successful"
						? "Payment Successful!"
						: "Payment Failed"}
				</h1>
				<p className="text-gray-600 dark:text-gray-400">
					{status === "successful"
						? "Your subscription has been activated"
						: "There was an issue with your payment"}
				</p>
			</div>

			<div className="flex gap-4">
				<Button
					onClick={() => router.push("/dashboard")}
					variant={status === "successful" ? "default" : "outline"}
				>
					Go to Dashboard
				</Button>
				{status !== "successful" && (
					<Button
						onClick={() => router.push("/pricing")}
						variant="default"
					>
						Try Again
					</Button>
				)}
			</div>
		</div>
	);
}

export default function Page() {
	return (
		<Suspense fallback={<div>Loading...</div>}>
			<PaymentStatusContent />
		</Suspense>
	);
}

================
File: app/terms/page.js
================
import React from "react";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { ArrowRight } from "lucide-react";
import PageWrapper from "@/components/wrapper/page-wrapper";
import { siteConfig } from "@/config/site";

function Page() {
	return (
		<PageWrapper>
			<div className="min-h-screen flex flex-col items-center py-10 px-4">
				<div className="max-w-4xl shadow-md rounded-lg p-6 md:p-10">
					<h1 className="text-4xl font-bold text-center mb-6">
						Terms of Use
					</h1>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							1. Acceptance of Terms
						</h2>
						<p>
							By accessing or using <b>{siteConfig.name}</b>, you
							agree to be bound by these Terms of Use. If you do
							not agree to these terms, you may not use the
							Service.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							2. Eligibility
						</h2>
						<p>
							You must be at least 18 years old to use the
							Service. By using the Service, you represent and
							warrant that you meet this eligibility requirement.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							3. User Accounts
						</h2>
						<p>
							To access certain features, you may be required to
							create an account. You agree to provide accurate,
							complete, and updated information for your account
							and are responsible for maintaining the
							confidentiality of your login credentials.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							4. Prohibited Activities
						</h2>
						<p className="mb-4">
							You agree not to engage in any of the following
							prohibited activities:
						</p>
						<ul className="list-disc list-inside space-y-2">
							<li>Using the Service for illegal purposes.</li>
							<li>
								Attempting to access unauthorized areas of the
								Service.
							</li>
							<li>Uploading malicious code or viruses.</li>
							<li>
								Exploiting the Service for personal or
								commercial gain without authorization.
							</li>
						</ul>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							5. Payment Terms
						</h2>
						<p>
							If you purchase a subscription or any other
							services, you agree to pay all applicable fees in
							accordance with the terms outlined at the time of
							purchase. Payments are non-refundable unless
							required by law.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							6. Intellectual Property
						</h2>
						<p>
							All content, trademarks, and other intellectual
							property on the Service are owned by{" "}
							<b>{siteConfig.name}</b> or its licensors. You may
							not reproduce, distribute, or otherwise exploit
							these materials without prior written permission.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							7. Limitation of Liability
						</h2>
						<p>
							To the maximum extent permitted by law,{" "}
							<b>{siteConfig.name}</b> is not liable for any
							indirect, incidental, or consequential damages
							arising from your use of the Service.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							8. Termination
						</h2>
						<p>
							We may terminate or suspend your access to the
							Service at any time if you violate these Terms of
							Use or for any other reason at our discretion.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							9. Governing Law
						</h2>
						<p>
							These Terms of Use shall be governed by and
							construed in accordance with the laws of the
							jurisdiction where <b>{siteConfig.name}</b> is
							registered.
						</p>
					</section>

					<section className="mb-8">
						<h2 className="text-2xl font-semibold mb-4">
							10. Contact Us
						</h2>
						<p>
							For questions or concerns about these Terms of Use,
							please{" "}
							<Link href="/contact-us">
								<Button size="sm">
									contact us{" "}
									<ArrowRight className="h-4 w-4" />
								</Button>
							</Link>
						</p>
					</section>
				</div>
			</div>
		</PageWrapper>
	);
}

export default Page;

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: components/aceternity/sidebar.jsx
================
"use client";
import { cn } from "@/lib/utils";
import Link from "next/link";
import React, { useState, createContext, useContext } from "react";
import { AnimatePresence, motion } from "framer-motion";
import { IconMenu2, IconX } from "@tabler/icons-react";

const SidebarContext = createContext(undefined);

export const useSidebar = () => {
	const context = useContext(SidebarContext);
	if (!context) {
		throw new Error("useSidebar must be used within a SidebarProvider");
	}
	return context;
};

export const SidebarProvider = ({
	children,
	open: openProp,
	setOpen: setOpenProp,
	animate = true,
}) => {
	const [openState, setOpenState] = useState(false);

	const open = openProp !== undefined ? openProp : openState;
	const setOpen = setOpenProp !== undefined ? setOpenProp : setOpenState;

	return (
		<SidebarContext.Provider value={{ open, setOpen, animate: animate }}>
			{children}
		</SidebarContext.Provider>
	);
};

export const Sidebar = ({ children, open, setOpen, animate }) => {
	return (
		<SidebarProvider open={open} setOpen={setOpen} animate={animate}>
			{children}
		</SidebarProvider>
	);
};

export const SidebarBody = (props) => {
	return (
		<>
			<DesktopSidebar {...props} />
			<MobileSidebar {...props} />
		</>
	);
};

export const DesktopSidebar = ({ className, children, ...props }) => {
	const { open, setOpen, animate } = useSidebar();
	return (
		<>
			<motion.div
				className={cn(
					"h-full px-4 py-4 hidden  md:flex md:flex-col bg-neutral-100 dark:bg-neutral-800 w-[300px] flex-shrink-0",
					className
				)}
				animate={{
					width: animate ? (open ? "200px" : "60px") : "200px",
				}}
				onMouseEnter={() => setOpen(true)}
				onMouseLeave={() => setOpen(false)}
				{...props}
			>
				{children}
			</motion.div>
		</>
	);
};

export const MobileSidebar = ({ className, children, ...props }) => {
	const { open, setOpen } = useSidebar();
	return (
		<>
			<div
				className={cn(
					"h-10 px-4 py-4 flex flex-row md:hidden  items-center justify-between bg-neutral-100 dark:bg-neutral-800 w-full"
				)}
				{...props}
			>
				<div className="flex justify-end z-20 w-full">
					<IconMenu2
						className="text-neutral-800 dark:text-neutral-200"
						onClick={() => setOpen(!open)}
					/>
				</div>
				<AnimatePresence>
					{open && (
						<motion.div
							initial={{ x: "-100%", opacity: 0 }}
							animate={{ x: 0, opacity: 1 }}
							exit={{ x: "-100%", opacity: 0 }}
							transition={{
								duration: 0.3,
								ease: "easeInOut",
							}}
							className={cn(
								"fixed h-full w-full inset-0 bg-white dark:bg-neutral-900 p-10 z-[100] flex flex-col justify-between",
								className
							)}
						>
							<div
								className="absolute right-10 top-10 z-50 text-neutral-800 dark:text-neutral-200"
								onClick={() => setOpen(!open)}
							>
								<IconX />
							</div>
							{children}
						</motion.div>
					)}
				</AnimatePresence>
			</div>
		</>
	);
};

export const SidebarLink = ({ link, className, ...props }) => {
	const { open, animate } = useSidebar();
	return (
		<Link
			href={link.href}
			className={cn(
				"flex items-center justify-start gap-2  group/sidebar py-2",
				className
			)}
			{...props}
		>
			{link.icon}
			<motion.span
				animate={{
					display: animate
						? open
							? "inline-block"
							: "none"
						: "inline-block",
					opacity: animate ? (open ? 1 : 0) : 1,
				}}
				className="text-neutral-700 dark:text-neutral-200 text-sm group-hover/sidebar:translate-x-1 transition duration-150 whitespace-pre inline-block !p-0 !m-0"
			>
				{link.label}
			</motion.span>
		</Link>
	);
};

================
File: components/blog-settings.jsx
================
"use client";

import { useDispatch, useSelector } from "react-redux";
import { Switch } from "./ui/switch";
import { Label } from "./ui/label";
import { updatePortfolioInDatabase } from "@/redux/thunks/portfolio";
import { useParams } from "next/navigation";

export function BlogSettings() {
	const { portfolioId } = useParams();
	const dispatch = useDispatch();

	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);

	const toggleBlogFeature = async () => {
		if (!portfolio) return;

		dispatch(
			updatePortfolioInDatabase({
				id: portfolio.id,
				data: { blogEnabled: !portfolio.blogEnabled },
			})
		);
	};

	return (
		<section id="blog-settings" className="flex flex-col gap-y-4">
			<header>
				<h2 className="text-xl font-semibold">Blog settings</h2>
				<p className="text-sm text-muted-foreground">
					Configure a blog for your portfolio
				</p>
			</header>

			<div className="flex items-center justify-between">
				<div className="space-y-1">
					<Label>Enable Blog</Label>
					<p className="text-sm text-muted-foreground">
						Show blog section on your portfolio
					</p>
				</div>
				<Switch
					checked={portfolio?.blogEnabled || false}
					onCheckedChange={toggleBlogFeature}
				/>
			</div>
		</section>
	);
}

================
File: components/blog/blog-list-skeleton.jsx
================
import { Skeleton } from "@/components/ui/skeleton";

const BlogListSkeleton = () => {
	return (
		<div className="max-w-4xl mx-auto py-12 px-4">
			<Skeleton className="h-12 w-48 mb-8" /> {/* Title */}
			<div className="space-y-8">
				{[1, 2, 3].map((i) => (
					<article key={i} className="border-b pb-8">
						<Skeleton className="h-8 w-3/4 mb-2" />{" "}
						{/* Post title */}
						<Skeleton className="h-4 w-32 mb-4" /> {/* Date */}
						<Skeleton className="h-4 w-full mb-2" />{" "}
						{/* Excerpt line 1 */}
						<Skeleton className="h-4 w-5/6" />{" "}
						{/* Excerpt line 2 */}
					</article>
				))}
			</div>
		</div>
	);
};

export default BlogListSkeleton;

================
File: components/blog/blog-post-skeleton.jsx
================
import { Skeleton } from "@/components/ui/skeleton";

export const BlogPostSkeleton = () => {
	return (
		<article className="max-w-4xl mx-auto px-6 py-12">
			<div className="text-center mb-12">
				<div className="inline-block mb-6">
					<Skeleton className="w-12 h-12 rounded-full" />
				</div>
				<Skeleton className="h-12 w-3/4 mx-auto mb-8" />
			</div>

			<div className="mb-12">
				<div className="flex items-center gap-3 justify-center">
					<Skeleton className="h-5 w-32" />
					<div className="flex items-center gap-2">
						<Skeleton className="w-6 h-6 rounded-full" />
						<Skeleton className="h-5 w-24" />
					</div>
				</div>
			</div>

			<div className="space-y-6">
				{/* Paragraphs */}
				<Skeleton className="h-5 w-full" />
				<Skeleton className="h-5 w-11/12" />
				<Skeleton className="h-5 w-full" />
				<Skeleton className="h-5 w-4/5" />
				<Skeleton className="h-5 w-full" />
				<Skeleton className="h-5 w-9/12" />
			</div>
		</article>
	);
};

================
File: components/blog/blog-post.jsx
================
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { getInitials } from "@/lib/utils";

export const BlogPost = ({
	title,
	author,
	featuredImage,
	excerpt,
	date,
	content,
}) => {
	return (
		<article className="max-w-4xl mx-auto px-6 py-12">
			<div className="text-center mb-12">
				<h1 className="text-4xl font-bold mb-6">{title}</h1>
				{featuredImage && (
					<div className="mt-6 aspect-video w-full">
						<img
							src={featuredImage}
							alt={title}
							className="w-full h-full object-cover rounded-lg"
						/>
					</div>
				)}
			</div>

			<div className="mb-4">
				<div className="flex flex-col gap-3">
					<span className="text-gray-600 dark:text-gray-400">
						{date}
					</span>
					<div className="flex items-center gap-2">
						<Avatar className="h-8 w-8">
							<AvatarImage src={author.image} alt={author.name} />
							<AvatarFallback>
								{getInitials(author.name)}
							</AvatarFallback>
						</Avatar>
						<span className="font-semibold">{author.name}</span>
					</div>
				</div>
			</div>

			<div className="prose prose-lg max-w-3xl dark:prose-invert mb-8 mx-auto">
				<p className="text-gray-600 dark:text-gray-400">{excerpt}</p>
			</div>

			<div
				className="prose prose-lg max-w-none dark:prose-invert"
				dangerouslySetInnerHTML={{ __html: content }}
			/>
		</article>
	);
};

================
File: components/build-with-button.jsx
================
import Link from "next/link";
import { siteConfig } from "@/config/site";
import { RainbowButton } from "@/components/ui/rainbow-button";

export const BuildWithButton = () => {
	return (
		<Link
			href={siteConfig.url}
			target="_blank"
			className="fixed bottom-4 right-4 z-50 flex items-center gap-2"
		>
			<RainbowButton className="rounded-full bg-primary px-2 py-1 text-[10px] sm:px-3 sm:text-xs font-medium text-primary-foreground hover:bg-primary/90 transition-colors">
				Built with {siteConfig.name}
			</RainbowButton>
		</Link>
	);
};

================
File: components/copyright.jsx
================
import { cn } from "@/lib/utils";

export const Copyright = ({ className }) => (
	<div
		className={cn(
			"prose prose-sm prose-zinc flex max-w-none flex-col gap-y-1 text-xs opacity-40 dark:prose-invert",
			className
		)}
	>
		<span>
			Licensed under{" "}
			<a
				target="_blank"
				rel="noopener noreferrer nofollow"
				href="https://github.com/AmruthPillai/Reactive-Resume/blob/main/LICENSE.md"
			>
				MIT
			</a>
		</span>
		<span>By the community, for the community.</span>
		<span>
			A passion project by{" "}
			<a href="https://www.amruthpillai.com/">Amruth Pillai</a>
		</span>

		<span className="mt-4">Reactive Resume v{1}</span>
	</div>
);

================
File: components/custom-link.jsx
================
import { useState, useCallback } from "react";
import { Plus, X } from "@phosphor-icons/react";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { cn } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { defaultLink } from "@/schema/shared/links";
import { URLInput } from "./url-input";
import { createId } from "@paralleldrive/cuid2";

const LinkInput = ({ field, onChange, onRemove }) => {
	const handleChange = useCallback(
		(key, value) => {
			onChange({ ...field, [key]: value });
		},
		[field, onChange]
	);

	return (
		<motion.div
			className="flex space-x-1 items-start"
			initial={{ opacity: 0, scale: 0.95 }}
			animate={{ opacity: 1, scale: 1 }}
			exit={{ opacity: 0, scale: 0.95 }}
			layout
		>
			<div>
				<div className="flex items-center space-x-1">
					{field.icon && (
						<img
							src={`https://cdn.simpleicons.org/${field.icon}`}
							alt="Icon"
							className="w-8 h-8"
						/>
					)}
					<Input
						value={field.icon || ""} // Handle null value
						placeholder="Icon name (e.g., github)"
						onChange={(e) =>
							handleChange("icon", e.target.value || null)
						} // Set to null if empty
					/>
				</div>
				<p className="text-sm text-muted-foreground">
					Powered by{" "}
					<a
						href="https://simpleicons.org/"
						target="_blank"
						rel="noopener noreferrer nofollow"
						className="font-medium"
					>
						Simple Icons
					</a>
				</p>
			</div>

			<URLInput
				id={`url-input-${field.id}`}
				field={field}
				onChange={handleChange}
				placeholder="Enter URL"
				aria-label="Link URL"
			/>

			<Button
				size="icon"
				variant="link"
				className="!ml-0 shrink-0"
				onClick={() => onRemove(field.id)}
			>
				<X />
			</Button>
		</motion.div>
	);
};

export const CustomLink = ({
	setValue,
	links: initialLinks = [],
	className,
}) => {
	const [links, setLinks] = useState(initialLinks);

	const onAddCustomField = useCallback(() => {
		const newLink = { ...defaultLink, id: createId() };
		const updatedLinks = [...links, newLink];
		setLinks(updatedLinks);
		setValue("links", updatedLinks);
	}, [links, setValue]);

	const onChangeCustomField = useCallback(
		(field) => {
			const updatedLinks = links.map((item) =>
				item.id === field.id ? field : item
			);
			setLinks(updatedLinks);
			setValue("links", updatedLinks);
		},
		[links, setValue]
	);

	const onRemoveCustomField = useCallback(
		(id) => {
			const updatedLinks = links.filter((field) => field.id !== id);
			setLinks(updatedLinks);
			setValue("links", updatedLinks);
		},
		[links, setValue]
	);

	return (
		<div className={cn("space-y-4", className)}>
			<AnimatePresence>
				{links.map((field) => (
					<LinkInput
						key={field.id}
						field={field}
						onChange={onChangeCustomField}
						onRemove={onRemoveCustomField}
					/>
				))}
			</AnimatePresence>

			<Button variant="link" onClick={onAddCustomField}>
				<Plus className="mr-2" />
				<span>{`Add link`}</span>
			</Button>
		</div>
	);
};

================
File: components/dashboard-sidebar.jsx
================
import { usePathname } from "next/navigation";
import Link from "next/link";
import {
	Sidebar,
	SidebarContent,
	SidebarFooter,
	SidebarGroup,
	SidebarHeader,
	SidebarGroupLabel,
	SidebarGroupContent,
	SidebarMenu,
	SidebarMenuItem,
	SidebarMenuButton,
} from "@/components/ui/sidebar";
import { OrganizationSwitcher, UserButton } from "@clerk/nextjs";
import {
	IconArrowLeft,
	IconBrandTabler,
	IconSettings,
	IconBook,
} from "@tabler/icons-react";
import { cn } from "@/lib/utils";
import { Logo } from "@/app/dashboard/layout";

const links = [
	{
		label: "Portfolios",
		href: "/dashboard/portfolios",
		icon: (
			<IconBrandTabler className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
		),
	},
	{
		label: "Blogs",
		href: "/dashboard/blogs",
		icon: (
			<IconBook className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
		),
	},
	{
		label: "Settings",
		href: "/dashboard/settings",
		icon: (
			<IconSettings className="text-neutral-700 dark:text-neutral-200 h-5 w-5 flex-shrink-0" />
		),
	},
];

export function DashboardSidebar() {
	const pathname = usePathname();

	return (
		<Sidebar>
			<SidebarHeader>
				<div className="flex flex-col flex-1 overflow-y-auto overflow-x-hidden">
					<div className="p-4 border-b border-neutral-200 dark:border-neutral-800">
						<OrganizationSwitcher
							afterCreateOrganizationUrl="/dashboard/portfolios"
							afterLeaveOrganizationUrl="/dashboard/portfolios"
							afterSelectOrganizationUrl="/dashboard/portfolios"
							// createOrganizationMode={
							// 	isIndividualAccount ? "none" : "modal"
							// }
							// hidePersonal={false}
							appearance={{
								elements: {
									rootBox: "w-full",
									organizationSwitcherTrigger: cn(
										"w-full flex justify-between items-center",
										"p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800 rounded-md"
									),
								},
							}}
						/>
					</div>
				</div>
			</SidebarHeader>
			<SidebarContent>
				<SidebarGroup>
					<SidebarGroupLabel>Application</SidebarGroupLabel>
					<SidebarGroupContent>
						<SidebarMenu>
							{links.map((item) => (
								<SidebarMenuItem key={item.label}>
									<SidebarMenuButton
										asChild
										className={cn(
											pathname === item.href &&
												"bg-neutral-100 dark:bg-neutral-800 text-primary"
										)}
									>
										<Link href={item.href}>
											{item.icon}
											<span>{item.label}</span>
										</Link>
									</SidebarMenuButton>
								</SidebarMenuItem>
							))}
						</SidebarMenu>
					</SidebarGroupContent>
				</SidebarGroup>
			</SidebarContent>
			<SidebarFooter>
				<div className="p-4 border-t border-neutral-200 dark:border-neutral-800">
					<UserButton
						appearance={{
							elements: {
								rootBox: "w-full",
								userButtonTrigger: cn(
									"w-full flex justify-between items-center",
									"p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800 rounded-md"
								),
							},
						}}
					/>
				</div>
			</SidebarFooter>
		</Sidebar>
	);
}

================
File: components/dialogs/certification-dialog.jsx
================
"use client";

import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RichInput } from "@/components/ui/rich-input";
import {
	addCertificationInDatabase,
	updateCertificationnInDatabase,
} from "@/redux/thunks/certifications";
import { logger } from "@/lib/utils";

export const CertificationDialog = ({
	portfolioId,
	form,
	currentCertification,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control } = form;

	const onSubmit = (data) => {
		logger.info("Certification submitted data", data);
		if (currentCertification) {
			dispatch(
				updateCertificationnInDatabase({
					...data,
					id: currentCertification.id,
					portfolioId,
				})
			);
		} else {
			dispatch(addCertificationInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentCertification
							? "Edit Certification"
							: "Add New Certification"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<div className="grid md:grid-cols-2 space-y-4 md:space-y-0 gap-2">
							<Controller
								name="name"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Certification Name</label>
										<Input
											{...field}
											placeholder="Enter certification name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="issuer"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Issuer</label>
										<Input
											{...field}
											placeholder="Enter issuer name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="date"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Date</label>
										<Input
											{...field}
											placeholder="e.g., March 2023"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="url"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>URL</label>
										<Input
											{...field}
											placeholder="Enter URL (if applicable)"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
						</div>

						<Controller
							name="summary"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Summary</label>
									<RichInput
										{...field}
										content={field.value}
										onChange={(value) =>
											field.onChange(value)
										}
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentCertification
									? "Update Certification"
									: "Add Certification"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/education-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RichInput } from "@/components/ui/rich-input";
import {
	addEducationInDatabase,
	updateEducationInDatabase,
} from "@/redux/thunks/educations";
import { PictureSection } from "../sections/picture/section";

export const EducationDialog = ({
	portfolioId,
	form,
	currentEducation,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control, setValue } = form;

	const onSubmit = (data) => {
		if (currentEducation) {
			dispatch(
				updateEducationInDatabase({
					id: currentEducation.id,
					...data,
					portfolioId,
				})
			);
		} else {
			dispatch(addEducationInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentEducation
							? "Edit Education"
							: "Add New Education"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<PictureSection control={control} setValue={setValue} />

						<div className="grid md:grid-cols-2 gap-2 space-y-4 md:space-y-0">
							<Controller
								name="institution"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Institution</label>
										<Input
											{...field}
											placeholder="Enter institution name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="studyType"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Type of Study</label>
										<Input
											{...field}
											placeholder="e.g., Bachelor's Degree"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="area"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Area of Study</label>
										<Input
											{...field}
											placeholder="e.g., Computer Science"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="date"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Date or Date Range</label>
										<Input
											{...field}
											placeholder="e.g., March 2023 - Present"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
						</div>

						<Controller
							name="url"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Website</label>
									<Input
										{...field}
										placeholder="Enter institution website"
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<Controller
							name="summary"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Summary</label>
									<RichInput
										{...field}
										content={field.value}
										onChange={(value) =>
											field.onChange(value)
										}
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentEducation
									? "Update Education"
									: "Add Education"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/experience-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RichInput } from "@/components/ui/rich-input";
import {
	addExperienceInDatabase,
	updateExperienceInDatabase,
} from "@/redux/thunks/experience";
import { PictureSection } from "../sections/picture/section";

export const ExperienceDialog = ({
	portfolioId,
	form,
	currentExperience,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control, setValue } = form;

	const onSubmit = (data) => {
		if (currentExperience) {
			dispatch(
				updateExperienceInDatabase({
					id: currentExperience.id,
					...data,
					portfolioId,
				})
			);
		} else {
			dispatch(addExperienceInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentExperience
							? "Edit Experience"
							: "Add New Experience"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					{" "}
					{/* Add a scroll area with a max height */}
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<PictureSection control={control} setValue={setValue} />

						<div className="grid md:grid-cols-2 gap-2 space-y-4 md:space-y-0">
							<Controller
								name="company"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Company</label>
										<Input
											{...field}
											placeholder="Enter company name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="position"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Position</label>
										<Input
											{...field}
											placeholder="Enter your position"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="date"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Date or Date Range</label>
										<Input
											{...field}
											placeholder="e.g., March 2023 - Present"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="location"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Location</label>
										<Input
											{...field}
											placeholder="Enter location"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
						</div>

						<Controller
							name="url"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Website</label>
									<Input
										{...field}
										placeholder="Enter company website"
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<Controller
							name="summary"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Summary</label>
									<RichInput
										{...field}
										content={field.value}
										onChange={(value) =>
											field.onChange(value)
										}
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentExperience
									? "Update Experience"
									: "Add Experience"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/hackathon-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RichInput } from "@/components/ui/rich-input";
import {
	addHackathonInDatabase,
	updateHackathonInDatabase,
} from "@/redux/thunks/hackathon";
import { PictureSection } from "../sections/picture/section";
import { CustomLink } from "@/components/custom-link";
import { logger } from "@/lib/utils";

export const HackathonDialog = ({
	form,
	currentHackathon,
	portfolioId,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control, setValue } = form;

	const onSubmit = (data) => {
		logger.info("Hackathon data submitted:", data);
		if (currentHackathon) {
			dispatch(
				updateHackathonInDatabase({
					...data,
					id: currentHackathon.id,
					portfolioId,
				})
			);
		} else {
			dispatch(addHackathonInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentHackathon
							? "Edit Hackathon"
							: "Add New Hackathon"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<PictureSection
							control={control}
							setValue={setValue}
							name={"logo"}
						/>
						<div className="grid md:grid-cols-2 space-y-4 md:space-y-0 gap-2">
							<Controller
								name="name"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Hackathon Name</label>
										<Input
											{...field}
											placeholder="Enter hackathon name"
											error={fieldState.error?.message}
										/>
									</div>
								)}
							/>

							<Controller
								name="location"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Location</label>
										<Input
											{...field}
											placeholder="Enter location"
											error={fieldState.error?.message}
										/>
									</div>
								)}
							/>

							<Controller
								name="date"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Date</label>
										<Input
											{...field}
											placeholder="e.g., 2024-03-15"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
						</div>

						<Controller
							name="description"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Description</label>
									<RichInput
										{...field}
										content={field.value}
										onChange={(value) =>
											field.onChange(value)
										}
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div>
							<label>Links</label>
							<CustomLink
								setValue={setValue}
								links={currentHackathon?.links || []}
							/>
						</div>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentHackathon
									? "Update Hackathon"
									: "Add Hackathon"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/portfolio-dialog.jsx
================
"use client";

import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import {
	addPortfolioInDatabase,
	updatePortfolioInDatabase,
} from "@/redux/thunks/portfolio";
import { defaultPortfolio } from "@/schema/sections";
import { useEffect, useState } from "react";
import { useOrganizationContext } from "@/context/OrganizationContext";
import { logger } from "@/lib/utils";

export const PortfolioDialog = ({
	form,
	currentPortfolio,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control } = form;
	const { organization, canManagePortfolios } = useOrganizationContext();

	// Initialize form with default values when dialog opens
	useEffect(() => {
		if (isOpen) {
			reset({
				name: currentPortfolio?.name || "",
				slug: currentPortfolio?.slug || "",
			});
		}
	}, [isOpen, currentPortfolio, reset]);

	const onSubmit = async (data) => {
		try {
			if (currentPortfolio) {
				dispatch(
					updatePortfolioInDatabase({
						id: currentPortfolio.id,
						data: {
							...data,
							organizationId: organization?.id || null,
						},
					})
				);
			} else {
				dispatch(
					addPortfolioInDatabase({
						...defaultPortfolio,
						...data,
						organizationId: organization?.id || null,
					})
				);
			}

			setIsOpen(false);
			reset();
		} catch (error) {
			logger.error("Error updating portfolio:", error);
			toast.error(error.message);
		}
	};

	// Disable form if user can't manage portfolios
	if (organization && !canManagePortfolios) {
		return <div>You don&apos;t have permission to manage portfolios</div>;
	}

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentPortfolio
							? "Edit Portfolio"
							: "Add New Portfolio"}
					</DialogTitle>
				</DialogHeader>

				<form
					onSubmit={handleSubmit(onSubmit)}
					className="space-y-4 pr-3"
				>
					<Controller
						name="name"
						control={control}
						render={({ field, fieldState }) => (
							<div>
								<label>Portfolio Name</label>
								<Input
									{...field}
									placeholder="Enter portfolio name"
								/>
								{fieldState.error && (
									<small className="text-red-500 opacity-75">
										{fieldState.error?.message}
									</small>
								)}
							</div>
						)}
					/>

					<Controller
						name="slug"
						control={control}
						render={({ field, fieldState }) => (
							<div>
								<label>Slug</label>
								<Input {...field} placeholder="Enter slug" />
								{fieldState.error && (
									<small className="text-red-500 opacity-75">
										{fieldState.error?.message}
									</small>
								)}
							</div>
						)}
					/>

					<div className="flex justify-end space-x-2">
						<Button
							type="button"
							variant="outline"
							onClick={() => setIsOpen(false)}
						>
							Cancel
						</Button>
						<Button type="submit">
							{currentPortfolio
								? "Update Portfolio"
								: "Add Portfolio"}
						</Button>
					</div>
				</form>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/profile-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import {
	addProfileInDatabase,
	updateProfileInDatabase,
} from "@/redux/thunks/profile";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import {
	Select,
	SelectContent,
	SelectItem,
	SelectTrigger,
	SelectValue,
} from "@/components/ui/select";
import { socialNetworks } from "@/utils/constants";

export const ProfilesDialog = ({
	portfolioId,
	form,
	currentProfile,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control } = form;

	const onSubmit = (data) => {
		if (currentProfile) {
			dispatch(
				updateProfileInDatabase({
					id: currentProfile.id,
					...data,
					portfolioId,
				})
			);
		} else {
			dispatch(addProfileInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<>
			<Dialog open={isOpen} onOpenChange={setIsOpen}>
				<DialogContent>
					<DialogHeader>
						<DialogTitle>
							{currentProfile
								? "Edit Profile"
								: "Add New Profile"}
						</DialogTitle>
					</DialogHeader>

					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4"
					>
						<div className="grid md:grid-cols-2 space-y-4 md:space-y-0 gap-2">
							<Controller
								name="network"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Network</label>
										<Select
											onValueChange={field.onChange}
											defaultValue={field.value}
										>
											<SelectTrigger>
												<SelectValue placeholder="Select social network" />
											</SelectTrigger>
											<SelectContent>
												{socialNetworks.map(
													(network, idx) => (
														<SelectItem
															key={idx}
															value={
																network.value
															}
														>
															{network.label}
														</SelectItem>
													)
												)}
											</SelectContent>
										</Select>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="username"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Username</label>
										<Input
											{...field}
											placeholder="john.doe"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
						</div>

						<Controller
							name="url"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Website</label>
									<Input
										{...field}
										placeholder="https://linkedin.com/in/johndoe"
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentProfile
									? "Update Profile"
									: "Add Profile"}
							</Button>
						</div>
					</form>
				</DialogContent>
			</Dialog>
		</>
	);
};

================
File: components/dialogs/project-dialog.jsx
================
import { useDispatch, useSelector } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { X } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { BadgeInput } from "@/components/ui/badge-input"; // Assumes BadgeInput exists for handling keywords
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { RichInput } from "@/components/ui/rich-input";
import {
	addProjectInDatabase,
	updateProjectInDatabase,
} from "@/redux/thunks/project";
import Uploader from "../sections/picture/uploader";
import { logger } from "@/lib/utils";

export const ProjectDialog = ({
	portfolioId,
	form,
	currentProject,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control, setValue } = form;

	const onSubmit = (data) => {
		logger.info("Project data:", data);
		if (currentProject) {
			dispatch(
				updateProjectInDatabase({
					id: currentProject.id,
					...data,
					portfolioId,
				})
			);
		} else {
			dispatch(addProjectInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen} className="w-full">
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentProject ? "Edit Project" : "Add New Project"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4"
					>
						<Uploader
							defaultValue={
								currentProject?.image || currentProject?.video
							}
							defaultName={
								currentProject?.image
									? "image"
									: currentProject?.video
										? "video"
										: null
							}
							setValue={setValue}
						/>
						<div className="grid md:grid-cols-2 gap-2 space-y-4 md:space-y-0">
							<Controller
								name="name"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Project Name</label>
										<Input
											{...field}
											placeholder="Enter project name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
							<Controller
								name="website"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Live Website</label>
										<Input
											{...field}
											placeholder="https://project-demo.com"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
							<Controller
								name="source"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Source URL</label>
										<Input
											{...field}
											placeholder="https://github.com/user/project"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
							<Controller
								name="date"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Date</label>
										<Input
											{...field}
											placeholder="e.g., March 2023"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
							<Controller
								name="technologies"
								control={control}
								render={({ field, fieldState }) => (
									<>
										<div>
											<label>Technologies</label>
											<BadgeInput
												value={field.value} // Bind keywords value
												onChange={(newKeywords) =>
													field.onChange(newKeywords)
												} // Update keywords dynamically
												placeholder="Enter keywords separated by commas"
												error={
													fieldState.error?.message
												}
											/>
										</div>
										<div className="flex flex-wrap items-center gap-x-2 gap-y-3">
											<AnimatePresence>
												{field.value &&
													field.value.map(
														(item, index) => (
															<motion.div
																key={item}
																layout
																initial={{
																	opacity: 0,
																	y: -50,
																}}
																animate={{
																	opacity: 1,
																	y: 0,
																	transition:
																		{
																			delay:
																				index *
																				0.1,
																		},
																}}
																exit={{
																	opacity: 0,
																	x: -50,
																}}
															>
																<Badge
																	className="cursor-pointer"
																	onClick={() => {
																		field.onChange(
																			field.value.filter(
																				(
																					v
																				) =>
																					v !==
																					item
																			)
																		);
																	}}
																>
																	<span className="mr-1">
																		{item}
																	</span>
																	<X
																		size={
																			12
																		}
																		weight="bold"
																	/>
																</Badge>
															</motion.div>
														)
													)}
											</AnimatePresence>
										</div>
									</>
								)}
							/>
						</div>

						<Controller
							name="description"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Description</label>
									<RichInput
										{...field}
										content={field.value}
										onChange={(value) =>
											field.onChange(value)
										}
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentProject
									? "Update Project"
									: "Add Project"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/skill-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { RichInput } from "@/components/ui/rich-input";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
	addSkillInDatabase,
	updateSkillnInDatabase,
} from "@/redux/thunks/skill";
import { logger } from "@/lib/utils";

export const SkillDialog = ({
	portfolioId,
	form,
	currentSkill,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control } = form;

	const onSubmit = (data) => {
		if (currentSkill) {
			logger.info("Update skill: ", currentSkill);
			logger.info("Update data: ", data);
			dispatch(
				updateSkillnInDatabase({
					...data,
					id: currentSkill.id,
					portfolioId,
				})
			);
		} else {
			dispatch(addSkillInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};
	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentSkill ? "Edit Skill" : "Add New Skill"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<Controller
							name="name"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Skill Name</label>
									<Input
										{...field}
										placeholder="Enter skill name"
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<Controller
							name="description"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Description</label>
									<RichInput
										{...field}
										content={field.value}
										onChange={(value) =>
											field.onChange(value)
										}
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentSkill ? "Update Skill" : "Add Skill"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/team-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import { PictureSection } from "../sections/picture/section";
import {
	addTeamMemberInDatabase,
	updateTeamMemberInDatabase,
} from "@/redux/thunks/team";
import { CustomLink } from "@/components/custom-link";

export const TeamDialog = ({
	portfolioId,
	form,
	currentTeamMember,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control, setValue } = form;

	const onSubmit = (data) => {
		if (currentTeamMember) {
			dispatch(
				updateTeamMemberInDatabase({
					id: currentTeamMember.id,
					...data,
					portfolioId,
				})
			);
		} else {
			dispatch(addTeamMemberInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentTeamMember
							? "Edit Team Member"
							: "Add New Team Member"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<PictureSection
							control={control}
							setValue={setValue}
							name="avatar"
						/>

						<div className="grid md:grid-cols-2 gap-2 space-y-4 md:space-y-0">
							<Controller
								name="name"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Name</label>
										<Input
											{...field}
											placeholder="Enter member's name"
											error={fieldState.error?.message}
										/>
									</div>
								)}
							/>

							<Controller
								name="role"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Role</label>
										<Input
											{...field}
											placeholder="e.g., Frontend Developer"
											error={fieldState.error?.message}
										/>
									</div>
								)}
							/>
						</div>

						{/* <Controller
							name="bio"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Bio</label>
									<Textarea
										{...field}
										placeholder="Write a brief bio..."
										className="min-h-[100px] resize-none"
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div>
							<label>Links</label>
							<CustomLink
								setValue={setValue}
								links={currentTeamMember?.links || []}
							/>
						</div> */}

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentTeamMember
									? "Update Member"
									: "Add Member"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/dialogs/testimonial-dialog.jsx
================
import { useDispatch } from "react-redux";
import { Controller } from "react-hook-form";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
	Dialog,
	DialogContent,
	DialogHeader,
	DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
	addTestimonialInDatabase,
	updateTestimonialInDatabase,
} from "@/redux/thunks/testimonials";
import { PictureSection } from "../sections/picture/section";

export const TestimonialDialog = ({
	portfolioId,
	form,
	currentTestimonial,
	isOpen,
	setIsOpen,
}) => {
	const dispatch = useDispatch();
	const { reset, handleSubmit, control, setValue } = form;

	const onSubmit = (data) => {
		if (currentTestimonial) {
			dispatch(
				updateTestimonialInDatabase({
					id: currentTestimonial.id,
					...data,
					portfolioId,
				})
			);
		} else {
			dispatch(addTestimonialInDatabase({ ...data, portfolioId }));
		}
		setIsOpen(false);
		reset();
	};

	return (
		<Dialog open={isOpen} onOpenChange={setIsOpen}>
			<DialogContent>
				<DialogHeader>
					<DialogTitle>
						{currentTestimonial
							? "Edit Testimonial"
							: "Add New Testimonial"}
					</DialogTitle>
				</DialogHeader>

				<ScrollArea className="max-h-[70vh]">
					<form
						onSubmit={handleSubmit(onSubmit)}
						className="space-y-4 pr-3"
					>
						<PictureSection
							control={control}
							setValue={setValue}
							name="avatar"
						/>

						<div className="grid md:grid-cols-2 gap-2 space-y-4 md:space-y-0">
							<Controller
								name="name"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Name</label>
										<Input
											{...field}
											placeholder="Enter person's name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="role"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Role</label>
										<Input
											{...field}
											placeholder="e.g., CEO, Software Engineer"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="company"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Company</label>
										<Input
											{...field}
											placeholder="Enter company name"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>

							<Controller
								name="rating"
								control={control}
								render={({ field, fieldState }) => (
									<div>
										<label>Rating (1-5)</label>
										<Input
											{...field}
											type="number"
											min="1"
											max="5"
											value={field.value || 5} // Ensure there's always a value
											onChange={(e) =>
												field.onChange(
													Number(e.target.value)
												)
											} // Convert to number
											placeholder="Rating (1-5)"
										/>
										{fieldState.error && (
											<small className="text-red-500 opacity-75">
												{fieldState.error?.message}
											</small>
										)}
									</div>
								)}
							/>
						</div>

						<Controller
							name="message"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label>Testimonial Message</label>
									<Textarea
										{...field}
										placeholder="Write your testimonial message..."
										className="min-h-[100px] resize-none"
									/>
									{fieldState.error && (
										<small className="text-red-500 opacity-75">
											{fieldState.error?.message}
										</small>
									)}
								</div>
							)}
						/>

						<div className="flex justify-end space-x-2">
							<Button
								type="button"
								variant="outline"
								onClick={() => setIsOpen(false)}
							>
								Cancel
							</Button>
							<Button type="submit">
								{currentTestimonial
									? "Update Testimonial"
									: "Add Testimonial"}
							</Button>
						</div>
					</form>
				</ScrollArea>
			</DialogContent>
		</Dialog>
	);
};

================
File: components/domain-configuration.jsx
================
"use client";

import { useState, useEffect } from "react";
import { AlertCircle, XCircle } from "lucide-react";
import { cn } from "@/lib/utils";
import { getDomainResponse, getConfigResponse } from "@/lib/domains";

export function DomainConfiguration({ domain }) {
	const [recordType, setRecordType] = useState("A");
	const [status, setStatus] = useState("Checking...");
	const [error, setError] = useState(null);

	useEffect(() => {
		async function checkDomain() {
			try {
				const [domainData, configData] = await Promise.all([
					getDomainResponse(domain),
					getConfigResponse(domain),
				]);

				if (domainData.error) {
					setStatus("Invalid Configuration");
					setError(domainData.error.message);
				} else if (!domainData.verified) {
					setStatus("Pending Verification");
				} else if (configData.misconfigured) {
					setStatus("Invalid Configuration");
				} else {
					setStatus("Valid Configuration");
				}
			} catch (error) {
				console.error("Error checking domain:", error);
				setStatus("Configuration Error");
			}
		}

		checkDomain();
	}, [domain]);

	return (
		<div className="border-t border-stone-200 px-5 py-3">
			<div className="mb-4 flex items-center space-x-2">
				{status === "Pending Verification" ? (
					<AlertCircle className="text-yellow-500" />
				) : status !== "Valid Configuration" ? (
					<XCircle className="text-red-500" />
				) : null}
				<p className="text-lg font-semibold">{status}</p>
			</div>

			{error ? (
				<p className="text-sm text-red-500 mb-4">{error}</p>
			) : (
				<div>
					<div className="flex space-x-4 mb-4">
						<button
							type="button"
							onClick={() => setRecordType("A")}
							className={`pb-1 border-b-2 transition-all ${
								recordType === "A"
									? "border-primary text-primary"
									: "border-transparent text-muted-foreground"
							}`}
						>
							A Record (recommended)
						</button>
						<button
							type="button"
							onClick={() => setRecordType("CNAME")}
							className={`pb-1 border-b-2 transition-all ${
								recordType === "CNAME"
									? "border-primary text-primary"
									: "border-transparent text-muted-foreground"
							}`}
						>
							CNAME Record
						</button>
					</div>

					<div className="bg-muted p-4 rounded-md">
						<div className="grid grid-cols-4 gap-4">
							<div>
								<p className="font-medium mb-2">Type</p>
								<p className="font-mono">{recordType}</p>
							</div>
							<div>
								<p className="font-medium mb-2">Name</p>
								<p className="font-mono">
									{recordType === "A" ? "@" : "www"}
								</p>
							</div>
							<div>
								<p className="font-medium mb-2">Value</p>
								<p className="font-mono">
									{recordType === "A"
										? "76.76.21.21"
										: `cname.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`}
								</p>
							</div>
							<div>
								<p className="font-medium mb-2">TTL</p>
								<p className="font-mono">86400</p>
							</div>
						</div>
					</div>
				</div>
			)}
		</div>
	);
}

================
File: components/domain-settings.jsx
================
"use client";

import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useParams } from "next/navigation";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Card } from "./ui/card";
import { Globe, Plus, Trash } from "@phosphor-icons/react";
import { DomainStatus } from "./domain-status";
import { DomainConfiguration } from "./domain-configuration";
import { validDomainRegex } from "@/lib/domains";
import { toast } from "sonner";
import { logger } from "@/lib/utils";
import { updatePortfolioInDatabase } from "@/redux/thunks/portfolio";

export function DomainSettings() {
	const { portfolioId } = useParams();
	const dispatch = useDispatch();
	const [newDomain, setNewDomain] = useState("");
	const [isSubmitting, setIsSubmitting] = useState(false);
	const [domainStatus, setDomainStatus] = useState(null);

	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);

	const handleDomainSubmit = async (e) => {
		e.preventDefault();

		// Validation checks
		if (!validDomainRegex.test(newDomain)) {
			toast.error("Please enter a valid domain");
			return;
		}

		if (newDomain.includes(process.env.NEXT_PUBLIC_ROOT_DOMAIN)) {
			toast.error(
				`Cannot use ${process.env.NEXT_PUBLIC_ROOT_DOMAIN} as your custom domain`
			);
			return;
		}

		// Only proceed if domain needs configuration
		if (domainStatus !== "Valid") {
			setIsSubmitting(true);
			try {
				// First verify/add domain with Vercel
				const domainResponse = await fetch("/api/domains", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({ domain: newDomain }),
				});

				if (!domainResponse.ok) {
					const error = await domainResponse.json();
					logger.error("Domain error: ", error);
					throw new Error(
						error.error?.message || "Failed to add domain"
					);
				}

				// Update portfolio directly using the thunk
				const result = await dispatch(
					updatePortfolioInDatabase({
						id: portfolioId,
						data: { customDomain: newDomain },
					})
				).unwrap();

				if (result.success) {
					toast.success("Domain added successfully");
				}
			} catch (error) {
				toast.error(error.message);
				logger.error("Error adding domain:", error);
			} finally {
				setIsSubmitting(false);
			}
		}
	};

	const handleRemoveDomain = async () => {
		if (!portfolio?.customDomain) return;

		setIsSubmitting(true);
		try {
			// First remove from Vercel
			const response = await fetch(
				`/api/domains?domain=${portfolio.customDomain}`,
				{
					method: "DELETE",
				}
			);

			if (!response.ok) {
				throw new Error("Failed to remove domain configuration");
			}

			// Update portfolio directly using the thunk
			const result = await dispatch(
				updatePortfolioInDatabase({
					id: portfolioId,
					data: { customDomain: null },
				})
			).unwrap();

			if (result) {
				toast.success("Domain removed successfully");
			}
		} catch (error) {
			toast.error(error.message);
			logger.error("Error removing domain:", error);
		} finally {
			setIsSubmitting(false);
		}
	};

	return (
		<section id="domains" className="flex flex-col gap-y-4">
			<header>
				<h2 className="text-xl font-semibold">Custom Domain</h2>
				<p className="text-sm text-muted-foreground">
					Configure a custom domain for your portfolio
				</p>
			</header>

			{portfolio?.customDomain ? (
				<Card className="p-4">
					<div className="flex items-center justify-between">
						<div className="flex items-center gap-2">
							<Globe className="h-4 w-4" />
							<span>{portfolio.customDomain}</span>
							<DomainStatus
								domain={portfolio.customDomain}
								onStatusChange={setDomainStatus}
							/>
						</div>
						<Button
							variant="destructive"
							size="sm"
							onClick={handleRemoveDomain}
							disabled={isSubmitting}
						>
							<Trash className="h-4 w-4" />
						</Button>
					</div>
					<DomainConfiguration domain={portfolio.customDomain} />
				</Card>
			) : (
				<form onSubmit={handleDomainSubmit} className="flex gap-2">
					<div className="flex-1 relative">
						<Input
							placeholder="yourdomain.com"
							value={newDomain}
							onChange={(e) => setNewDomain(e.target.value)}
						/>
						{newDomain && (
							<div className="absolute right-3 top-1/2 -translate-y-1/2">
								<DomainStatus
									domain={newDomain}
									onStatusChange={setDomainStatus}
								/>
							</div>
						)}
					</div>
					<Button
						type="submit"
						disabled={
							isSubmitting ||
							!newDomain ||
							domainStatus === "Valid"
						}
					>
						<Plus className="h-4 w-4 mr-2" />
						Add Domain
					</Button>
				</form>
			)}
		</section>
	);
}

================
File: components/domain-status.jsx
================
"use client";

import { useEffect, useState } from "react";
import { CheckCircle2, XCircle } from "lucide-react";
import { getDomainResponse, verifyDomain } from "@/lib/domains";

export function DomainStatus({ domain, onStatusChange }) {
	const [loading, setLoading] = useState(true);
	const [status, setStatus] = useState(null);

	useEffect(() => {
		async function checkDomain() {
			if (!domain) return;

			try {
				// First check if domain exists in Vercel
				const response = await getDomainResponse(domain);

				if (response.error) {
					// Domain not found in Vercel - needs to be added
					setStatus("NotConfigured");
					onStatusChange && onStatusChange("NotConfigured");
				} else if (!response.verified) {
					await verifyDomain(domain);
					setStatus("Pending");
					onStatusChange && onStatusChange("Pending");
				} else {
					setStatus("Valid");
					onStatusChange && onStatusChange("Valid");
				}
			} catch (error) {
				console.error("Error checking domain:", error);
				setStatus("Invalid");
				onStatusChange && onStatusChange("Invalid");
			} finally {
				setLoading(false);
			}
		}

		checkDomain();
	}, [domain, onStatusChange]);

	if (loading) {
		return <div className="h-4 w-4 animate-spin rounded-full border-2" />;
	}

	return status === "Valid" ? (
		<CheckCircle2 className="h-4 w-4 text-green-500" />
	) : (
		<XCircle className="h-4 w-4 text-red-500" />
	);
}

================
File: components/error-message.jsx
================
import { TriangleIcon } from "lucide-react";

export default function ErrorMessage({error}) {
    return (
        <div className="flex w-full items-center p-4 mb-4 gap-2 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
            <TriangleIcon className="h-4 w-4 text-red-500"/>
            <span className="sr-only">Error</span>
            <div>{error}</div>
        </div>
    )
}

================
File: components/homepage/accordion-component.jsx
================
import {
	Accordion,
	AccordionContent,
	AccordionItem,
	AccordionTrigger,
} from "@/components/ui/accordion";
import { TITLE_TAILWIND_CLASS } from "@/utils/constants";

export function AccordionComponent() {
	return (
		<div className="flex flex-col w-[70%] lg:w-[50%]">
			<h2
				className={`${TITLE_TAILWIND_CLASS} mt-2 font-semibold text-center tracking-tight dark:text-white text-gray-900`}
			>
				Frequently Asked Questions (FAQs)
			</h2>
			<Accordion type="single" collapsible className="w-full mt-2">
				<AccordionItem value="item-1">
					<AccordionTrigger>
						<span className="font-medium">
							How does Spaark work?
						</span>
					</AccordionTrigger>
					<AccordionContent>
						<p>
							Spaark simplifies portfolio creation into three easy
							steps: select a template, fill in your details, and
							choose whether to enable a blog. Once done, your
							portfolio goes live instantly.
						</p>
					</AccordionContent>
				</AccordionItem>
				<AccordionItem value="item-2">
					<AccordionTrigger>
						<span className="font-medium">
							What are the subscription options?
						</span>
					</AccordionTrigger>
					<AccordionContent>
						<p>
							We offer flexible plans starting at $3/week for
							individual accounts. Choose between weekly, monthly
							($10), or yearly ($96) billing. Team plans start at
							$25/month or $240/year with enhanced collaboration
							features.
						</p>
					</AccordionContent>
				</AccordionItem>
				<AccordionItem value="item-3">
					<AccordionTrigger>
						<span className="font-medium">
							Can I use a custom domain?
						</span>
					</AccordionTrigger>
					<AccordionContent>
						<p>
							Yes! All subscription plans include custom domain
							support. You can easily connect your own domain to
							your Spaark portfolio.
						</p>
					</AccordionContent>
				</AccordionItem>
				<AccordionItem value="item-4">
					<AccordionTrigger>
						<span className="font-medium">
							What&apos;s included in the team plan?
						</span>
					</AccordionTrigger>
					<AccordionContent>
						<p>
							Team plans include all individual features plus team
							collaboration, shared templates, and custom branding
							options. Individual features include template
							options, custom domain support, project showcase,
							skills visualization, built-in blog, and contact
							form functionality.
						</p>
					</AccordionContent>
				</AccordionItem>
				<AccordionItem value="item-5">
					<AccordionTrigger>
						<span className="font-medium">
							Can I switch templates later?
						</span>
					</AccordionTrigger>
					<AccordionContent>
						<p>
							Yes, you can switch between available templates at
							any time without losing your content. All your
							information will automatically adapt to the new
							template layout.
						</p>
					</AccordionContent>
				</AccordionItem>
			</Accordion>
		</div>
	);
}

================
File: components/homepage/faq.jsx
================
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion"

export function FAQ() {
    return (
        <Accordion type="single" collapsible className="w-full p-8">
            <AccordionItem value="item-1">
                <AccordionTrigger>Is it accessible?</AccordionTrigger>
                <AccordionContent>
                    Yes. It adheres to the WAI-ARIA design pattern.
                </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-2">
                <AccordionTrigger>Is it styled?</AccordionTrigger>
                <AccordionContent>
                    Yes. It comes with default styles that matches the other
                    components&apos; aesthetic.
                </AccordionContent>
            </AccordionItem>
            <AccordionItem value="item-3">
                <AccordionTrigger>Is it animated?</AccordionTrigger>
                <AccordionContent>
                    Yes. It&apos;s animated by default, but you can disable it if you prefer.
                </AccordionContent>
            </AccordionItem>
        </Accordion>
    )
}

================
File: components/homepage/features.jsx
================
import { siteConfig } from "@/config/site";

export const Features = () => (
	<section
		id="features"
		className="container mx-auto px-6 py-10 py-md-16 max-w-4xl"
	>
		<div className="grid grid-cols-1 md:grid-cols-2 gap-8 justify-items-center">
			{siteConfig.features.map((feature) => (
				<div
					key={feature.id}
					className="flex flex-col items-center text-center max-w-sm p-6 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-all duration-200"
				>
					{feature.icon && (
						<feature.icon className="w-12 h-12 mb-4 text-primary" />
					)}
					<h3 className="text-xl font-semibold mb-2">
						{feature.name}
					</h3>
					<p className="text-gray-600 dark:text-gray-400">
						{feature.description}
					</p>
				</div>
			))}
		</div>
	</section>
);

================
File: components/homepage/hero-section.jsx
================
import { MoveRight } from "lucide-react";
import { Button } from "../ui/button";
import { siteConfig } from "@/config/site";
import Link from "next/link";
import Image from "next/image";

export const HeroSection = () => (
	<div className="w-full">
		<div className="container mx-auto">
			<div className="flex gap-8 py-20 lg:py-40 items-center justify-center flex-col">
				<div>
					<Link href="https://medium.com/@Oseni03/unveiling-the-ultimate-developer-portfolio-builder-powered-by-magicui-spaark-743f6e6ef7b4">
						<Button variant="secondary" size="sm" className="gap-4">
							Read our launch article{" "}
							<MoveRight className="w-4 h-4" />
						</Button>
					</Link>
				</div>
				<div className="flex gap-4 flex-col">
					<h1 className="text-5xl md:text-7xl max-w-2xl tracking-tighter text-center font-regular">
						{siteConfig.heroIntro}
					</h1>
					<p className="text-lg md:text-xl leading-relaxed tracking-tight text-muted-foreground max-w-2xl text-center">
						{siteConfig.description}
					</p>
				</div>
				<div className="grid grid-cols-1 md:grid-flow-col gap-3 w-full max-w-md">
					<Link href={"/sign-up"} className="w-full">
						<Button size="lg" className="w-full gap-4">
							Create portfolio <MoveRight className="w-4 h-4" />
						</Button>
					</Link>
					<Link href={siteConfig.github} className="w-full">
						<Button
							size="lg"
							className="w-full gap-4"
							variant="outline"
						>
							Star on GitHub{" "}
							<Image
								src="/github.svg"
								alt="GitHub"
								width={16}
								height={16}
							/>
						</Button>
					</Link>
				</div>
				{/* <a
					href="https://www.producthunt.com/products/spaark-2?utm_source=badge-follow&utm_medium=badge&utm_souce=badge-spaark&#0045;2"
					target="_blank"
					style={{
						position: "fixed",
						bottom: "40px", // Adjusted from 20px to 40px
						right: "20px",
						zIndex: 1000,
					}}
				>
					<img
						src="https://api.producthunt.com/widgets/embed-image/v1/follow.svg?product_id=859386&theme=light"
						alt="Spaark - Create&#0032;your&#0032;professional&#0032;portfolio&#0032;in&#0032;minutes | Product Hunt"
						style={{ width: "250px", height: "54px" }}
						width="250"
						height="54"
					/>
				</a> */}
			</div>
		</div>
	</div>
);

================
File: components/homepage/newsletter.jsx
================
"use client";

import { useState } from "react";
import { Input } from "../ui/input";
import { Button } from "../ui/button";
import { toast } from "sonner";
import { createSubscriber } from "@/services/newsletter";
import { Spinner } from "../ui/Spinner";

const Newsletter = () => {
	const [email, setEmail] = useState("");
	const [isLoading, setLoading] = useState(false);

	const handleSubmit = async (e) => {
		e.preventDefault();
		setLoading(true);

		const response = await createSubscriber(email);

		if (response.success) {
			toast.success("Thank you for subscribing!");
			setEmail(""); // Reset the input field
		} else {
			toast.info(response.error);
		}
		setLoading(false);
		setEmail("");
	};

	return (
		<section className="container bg-gray-300 rounded-md">
			<div className="mx-auto my-10">
				<div className="flex flex-col items-center text-center text-black gap-6">
					<div>
						<svg
							xmlns="http://www.w3.org/2000/svg"
							width="48"
							height="48"
							viewBox="0 0 48 48"
							fill="none"
						>
							<path
								opacity="0.2"
								d="M42 18L27.2719 28.5H20.7281L6 18L24 6L42 18Z"
								fill="#8B3DFF"
							/>
							<path
								d="M42.8325 16.7512L24.8325 4.75125C24.586 4.58679 24.2963 4.49902 24 4.49902C23.7037 4.49902 23.414 4.58679 23.1675 4.75125L5.1675 16.7512C4.96202 16.8883 4.79358 17.0741 4.67713 17.2919C4.56068 17.5098 4.49984 17.753 4.5 18V37.5C4.5 38.2956 4.81607 39.0587 5.37868 39.6213C5.94129 40.1839 6.70435 40.5 7.5 40.5H40.5C41.2957 40.5 42.0587 40.1839 42.6213 39.6213C43.1839 39.0587 43.5 38.2956 43.5 37.5V18C43.5002 17.753 43.4393 17.5098 43.3229 17.2919C43.2064 17.0741 43.038 16.8883 42.8325 16.7512ZM18.135 28.5L7.5 36V20.9119L18.135 28.5ZM21.2044 30H26.7956L37.4137 37.5H10.5862L21.2044 30ZM29.865 28.5L40.5 20.9119V36L29.865 28.5ZM24 7.80187L39.3581 18.0412L26.7956 27H21.2081L8.64563 18.0412L24 7.80187Z"
								fill="#8B3DFF"
							/>
						</svg>
					</div>
					<div>
						<h2 className="text-2xl font-bold">
							Subscribe to our newsletter
						</h2>
						<p className="text-gray-600">
							Enjoy using Block Template and stay tuned for the
							latest updates and news.
						</p>
					</div>
					<div className="w-full max-w-md">
						<form
							onSubmit={handleSubmit}
							className="flex flex-col md:flex-row gap-4"
						>
							<div className="w-full">
								<label
									htmlFor="notificationEmail"
									className="sr-only"
								>
									Email
								</label>
								<Input
									type="email"
									value={email}
									onChange={(e) => setEmail(e.target.value)}
									placeholder="Email"
									required
									className="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2"
								/>
								<div className="text-sm text-red-600 hidden">
									Email is required.
								</div>
							</div>
							<div>
								<Button
									type="submit"
									name="subscribe"
									disabled={isLoading}
								>
									{isLoading && <Spinner />}
									Subscribe
								</Button>
							</div>
							{/* Anti-spam hidden field */}
							<div
								style={{
									position: "absolute",
									left: "-5000px",
								}}
								aria-hidden="true"
							>
								<Input
									className="subscription-form-antispam"
									type="text"
									name="b_b838b4eb099ebf09c3407db0f_b01fb647c7"
									tabIndex="-1"
								/>
							</div>
						</form>
					</div>
				</div>
			</div>
		</section>
	);
};

export default Newsletter;

================
File: components/homepage/pricing.jsx
================
"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { useOrganization, useUser } from "@clerk/nextjs";
import { toast } from "sonner";
import axios from "axios";
import { Spinner } from "../ui/Spinner";
import { useRouter } from "next/navigation";
import { logger } from "@/lib/utils";
import { SUBSCRIPTION_PLANS } from "@/utils/subscription-plans";
import { TITLE_TAILWIND_CLASS } from "@/utils/constants";

const PricingHeader = ({ title, subtitle }) => (
	<section className="text-center">
		<h1
			className={`${TITLE_TAILWIND_CLASS} mt-2 font-semibold tracking-tight dark:text-white text-gray-900`}
		>
			{title}
		</h1>
		<p className="text-gray-600 dark:text-gray-400 pt-1">{subtitle}</p>
		<br />
	</section>
);

const PricingCard = ({
	type,
	billing,
	features,
	prices,
	isHovered,
	onMouseEnter,
	onMouseLeave,
	onBillingChange,
	onSubscribe,
	processing,
}) => {
	return (
		<Card
			className={`relative transition-all duration-300 ${
				isHovered ? "transform -translate-y-2 shadow-xl" : ""
			}`}
			onMouseEnter={onMouseEnter}
			onMouseLeave={onMouseLeave}
		>
			<CardHeader>
				<CardTitle>{type}</CardTitle>
				<p className="text-sm text-gray-500">
					{type === "Individual"
						? "Perfect for freelancers and solo developers"
						: "For organizations and development teams"}
				</p>
			</CardHeader>
			<CardContent>
				{/* Billing toggle */}
				<div className="flex bg-gray-100 dark:text-gray-900 rounded-lg p-1 mb-6">
					{Object.keys(prices).map((period) => (
						<button
							key={period}
							className={`flex-1 py-2 rounded-md text-sm transition-all duration-300 ${
								billing === period
									? "bg-white shadow-sm transform scale-105"
									: "hover:bg-gray-200"
							}`}
							onClick={() => onBillingChange(period)}
						>
							{period.charAt(0).toUpperCase() + period.slice(1)}
						</button>
					))}
				</div>

				{/* Price display */}
				<div className="mb-8 text-center">
					<div className="flex items-baseline justify-center">
						<span className="text-4xl font-bold">
							${prices[billing].price}
						</span>
						<span className="text-gray-500 ml-2">
							/{prices[billing].interval}
						</span>
					</div>
					{billing === "yearly" && (
						<span className="text-green-600 text-sm mt-1">
							Save 20% with annual billing
						</span>
					)}
				</div>

				{/* Features list */}
				<ul className="space-y-4">
					{features.map((feature, index) => (
						<li
							key={feature}
							className="flex items-center transform transition-all duration-300 hover:translate-x-2"
							style={{ transitionDelay: `${index * 50}ms` }}
						>
							<Check className="h-5 w-5 text-green-500 mr-2" />
							<span>{feature}</span>
						</li>
					))}
				</ul>

				<Button
					size="lg"
					className="w-full mt-8"
					onClick={() => onSubscribe(type, billing)}
					variant="default"
					disabled={processing}
				>
					{processing && <Spinner />}
					Get Started
				</Button>
			</CardContent>
		</Card>
	);
};

export default function Pricing({
	isDialog = false,
	returnUrl = process.env.NEXT_PUBLIC_APP_URL,
}) {
	const router = useRouter();
	const { user } = useUser();
	const { organization } = useOrganization();
	const [isProcessing, setIsProcessing] = useState(false);
	const [individualBilling, setIndividualBilling] = useState("monthly");
	const [teamBilling, setTeamBilling] = useState("monthly");
	const [isHoveredIndividual, setIsHoveredIndividual] = useState(false);
	const [isHoveredTeam, setIsHoveredTeam] = useState(false);

	const handleCheckout = async (type, billing) => {
		if (isProcessing || !user) {
			logger.info("Checkout blocked", { isProcessing, hasUser: !!user });
			router.push("/sign-in");
			toast("Sign in to subscribe!");
			return;
		}

		if (organization && !(type.toUpperCase() === "TEAM")) {
			toast.error(
				"Organization account can only subscribe to TEAM plan."
			);
			return;
		}

		if (!organization && !(type.toUpperCase() === "INDIVIDUAL")) {
			toast.error(
				"Individual account can only subscribe to INDIVIDUAL plan."
			);
			return;
		}

		setIsProcessing(true);
		logger.info("Starting checkout process", {
			type,
			billing,
			userId: user.id,
		});

		try {
			const response = await axios.post("/api/payment/checkout", {
				type: type.toUpperCase(),
				frequency: billing.toUpperCase(),
				userId: user.id,
				userEmail: user.emailAddresses[0].emailAddress,
				returnUrl, // Add returnUrl to the payload
				orgId: organization?.id,
			});

			logger.info("Checkout response received", {
				hasLink: !!response.data.link,
			});

			if (response.data.link) {
				window.location.href = response.data.link;
				return;
			}

			logger.error("No payment link received");
			toast.error("Unable to initiate checkout");
		} catch (err) {
			logger.error("Checkout error:", {
				message: err.message,
				response: err.response?.data,
				stack: err.stack,
			});
			toast.error(err.response?.data?.message || "Checkout failed");
		} finally {
			setIsProcessing(false);
		}
	};

	return (
		<div className={`${isDialog ? "" : "container"}`}>
			<PricingHeader
				title="Choose Your Plan"
				subtitle="Build your professional portfolio with our flexible pricing options"
			/>

			<div
				className={`grid md:grid-cols-2 gap-8 ${isDialog ? "max-w-4xl" : "max-w-6xl"} mx-auto`}
			>
				<PricingCard
					type="Individual"
					billing={individualBilling}
					prices={SUBSCRIPTION_PLANS.INDIVIDUAL}
					features={
						SUBSCRIPTION_PLANS.INDIVIDUAL[individualBilling]
							.features
					}
					isHovered={isHoveredIndividual}
					onMouseEnter={() => setIsHoveredIndividual(true)}
					onMouseLeave={() => setIsHoveredIndividual(false)}
					onBillingChange={setIndividualBilling}
					onSubscribe={handleCheckout}
					processing={isProcessing}
				/>

				<PricingCard
					type="Team"
					billing={teamBilling}
					prices={SUBSCRIPTION_PLANS.TEAM}
					features={SUBSCRIPTION_PLANS.TEAM[teamBilling].features}
					isHovered={isHoveredTeam}
					onMouseEnter={() => setIsHoveredTeam(true)}
					onMouseLeave={() => setIsHoveredTeam(false)}
					onBillingChange={setTeamBilling}
					onSubscribe={handleCheckout}
					processing={isProcessing}
				/>
			</div>
		</div>
	);
}

================
File: components/left-app-sidebar.jsx
================
"use client";

import { useRouter } from "next/navigation";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "./ui/separator";
import { BasicsSection } from "@/components/sections/basics";
import { Profile } from "@/components/sections/profile";
import { Experience } from "@/components/sections/experience";
import { Education } from "@/components/sections/education";
import { Skill } from "@/components/sections/skill";
import { Certification } from "@/components/sections/certification";
import { Project } from "@/components/sections/project";
import { Hackathon } from "@/components/sections/hackathon";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Testimonial } from "./sections/testimonial";
import { Team } from "./sections/team";
import { useParams } from "next/navigation";
import { useSelector } from "react-redux";

export function LeftAppSidebar() {
	const router = useRouter();
	const isDesktop = useMediaQuery("(min-width: 1024px)");
	const { portfolioId } = useParams();

	// Get portfolio to check if it belongs to an organization
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);

	const isOrgPortfolio = Boolean(portfolio?.organizationId);

	const Content = (
		<div className="grid gap-y-6 p-6">
			<button
				onClick={() => router.push("/dashboard/portfolios")}
				className="flex items-center text-sm text-muted-foreground hover:text-primary"
			>
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="16"
					height="16"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					strokeWidth="2"
					strokeLinecap="round"
					strokeLinejoin="round"
					className="mr-2"
				>
					<path d="M19 12H5M12 19l-7-7 7-7" />
				</svg>
				Back to Portfolios
			</button>
			<BasicsSection />
			<Separator />
			<Profile />
			<Separator />
			<Experience />
			<Separator />
			<Education />
			<Separator />
			<Skill />
			<Separator />
			<Certification />
			<Separator />
			<Project />
			<Separator />
			{isOrgPortfolio && (
				<>
					<Team />
					<Separator />
				</>
			)}
			<Testimonial />
			<Separator />
			<Hackathon />
		</div>
	);

	if (isDesktop) {
		return <div className="h-screen overflow-y-auto">{Content}</div>;
	}

	return <ScrollArea className="h-screen">{Content}</ScrollArea>;
}

================
File: components/magicui/blur-fade-text.jsx
================
"use client";

import { cn } from "@/lib/utils";
import { AnimatePresence, motion, Variants } from "framer-motion";
import { useMemo } from "react";

// interface BlurFadeTextProps {
//   text: string;
//   className?: string;
//   variant?: {
//     hidden: { y: number };
//     visible: { y: number };
//   };
//   duration?: number;
//   characterDelay?: number;
//   delay?: number;
//   yOffset?: number;
//   animateByCharacter?: boolean;
// }
const BlurFadeText = ({
	text,
	className,
	variant,
	characterDelay = 0.03,
	delay = 0,
	yOffset = 8,
	animateByCharacter = false,
}) => {
	const defaultVariants = {
		hidden: { y: yOffset, opacity: 0, filter: "blur(8px)" },
		visible: { y: -yOffset, opacity: 1, filter: "blur(0px)" },
	};
	const combinedVariants = variant || defaultVariants;
	const characters = useMemo(() => Array.from(text), [text]);

	if (animateByCharacter) {
		return (
			<div className="flex">
				<AnimatePresence>
					{characters.map((char, i) => (
						<motion.span
							key={i}
							initial="hidden"
							animate="visible"
							exit="hidden"
							variants={combinedVariants}
							transition={{
								yoyo: Infinity,
								delay: delay + i * characterDelay,
								ease: "easeOut",
							}}
							className={cn("inline-block", className)}
							style={{
								width: char.trim() === "" ? "0.2em" : "auto",
							}}
						>
							{char}
						</motion.span>
					))}
				</AnimatePresence>
			</div>
		);
	}

	return (
		<div className="flex">
			<AnimatePresence>
				<motion.span
					initial="hidden"
					animate="visible"
					exit="hidden"
					variants={combinedVariants}
					transition={{
						yoyo: Infinity,
						delay,
						ease: "easeOut",
					}}
					className={cn("inline-block", className)}
				>
					{text}
				</motion.span>
			</AnimatePresence>
		</div>
	);
};

export default BlurFadeText;

================
File: components/magicui/blur-fade.jsx
================
"use client";

import { AnimatePresence, motion, useInView, Variants } from "framer-motion";
import { useRef } from "react";

// interface BlurFadeProps {
//   children: React.ReactNode;
//   className?: string;
//   variant?: {
//     hidden: { y: number };
//     visible: { y: number };
//   };
//   duration?: number;
//   delay?: number;
//   yOffset?: number;
//   inView?: boolean;
//   inViewMargin?: string;
//   blur?: string;
// }
const BlurFade = ({
	children,
	className,
	variant,
	duration = 0.4,
	delay = 0,
	yOffset = 6,
	inView = false,
	inViewMargin = "-50px",
	blur = "6px",
}) => {
	const ref = useRef(null);
	const inViewResult = useInView(ref, { once: true, margin: inViewMargin });
	const isInView = !inView || inViewResult;
	const defaultVariants = {
		hidden: { y: yOffset, opacity: 0, filter: `blur(${blur})` },
		visible: { y: -yOffset, opacity: 1, filter: `blur(0px)` },
	};
	const combinedVariants = variant || defaultVariants;
	return (
		<AnimatePresence>
			<motion.div
				ref={ref}
				initial="hidden"
				animate={isInView ? "visible" : "hidden"}
				exit="hidden"
				variants={combinedVariants}
				transition={{
					delay: 0.04 + delay,
					duration,
					ease: "easeOut",
				}}
				className={className}
			>
				{children}
			</motion.div>
		</AnimatePresence>
	);
};

export default BlurFade;

================
File: components/magicui/dock.jsx
================
"use client";

import { cn } from "@/lib/utils";
import { cva } from "class-variance-authority";
import { motion, useMotionValue, useSpring, useTransform } from "framer-motion";
import React, { useRef } from "react";

// export interface DockProps extends VariantProps<typeof dockVariants> {
//   className?: string;
//   magnification?: number;
//   distance?: number;
//   children: React.ReactNode;
// }

const DEFAULT_MAGNIFICATION = 60;
const DEFAULT_DISTANCE = 140;

const dockVariants = cva(
	"mx-auto w-max h-full p-2 flex items-end rounded-full border"
);

const Dock = React.forwardRef(
	(
		{
			className,
			children,
			magnification = DEFAULT_MAGNIFICATION,
			distance = DEFAULT_DISTANCE,
			...props
		},
		ref
	) => {
		const mousex = useMotionValue(Infinity);

		const renderChildren = () => {
			return React.Children.map(children, (child) => {
				if (React.isValidElement(child)) {
					return React.cloneElement(child, {
						mousex,
						magnification,
						distance,
					});
				}
				return child;
			});
		};

		return (
			<motion.div
				ref={ref}
				onMouseMove={(e) => mousex.set(e.pageX)}
				onMouseLeave={() => mousex.set(Infinity)}
				{...props}
				className={cn(dockVariants({ className }))}
			>
				{renderChildren()}
			</motion.div>
		);
	}
);

Dock.displayName = "Dock";

const DockIcon = ({
	size,
	magnification = DEFAULT_MAGNIFICATION,
	distance = DEFAULT_DISTANCE,
	mousex,
	className,
	children,
	...props
}) => {
	const ref = useRef(null);

	const distanceCalc = useTransform(mousex, (val) => {
		const bounds = ref.current?.getBoundingClientRect() ?? {
			x: 0,
			width: 0,
		};
		return val - bounds.x - bounds.width / 2;
	});

	let widthSync = useTransform(
		distanceCalc,
		[-distance, 0, distance],
		[40, magnification, 40]
	);

	let width = useSpring(widthSync, {
		mass: 0.1,
		stiffness: 150,
		damping: 12,
	});

	return (
		<motion.div
			ref={ref}
			style={{ width }}
			className={cn(
				"flex aspect-square cursor-pointer items-center justify-center rounded-full",
				className
			)}
			{...props}
		>
			{children}
		</motion.div>
	);
};

DockIcon.displayName = "DockIcon";

export { Dock, DockIcon, dockVariants };

================
File: components/mode-toggle.jsx
================
"use client";

import { Moon, Sun } from "lucide-react";
import { useTheme } from "next-themes";
import { Button } from "@/components/ui/button";
import {
	TooltipProvider,
	Tooltip,
	TooltipTrigger,
	TooltipContent,
} from "@/components/ui/tooltip";

export default function ModeToggle() {
	const { theme, setTheme } = useTheme();

	return (
		<TooltipProvider>
			<Tooltip>
				<TooltipTrigger asChild>
					<Button
						variant="ghost"
						size="icon"
						onClick={() =>
							setTheme(theme === "dark" ? "light" : "dark")
						}
					>
						<Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
						<Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
						<span className="sr-only">Toggle theme</span>
					</Button>
				</TooltipTrigger>
				<TooltipContent>
					<p>Toggle theme</p>
				</TooltipContent>
			</Tooltip>
		</TooltipProvider>
	);
}

================
File: components/nav-actions.jsx
================
import { UserButton } from "@clerk/nextjs";
import ModeToggle from "./mode-toggle";

export function NavActions() {
	return (
		<div className="flex items-center gap-2 text-sm">
			<ModeToggle />
			<UserButton />
		</div>
	);
}

================
File: components/nav-favorites.jsx
================
"use client"

import {
  ArrowUpRight,
  Link,
  MoreHorizontal,
  StarOff,
  Trash2,
} from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function NavFavorites({
  favorites
}) {
  const { isMobile } = useSidebar()

  return (
    (<SidebarGroup className="group-data-[collapsible=icon]:hidden">
      <SidebarGroupLabel>Favorites</SidebarGroupLabel>
      <SidebarMenu>
        {favorites.map((item) => (
          <SidebarMenuItem key={item.name}>
            <SidebarMenuButton asChild>
              <a href={item.url} title={item.name}>
                <span>{item.emoji}</span>
                <span>{item.name}</span>
              </a>
            </SidebarMenuButton>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <SidebarMenuAction showOnHover>
                  <MoreHorizontal />
                  <span className="sr-only">More</span>
                </SidebarMenuAction>
              </DropdownMenuTrigger>
              <DropdownMenuContent
                className="w-56 rounded-lg"
                side={isMobile ? "bottom" : "right"}
                align={isMobile ? "end" : "start"}>
                <DropdownMenuItem>
                  <StarOff className="text-muted-foreground" />
                  <span>Remove from Favorites</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Link className="text-muted-foreground" />
                  <span>Copy Link</span>
                </DropdownMenuItem>
                <DropdownMenuItem>
                  <ArrowUpRight className="text-muted-foreground" />
                  <span>Open in New Tab</span>
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem>
                  <Trash2 className="text-muted-foreground" />
                  <span>Delete</span>
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </SidebarMenuItem>
        ))}
        <SidebarMenuItem>
          <SidebarMenuButton className="text-sidebar-foreground/70">
            <MoreHorizontal />
            <span>More</span>
          </SidebarMenuButton>
        </SidebarMenuItem>
      </SidebarMenu>
    </SidebarGroup>)
  );
}

================
File: components/nav-main.jsx
================
"use client";
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

export function NavMain({
  items
}) {
  return (
    (<SidebarMenu>
      {items.map((item) => (
        <SidebarMenuItem key={item.title}>
          <SidebarMenuButton asChild isActive={item.isActive}>
            <a href={item.url}>
              <item.icon />
              <span>{item.title}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>)
  );
}

================
File: components/nav-secondary.jsx
================
import React from "react"

import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarMenu,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

export function NavSecondary({
  items,
  ...props
}) {
  return (
    (<SidebarGroup {...props}>
      <SidebarGroupContent>
        <SidebarMenu>
          {items.map((item) => (
            <SidebarMenuItem key={item.title}>
              <SidebarMenuButton asChild>
                <a href={item.url}>
                  <item.icon />
                  <span>{item.title}</span>
                </a>
              </SidebarMenuButton>
              {item.badge && <SidebarMenuBadge>{item.badge}</SidebarMenuBadge>}
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>)
  );
}

================
File: components/nav-workspaces.jsx
================
import { ChevronRight, MoreHorizontal, Plus } from "lucide-react"

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible"
import {
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar"

export function NavWorkspaces({
  workspaces
}) {
  return (
    (<SidebarGroup>
      <SidebarGroupLabel>Workspaces</SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {workspaces.map((workspace) => (
            <Collapsible key={workspace.name}>
              <SidebarMenuItem>
                <SidebarMenuButton asChild>
                  <a href="#">
                    <span>{workspace.emoji}</span>
                    <span>{workspace.name}</span>
                  </a>
                </SidebarMenuButton>
                <CollapsibleTrigger asChild>
                  <SidebarMenuAction
                    className="left-2 bg-sidebar-accent text-sidebar-accent-foreground data-[state=open]:rotate-90"
                    showOnHover>
                    <ChevronRight />
                  </SidebarMenuAction>
                </CollapsibleTrigger>
                <SidebarMenuAction showOnHover>
                  <Plus />
                </SidebarMenuAction>
                <CollapsibleContent>
                  <SidebarMenuSub>
                    {workspace.pages.map((page) => (
                      <SidebarMenuSubItem key={page.name}>
                        <SidebarMenuSubButton asChild>
                          <a href="#">
                            <span>{page.emoji}</span>
                            <span>{page.name}</span>
                          </a>
                        </SidebarMenuSubButton>
                      </SidebarMenuSubItem>
                    ))}
                  </SidebarMenuSub>
                </CollapsibleContent>
              </SidebarMenuItem>
            </Collapsible>
          ))}
          <SidebarMenuItem>
            <SidebarMenuButton className="text-sidebar-foreground/70">
              <MoreHorizontal />
              <span>More</span>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>)
  );
}

================
File: components/right-app-sidebar.jsx
================
import { ScrollArea } from "./ui/scroll-area";
import { Copyright } from "./copyright";
import { TemplateSection } from "./sections/template";
import { SettingsTab } from "./settings-tab";
import { useMediaQuery } from "@/hooks/use-media-query";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { PaintBrush, Sliders } from "@phosphor-icons/react";

export const RightSidebar = () => {
	const isDesktop = useMediaQuery("(min-width: 1024px)");

	const Content = (
		<>
			<div className="p-6 @container/right">
				<Tabs defaultValue="template" className="h-full space-y-6">
					<TabsList className="w-full grid grid-cols-2">
						<TabsTrigger
							value="template"
							className="flex items-center gap-2"
						>
							<PaintBrush className="h-4 w-4" />
							Template
						</TabsTrigger>
						<TabsTrigger
							value="settings"
							className="flex items-center gap-2"
						>
							<Sliders className="h-4 w-4" />
							Settings
						</TabsTrigger>
					</TabsList>
					<TabsContent value="template" className="mt-0 border-0">
						<TemplateSection />
					</TabsContent>
					<TabsContent value="settings" className="mt-0 border-0">
						<SettingsTab />
					</TabsContent>
				</Tabs>
				{/* <div className="mt-6">
					<Copyright className="text-center" />
				</div> */}
			</div>
		</>
	);

	if (isDesktop) {
		return (
			<div className="flex h-screen bg-secondary-accent/30">
				<div className="flex-1 overflow-y-auto">{Content}</div>
			</div>
		);
	}

	return (
		<div className="flex h-screen bg-secondary-accent/30">
			<ScrollArea className="flex-1 scrollbar-hide">{Content}</ScrollArea>
		</div>
	);
};

================
File: components/section-icon.jsx
================
import {
	Code,
	DiamondsFour,
	DownloadSimple,
	Info,
	Layout,
	Note,
	Palette,
	ReadCvLogo,
	ShareFat,
	TextT,
	Translate,
	TrendUp,
} from "@phosphor-icons/react";
import { Button } from "./ui/button";
import { Tooltip } from "./ui/tooltip";

const getSectionIcon = (id, props = {}) => {
	switch (id) {
		// Left Sidebar
		case "notes": {
			return <Note size={18} {...props} />;
		}
		case "template": {
			return <DiamondsFour size={18} {...props} />;
		}
		case "layout": {
			return <Layout size={18} {...props} />;
		}
		case "typography": {
			return <TextT size={18} {...props} />;
		}
		case "theme": {
			return <Palette size={18} {...props} />;
		}
		case "css": {
			return <Code size={18} {...props} />;
		}
		case "page": {
			return <ReadCvLogo size={18} {...props} />;
		}
		case "locale": {
			return <Translate size={18} {...props} />;
		}
		case "sharing": {
			return <ShareFat size={18} {...props} />;
		}
		case "statistics": {
			return <TrendUp size={18} {...props} />;
		}
		case "export": {
			return <DownloadSimple size={18} {...props} />;
		}
		case "information": {
			return <Info size={18} {...props} />;
		}

		default: {
			return null;
		}
	}
};

export const SectionIcon = ({ id, name, icon, size = 14, ...props }) => (
	<Tooltip side="left" content={name}>
		<Button
			size="icon"
			variant="ghost"
			className="size-8 rounded-full"
			{...props}
		>
			{icon ?? getSectionIcon(id, { size })}
		</Button>
	</Tooltip>
);

================
File: components/sections/basics.jsx
================
"use client";

import { basicsSchema, defaultBasics } from "@/schema/sections/basics";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { PictureSection } from "./picture/section";
import { useDispatch } from "react-redux";
import { useSelector } from "react-redux";
import { useParams } from "next/navigation";
import { updateBasicsInDatabase } from "@/redux/thunks/basics";
import { useEffect, useState } from "react";
import { RichInput } from "@/components/ui/rich-input";
import { logger } from "@/lib/utils";
import { Spinner } from "../ui/Spinner";
import { toast } from "sonner";

export const BasicsSection = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [loading, setLoading] = useState(false);
	const {
		handleSubmit,
		control,
		setValue,
		formState: { errors, defaultValues },
	} = useForm({
		resolver: zodResolver(basicsSchema),
		defaultValues: portfolio?.basics || defaultBasics,
	});

	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
			logger.info("Form default values:", defaultValues);
		}
	}, [errors, defaultValues]);

	const onSubmit = async (data) => {
		setLoading(true);
		try {
			await dispatch(
				updateBasicsInDatabase({ portfolioId, ...data })
			).unwrap();
			logger.info("User basics updated");
			toast.success("Basics information updated")
		} catch (error) {
			logger.error("Error updating basics:", error);
		} finally {
			setLoading(false);
		}
	};

	return (
		<section id="basics" className="grid gap-y-6">
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">Basics</h2>
				</div>
			</header>

			<main className="flex flex-col w-full">
				<form onSubmit={handleSubmit(onSubmit)} className="space-y-3">
					<div className="sm:col-span-2">
						<PictureSection control={control} setValue={setValue} />
					</div>
					<div className="grid md:grid-cols-2 gap-2 space-y-3 md:space-y-0">
						<Controller
							name="name"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label htmlFor="name">Full Name</label>
									<Input
										id="name"
										{...field}
										placeholder="Your full name"
									/>
									{fieldState.error && (
										<p className="text-red-500 text-sm">
											{fieldState.error.message}
										</p>
									)}
								</div>
							)}
						/>
						<Controller
							name="headline"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label htmlFor="headline">Headline</label>
									<Input
										id="headline"
										{...field}
										placeholder="Professional headline"
									/>
									{fieldState.error && (
										<p className="text-red-500 text-sm">
											{fieldState.error.message}
										</p>
									)}
								</div>
							)}
						/>
						<Controller
							name="email"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label htmlFor="email">Email</label>
									<Input
										id="email"
										{...field}
										placeholder="your.email@example.com"
									/>
									{fieldState.error && (
										<p className="text-red-500 text-sm">
											{fieldState.error.message}
										</p>
									)}
								</div>
							)}
						/>
						<Controller
							name="phone"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label htmlFor="phone">Phone</label>
									<Input
										id="phone"
										{...field}
										type="tel"
										placeholder="+1 (555) 123-4567"
									/>
									{fieldState.error && (
										<p className="text-red-500 text-sm">
											{fieldState.error.message}
										</p>
									)}
								</div>
							)}
						/>
						<Controller
							name="location"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label htmlFor="location">Location</label>
									<Input
										id="location"
										{...field}
										placeholder="City, Country"
									/>
									{fieldState.error && (
										<p className="text-red-500 text-sm">
											{fieldState.error.message}
										</p>
									)}
								</div>
							)}
						/>
						<Controller
							name="url"
							control={control}
							render={({ field, fieldState }) => (
								<div>
									<label htmlFor="url">Website</label>
									<Input
										id="url"
										{...field}
										placeholder="https://yourwebsite.com"
										type="url"
									/>
									{fieldState.error && (
										<p className="text-red-500 text-sm">
											{fieldState.error.message}
										</p>
									)}
								</div>
							)}
						/>
					</div>
					<Controller
						name="summary"
						control={control}
						render={({ field, fieldState }) => (
							<div>
								<label>Summary</label>
								<RichInput
									{...field}
									content={field.value}
									onChange={(value) => field.onChange(value)}
								/>
								{fieldState.error && (
									<small className="text-red-500 opacity-75">
										{fieldState.error?.message}
									</small>
								)}
							</div>
						)}
					/>
					<Controller
						name="about"
						control={control}
						render={({ field, fieldState }) => (
							<div>
								<label>About</label>
								<RichInput
									{...field}
									content={field.value}
									onChange={(value) => field.onChange(value)}
								/>
								{fieldState.error && (
									<small className="text-red-500 opacity-75">
										{fieldState.error?.message}
									</small>
								)}
							</div>
						)}
					/>

					<Button
						type="submit"
						className="w-full relative"
						disabled={loading}
					>
						{loading ? (
							<>
								<Spinner className="mr-2" />
								Saving...
							</>
						) : (
							"Save"
						)}
					</Button>
				</form>
			</main>
		</section>
	);
};

================
File: components/sections/certification.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { certificationSchema, defaultCertification } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addCertificationInDatabase,
	removeCertificationFromDatabase,
	updateCertificationnInDatabase,
} from "@/redux/thunks/certifications";
import { CertificationDialog } from "@/components/dialogs/certification-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Certification = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentCertification, setCurrentCertification] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(certificationSchema),
		defaultValues: defaultCertification,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.certifications;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultCertification, id: createId() });
		setCurrentCertification(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (certification) => {
		logger.info("Update certification: ", certification);
		reset(certification);
		setCurrentCertification(certification);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addCertificationInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeCertificationFromDatabase({
				certificationId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateCertificationnInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"certification"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">
						Certification
					</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<CertificationDialog
					portfolioId={portfolioId}
					form={form}
					currentCertification={currentCertification}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.name}
							description={item.date}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/education.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultEducation, educationSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addEducationInDatabase,
	removeEducationFromDatabase,
	updateEducationInDatabase,
} from "@/redux/thunks/educations";
import { EducationDialog } from "@/components/dialogs/education-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Education = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentEducation, setCurrentEducation] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(educationSchema),
		defaultValues: defaultEducation,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.educations;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultEducation, id: createId() });
		setCurrentEducation(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (education) => {
		reset(education);
		setCurrentEducation(education);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addEducationInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeEducationFromDatabase({
				educationId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateEducationInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"education"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">
						Education
					</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<EducationDialog
					portfolioId={portfolioId}
					form={form}
					currentEducation={currentEducation}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.institution}
							description={item.date}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/experience.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultExperience, experienceSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { ExperienceDialog } from "@/components/dialogs/experience-dialog";
import {
	addExperienceInDatabase,
	removeExperienceFromDatabase,
	updateExperienceInDatabase,
} from "@/redux/thunks/experience";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Experience = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentExperience, setCurrentExperience] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(experienceSchema),
		defaultValues: defaultExperience,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.experiences;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultExperience, id: createId() });
		setCurrentExperience(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (experience) => {
		logger.info("Update experience: ", experience);
		reset(experience);
		setCurrentExperience(experience);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addExperienceInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		patch(
			removeExperienceFromDatabase({
				experienceId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateExperienceInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"experience"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">
						Experience
					</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<ExperienceDialog
					portfolioId={portfolioId}
					form={form}
					currentExperience={currentExperience}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.company}
							description={item.date}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/hackathon.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultHackathon, hackathonSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addHackathon,
	removeHackathon,
	toggleHackathonVisibility,
} from "@/redux/features/portfolioSlice";
import {
	addHackathonInDatabase,
	removeHackathonFromDatabase,
	updateHackathonInDatabase,
} from "@/redux/thunks/hackathon";
import { HackathonDialog } from "@/components/dialogs/hackathon-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Hackathon = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentHackathon, setCurrentHackathon] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(hackathonSchema),
		defaultValues: defaultHackathon,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.hackathons;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultHackathon, id: createId() });
		setCurrentHackathon(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (hackathon) => {
		logger.info("Update hackathon: ", hackathon);
		reset(hackathon);
		setCurrentHackathon(hackathon);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addHackathonInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeHackathonFromDatabase({
				hackathonId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateHackathonInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"hackathon"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">
						Hackathon
					</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<HackathonDialog
					portfolioId={portfolioId}
					form={form}
					currentHackathon={currentHackathon}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.name}
							description={item.date}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/picture/section.jsx
================
import { Trash, UploadSimple } from "@phosphor-icons/react";
import { Avatar, AvatarImage } from "@/components/ui/avatar";
import { Label } from "@/components/ui/label";
import { Controller } from "react-hook-form";
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { createId } from "@paralleldrive/cuid2";
import { toast } from "sonner";
import { logger } from "@/lib/utils";

export const PictureSection = ({
	control,
	setValue,
	name = "picture",
	id = createId(),
}) => {
	const [localPictureUrl, setLocalPictureUrl] = useState("");

	const onSelectImage = async (event) => {
		try {
			// Check if files exist and at least one file is selected
			if (!event.target.files || event.target.files.length === 0) {
				throw new Error("No file selected.");
			}

			// Extract the selected file
			const file = event.target.files[0];

			// Validate file type (optional, add based on your requirements)
			if (!file.type.startsWith("image/")) {
				throw new Error("Selected file is not an image.");
			}

			// Prepare headers and body for the upload request
			const headers = {
				"Content-Type": file.type || "application/octet-stream",
				"x-vercel-filename": file.name || `image-${Date.now()}.png`,
			};

			// Send the file to the server
			const response = await fetch("/api/file-upload", {
				method: "POST",
				headers,
				body: file,
			});

			// Check if the upload was successful
			if (!response.ok) {
				throw new Error(`File upload failed: ${response.statusText}`);
			}

			// Extract the response JSON
			const { blob } = await response.json();

			// Update local state and form value
			if (blob.url) {
				setLocalPictureUrl(blob.url);
				setValue(name, blob.url);
			} else {
				throw new Error("File URL not returned from the server.");
			}
		} catch (error) {
			// Handle and log any errors
			logger.error("Error during image upload:", error);
			toast.error(
				error.message ||
					"An unexpected error occurred while uploading the image."
			);
		}
	};

	const onAvatarClick = () => {
		if (localPictureUrl) {
			setLocalPictureUrl("");
			setValue(name, ""); // Clear the form value.
		} else {
			document.getElementById(id)?.click();
		}
	};

	return (
		<Controller
			name={name}
			control={control}
			render={({ field, fieldState }) => (
				<div className="flex items-center gap-x-4">
					<div
						className="group relative cursor-pointer"
						onClick={onAvatarClick}
					>
						<Avatar className="size-14 bg-secondary">
							<AvatarImage src={localPictureUrl || field.value} />
						</Avatar>
						<div className="pointer-events-none absolute inset-0 flex items-center justify-center rounded-full bg-background/30 opacity-0 transition-opacity group-hover:opacity-100">
							{localPictureUrl || field.value ? (
								<Trash size={16} weight="bold" />
							) : (
								<UploadSimple size={16} weight="bold" />
							)}
						</div>
					</div>
					<div className="flex w-full flex-col gap-y-1.5 mb-3">
						<Label htmlFor={id}>{`Picture/Logo`}</Label>
						<div className="flex items-center gap-x-2">
							<input
								id={id}
								type="file"
								onChange={onSelectImage}
								hidden
							/>
							<Input
								id={`${id}-url`}
								placeholder="https://..."
								value={localPictureUrl || field.value}
								onChange={(e) => {
									const url = e.target.value;
									setLocalPictureUrl(url);
									setValue(name, url);
								}}
								className="border rounded px-2 py-1"
								{...field}
							/>
							{fieldState.error && (
								<p className="text-red-500 text-sm">
									{fieldState.error.message}
								</p>
							)}
						</div>
					</div>
				</div>
			)}
		/>
	);
};

================
File: components/sections/picture/uploader.jsx
================
"use client";

import { useRef, useState } from "react";
import { toast } from "sonner";
import { logger } from "@/lib/utils";

export default function Uploader({ defaultValue, defaultName, setValue }) {
	let name = defaultName || "image";
	const [media, setMedia] = useState(defaultValue || "");
	const inputRef = useRef(null);
	const [dragActive, setDragActive] = useState(false);

	const handleUpload = async (file) => {
		if (file) {
			if (file.size / 1024 / 1024 > 50) {
				toast.error("File size too big (max 50MB)");
				return;
			}

			if (
				!file.type.startsWith("image/") &&
				!file.type.startsWith("video/")
			) {
				toast.error("Invalid file type (must be an image or video)");
				return;
			}
			logger.info("File type:", file.type);

			if (file.type.startsWith("image/")) {
				name = "image";
			} else if (file.type.startsWith("video/")) {
				name = "video";
			}

			const loadingToast = toast.loading("Uploading file...");

			try {
				const response = await fetch("/api/file-upload", {
					method: "POST",
					body: file,
				});

				if (!response.ok) {
					throw new Error("Failed to upload file");
				}

				const { blob } = await response.json();
				setMedia(blob.url);
				setValue(name, blob.url);
				toast.dismiss(loadingToast);
				toast.success("File uploaded successfully");
				logger.info("File uploaded: ", name, blob.url);
			} catch (error) {
				logger.error("Upload error:", error);
				toast.dismiss(loadingToast);
				toast.error("Failed to upload file");
			}
		}
	};

	return (
		<div>
			<label
				htmlFor={`${name}-upload`}
				className={
					"group relative mt-2 flex cursor-pointer flex-col items-center justify-center rounded-md border border-gray-300 bg-white shadow-sm transition-all hover:bg-gray-50 aspect-video max-w-screen-md"
				}
			>
				<div
					className="absolute z-[5] h-full w-full rounded-md"
					onDragOver={(e) => {
						e.preventDefault();
						e.stopPropagation();
						setDragActive(true);
					}}
					onDragEnter={(e) => {
						e.preventDefault();
						e.stopPropagation();
						setDragActive(true);
					}}
					onDragLeave={(e) => {
						e.preventDefault();
						e.stopPropagation();
						setDragActive(false);
					}}
					onDrop={(e) => {
						e.preventDefault();
						e.stopPropagation();
						setDragActive(false);

						const file =
							e.dataTransfer.files && e.dataTransfer.files[0];
						inputRef.current.files = e.dataTransfer.files; // set input file to dropped file
						handleUpload(file);
					}}
				/>
				<div
					className={`${
						dragActive ? "border-2 border-black" : ""
					} absolute z-[3] flex h-full w-full flex-col items-center justify-center rounded-md px-10 transition-all ${
						media
							? "bg-white/80 opacity-0 hover:opacity-100 hover:backdrop-blur-md"
							: "bg-white opacity-100 hover:bg-gray-50"
					}`}
				>
					<svg
						className={`${
							dragActive ? "scale-110" : "scale-100"
						} h-7 w-7 text-gray-500 transition-all duration-75 group-hover:scale-110 group-active:scale-95`}
						xmlns="http://www.w3.org/2000/svg"
						width="24"
						height="24"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						strokeWidth="2"
						strokeLinecap="round"
						strokeLinejoin="round"
					>
						<path d="M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"></path>
						<path d="M12 12v9"></path>
						<path d="m16 16-4-4-4 4"></path>
					</svg>
					<p className="mt-2 text-center text-sm text-gray-500">
						Drag and drop or click to upload.
					</p>
					<p className="mt-2 text-center text-sm text-gray-500">
						Max file size: 50MB
					</p>
					<span className="sr-only">Media upload</span>
				</div>
				{media &&
					(name === "video" ? (
						<video
							src={media}
							controls
							className="h-full w-full rounded-md object-cover"
						/>
					) : (
						<img
							src={media}
							alt="Preview"
							className="h-full w-full rounded-md object-cover"
						/>
					))}
			</label>
			<div className="mt-1 flex rounded-md shadow-sm">
				<input
					id={`${name}-upload`}
					ref={inputRef}
					name={name}
					type="file"
					accept="image/*,video/*"
					className="sr-only"
					onChange={(e) => {
						const file =
							e.currentTarget.files && e.currentTarget.files[0];
						handleUpload(file);
					}}
				/>
			</div>
		</div>
	);
}

================
File: components/sections/profile.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import {
	addProfileInDatabase,
	removeProfileFromDatabase,
	updateProfileInDatabase,
} from "@/redux/thunks/profile";
import { ProfilesDialog } from "@/components/dialogs/profile-dialog";
import { useForm } from "react-hook-form";
import { defaultProfile } from "@/schema/sections";
import { profileSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import { createId } from "@paralleldrive/cuid2";
import { logger } from "@/lib/utils";
import { useParams } from "next/navigation";

export const Profile = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentProfile, setCurrentProfile] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(profileSchema),
		defaultValues: defaultProfile,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.profiles;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultProfile, id: createId() });
		setCurrentProfile(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (profile) => {
		reset(profile);
		setCurrentProfile(profile);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addProfileInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeProfileFromDatabase({ portfolioId, profileId: item.id })
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateProfileInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"profile"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">Profile</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<ProfilesDialog
					portfolioId={portfolioId}
					form={form}
					currentProfile={currentProfile}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.network}
							description={item.username}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/project.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultProject, projectSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addProjectInDatabase,
	removeProjectFromDatabase,
	updateProjectInDatabase,
} from "@/redux/thunks/project";
import { ProjectDialog } from "@/components/dialogs/project-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Project = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentProject, setCurrentProject] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(projectSchema),
		defaultValues: { ...defaultProject, id: createId() },
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.projects;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultProject, id: createId() });
		setCurrentProject(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (project) => {
		reset(project);
		setCurrentProject(project);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addProjectInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeProjectFromDatabase({
				projectId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateProjectInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"project"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">Project</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<ProjectDialog
					portfolioId={portfolioId}
					form={form}
					currentProject={currentProject}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.name}
							description={item.date}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/shared/section-base.jsx
================
import {
	closestCenter,
	DndContext,
	DragEndEvent,
	KeyboardSensor,
	PointerSensor,
	useSensor,
	useSensors,
} from "@dnd-kit/core";
import { restrictToParentElement } from "@dnd-kit/modifiers";
import {
	// arrayMove,
	SortableContext,
	sortableKeyboardCoordinates,
	verticalListSortingStrategy,
} from "@dnd-kit/sortable";
import { t } from "@lingui/macro";
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useDialog } from "@/client/stores/dialog";
import { useSelector, useDispatch } from "react-redux";
import { RootState, AppDispatch } from "@/redux/store";
import {
	// addItem,
	// updateItem,
	removeItem,
	toggleItemVisibility,
	reorderItems,
} from "@/redux/store";
import { SectionListItem } from "./section-list-item";
import { SectionOptions } from "./section-options";

export const SectionBase = ({ id, title, description }) => {
	const { open } = useDialog(id);
	const dispatch = useDispatch();

	// Access the specific section from the Redux state
	const section = useSelector((state) => state.portfolio[id]);

	// Configure sensors for drag-and-drop
	const sensors = useSensors(
		useSensor(PointerSensor),
		useSensor(KeyboardSensor, {
			coordinateGetter: sortableKeyboardCoordinates,
		})
	);

	if (!section) return null;

	// Handle drag-and-drop sorting
	const onDragEnd = (event) => {
		const { active, over } = event;

		if (!over) return;

		if (active.id !== over.id) {
			const oldIndex = section.findIndex((item) => item.id === active.id);
			const newIndex = section.findIndex((item) => item.id === over.id);

			dispatch(
				reorderItems({
					section: id,
					oldIndex,
					newIndex,
				})
			);
		}
	};

	// CRUD handlers
	const onCreate = () => open("create", { id });
	const onUpdate = (item) => open("update", { id, item });
	const onDuplicate = (item) => open("duplicate", { id, item });
	const onDelete = (item) =>
		dispatch(removeItem({ section: id, id: item.id }));
	const onToggleVisibility = (itemId) =>
		dispatch(toggleItemVisibility({ section: id, id: itemId }));

	return (
		<motion.section
			id={id}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">{id}</h2>
				</div>
				<div className="flex items-center gap-x-2">
					<SectionOptions id={id} />
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				{section.length === 0 && (
					<Button
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
						onClick={onCreate}
					>
						<Plus size={14} />
						<span className="font-medium">
							{t("Add a new item", {
								context:
									"For example, add a new work experience or profile.",
							})}
						</span>
					</Button>
				)}

				<DndContext
					sensors={sensors}
					collisionDetection={closestCenter}
					modifiers={[restrictToParentElement]}
					onDragEnd={onDragEnd}
				>
					<SortableContext
						items={section}
						strategy={verticalListSortingStrategy}
					>
						<AnimatePresence>
							{section.map((item, index) => (
								<SectionListItem
									key={item.id}
									id={item.id}
									visible={item.visible}
									title={title(item)}
									description={description?.(item)}
									onUpdate={() => onUpdate(item)}
									onDelete={() => onDelete(item)}
									onDuplicate={() => onDuplicate(item)}
									onToggleVisibility={() =>
										onToggleVisibility(item.id)
									}
								/>
							))}
						</AnimatePresence>
					</SortableContext>
				</DndContext>
			</main>

			{section.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={onCreate}
					>
						<Plus />
						<span>
							{t("Add a new item", {
								context:
									"For example, add a new work experience or profile.",
							})}
						</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/shared/section-list-item.jsx
================
import { useSortable } from "@dnd-kit/sortable";
import { CSS } from "@dnd-kit/utilities";
import {
	CopySimple,
	DotsSixVertical,
	PencilSimple,
	TrashSimple,
} from "@phosphor-icons/react";
import {
	ContextMenu,
	ContextMenuCheckboxItem,
	ContextMenuContent,
	ContextMenuItem,
	ContextMenuTrigger,
} from "@/components/ui/context-menu";
import { cn } from "@/lib/utils";
import { motion } from "framer-motion";

export const SectionListItem = ({
	id,
	title,
	description,
	visible = true,
	onUpdate,
	onDuplicate,
	onDelete,
	onToggleVisibility,
}) => {
	const {
		setNodeRef,
		transform,
		transition,
		attributes,
		listeners,
		isDragging,
	} = useSortable({
		id,
	});

	const style = {
		transform: CSS.Transform.toString(transform),
		opacity: isDragging ? 0.5 : undefined,
		zIndex: isDragging ? 100 : undefined,
		transition,
	};

	return (
		<motion.section
			ref={setNodeRef}
			initial={{ opacity: 0, y: -50 }}
			animate={{ opacity: 1, y: 0 }}
			exit={{ opacity: 0, x: -50 }}
			className="border-x border-t bg-secondary/10 first-of-type:rounded-t last-of-type:rounded-b last-of-type:border-b"
		>
			<div style={style} className="flex transition-opacity">
				{/* Drag Handle */}
				<div
					{...listeners}
					{...attributes}
					className={cn(
						"flex w-5 cursor-move items-center justify-center",
						!isDragging && "hover:bg-secondary"
					)}
				>
					<DotsSixVertical weight="bold" size={12} />
				</div>

				{/* List Item */}
				<ContextMenu>
					<ContextMenuTrigger asChild>
						<div
							className={cn(
								"flex-1 cursor-context-menu p-4 hover:bg-secondary-accent",
								!visible && "opacity-50"
							)}
							onClick={onUpdate}
						>
							<h4 className="font-medium leading-relaxed">
								{title}
							</h4>
							{description && (
								<p className="text-xs leading-relaxed opacity-50">
									{description}
								</p>
							)}
						</div>
					</ContextMenuTrigger>
					<ContextMenuContent>
						<ContextMenuCheckboxItem
							checked={visible}
							onCheckedChange={onToggleVisibility}
						>
							<span className="-ml-0.5">{`Visible`}</span>
						</ContextMenuCheckboxItem>
						<ContextMenuItem onClick={onUpdate}>
							<PencilSimple size={14} />
							<span className="ml-2">{`Edit`}</span>
						</ContextMenuItem>
						<ContextMenuItem onClick={onDuplicate}>
							<CopySimple size={14} />
							<span className="ml-2">{`Copy`}</span>
						</ContextMenuItem>
						<ContextMenuItem
							className="text-error"
							onClick={onDelete}
						>
							<TrashSimple size={14} />
							<span className="ml-2">{`Remove`}</span>
						</ContextMenuItem>
					</ContextMenuContent>
				</ContextMenu>
			</div>
		</motion.section>
	);
};

================
File: components/sections/shared/section-options.jsx
================
import {
	ArrowCounterClockwise,
	Broom,
	Columns,
	Eye,
	EyeSlash,
	List,
	PencilSimple,
	Plus,
	TrashSimple,
} from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import {
	DropdownMenu,
	DropdownMenuCheckboxItem,
	DropdownMenuContent,
	DropdownMenuGroup,
	DropdownMenuItem,
	DropdownMenuRadioGroup,
	DropdownMenuRadioItem,
	DropdownMenuSeparator,
	DropdownMenuSub,
	DropdownMenuSubContent,
	DropdownMenuSubTrigger,
	DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useMemo } from "react";
import { useDispatch, useSelector } from "react-redux"; // Import from react-redux
import { logger } from "@/lib/utils";

export const SectionOptions = ({ id }) => {
	const dispatch = useDispatch(); // Get dispatch from Redux store

	const section = useSelector((state) => state.portfolio.profiles); // Get section from Redux store

	const hasItems = useMemo(() => "items" in section, [section]);
	const isCustomSection = useMemo(() => id.startsWith("custom"), [id]);

	const onCreate = () => {
		// This will open the dialog (assuming your dialog is managed in the store)
		dispatch({ type: "dialog/open", payload: { id, type: "create" } });
	};

	const toggleSeperateLinks = (checked) => {
		logger.info("Separate link");
	};

	const toggleVisibility = () => {
		logger.info("Toggle visibility");
	};

	const onResetName = () => {
		logger.info("Reset name");
	};

	const onChangeColumns = (value) => {
		logger.info("Change column");
		logger.info(value);
	};

	const onResetItems = () => {
		logger.info("Reset");
	};

	const onRemove = () => {
		logger.info("Remove section Item");
	};

	return (
		<DropdownMenu>
			<DropdownMenuTrigger asChild>
				<Button variant="ghost" size="icon">
					<List weight="bold" />
				</Button>
			</DropdownMenuTrigger>
			<DropdownMenuContent className="w-48">
				{hasItems && (
					<>
						<DropdownMenuItem onClick={onCreate}>
							<Plus />
							<span className="ml-2">{`Add a new item`}</span>
						</DropdownMenuItem>
						<DropdownMenuCheckboxItem
							checked={section.separateLinks}
							onCheckedChange={toggleSeperateLinks}
						>
							<span className="ml-0">{`Separate Links`}</span>
						</DropdownMenuCheckboxItem>
						<DropdownMenuSeparator />
					</>
				)}

				<DropdownMenuGroup>
					<DropdownMenuItem onClick={toggleVisibility}>
						{section.visible ? <Eye /> : <EyeSlash />}
						<span className="ml-2">
							{section.visible ? `Hide` : `Show`}
						</span>
					</DropdownMenuItem>
					<DropdownMenuSub>
						<DropdownMenuSubTrigger>
							<PencilSimple />
							<span className="ml-2">{`Rename`}</span>
						</DropdownMenuSubTrigger>
						<DropdownMenuSubContent>
							<div className="relative col-span-2">
								<Input
									id={`sections.${id}.name`}
									value={section.name}
									onChange={(event) => {
										logger.info(event);
									}}
								/>
								<Button
									size="icon"
									variant="link"
									className="absolute inset-y-0 right-0"
									onClick={onResetName}
								>
									<ArrowCounterClockwise />
								</Button>
							</div>
						</DropdownMenuSubContent>
					</DropdownMenuSub>
					<DropdownMenuSub>
						<DropdownMenuSubTrigger>
							<Columns />
							<span className="ml-2">{`Columns`}</span>
						</DropdownMenuSubTrigger>
						<DropdownMenuSubContent>
							<DropdownMenuRadioGroup
								value={`${section.columns}`}
								onValueChange={onChangeColumns}
							>
								{Array.from({ length: 5 }, (_, i) => i + 1).map(
									(value) => (
										<DropdownMenuRadioItem
											key={value}
											value={`${value}`}
										>
											{value} {"Columns"}
										</DropdownMenuRadioItem>
									)
								)}
							</DropdownMenuRadioGroup>
						</DropdownMenuSubContent>
					</DropdownMenuSub>
				</DropdownMenuGroup>
				<DropdownMenuSeparator />
				<DropdownMenuItem disabled={!hasItems} onClick={onResetItems}>
					<Broom />
					<span className="ml-2">{`Reset`}</span>
				</DropdownMenuItem>
				<DropdownMenuSeparator />
				<DropdownMenuItem
					className="text-error"
					disabled={!isCustomSection}
					onClick={onRemove}
				>
					<TrashSimple />
					<span className="ml-2">{`Remove`}</span>
				</DropdownMenuItem>
			</DropdownMenuContent>
		</DropdownMenu>
	);
};

================
File: components/sections/skill.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultSkill, skillSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addSkillInDatabase,
	removeSkillFromDatabase,
	updateSkillnInDatabase,
} from "@/redux/thunks/skill";
import { SkillDialog } from "@/components/dialogs/skill-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Skill = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentSkill, setCurrentSkill] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(skillSchema),
		defaultValues: defaultSkill,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	// Log validation errors
	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	// Access the specific section from the Redux state
	const section = portfolio?.skills;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultSkill, id: createId() });
		setCurrentSkill(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (skill) => {
		logger.info("Update skill: ", skill);
		reset(skill);
		setCurrentSkill(skill);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(addSkillInDatabase({ ...item, id: createId(), portfolioId }));
	};
	const onDelete = (item) => {
		dispatch(
			removeSkillFromDatabase({
				skillId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateSkillnInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"skill"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">Skill</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<SkillDialog
					portfolioId={portfolioId}
					form={form}
					currentSkill={currentSkill}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.name}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/team.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultTeam, teamSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addTeamMemberInDatabase,
	removeTeamMemberFromDatabase,
	updateTeamMemberInDatabase,
} from "@/redux/thunks/team";
import { TeamDialog } from "@/components/dialogs/team-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Team = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentTeamMember, setCurrentTeamMember] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(teamSchema),
		defaultValues: defaultTeam,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	const section = portfolio?.teams;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultTeam, id: createId() });
		setCurrentTeamMember(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (teamMember) => {
		reset(teamMember);
		setCurrentTeamMember(teamMember);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addTeamMemberInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeTeamMemberFromDatabase({
				teamMemberId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateTeamMemberInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id="team"
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">Team</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<TeamDialog
					portfolioId={portfolioId}
					form={form}
					currentTeamMember={currentTeamMember}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">
							Add a new team member
						</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.name}
							description={item.role}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new team member</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/sections/template.jsx
================
"use client";

import { useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useParams } from "next/navigation";
import { cn, logger } from "@/lib/utils";
import Image from "next/image";
import { updatePortfolioInDatabase } from "@/redux/thunks/portfolio";
import { SectionIcon } from "../section-icon";
import { AspectRatio } from "../ui/aspect-ratio";
import { motion } from "framer-motion";
import { ScrollArea } from "../ui/scroll-area";
import { Switch } from "../ui/switch";
import { Label } from "../ui/label";
import { Globe, Eye, EyeSlash } from "@phosphor-icons/react";
import { Button } from "../ui/button";
import { Separator } from "../ui/separator";
import { toast } from "sonner";
import { Dialog, DialogContent } from "../ui/dialog";
import Pricing from "../homepage/pricing";
import {
	Tooltip,
	TooltipContent,
	TooltipProvider,
	TooltipTrigger,
} from "../ui/tooltip";
import { useOrganizationContext } from "@/context/OrganizationContext";

const templates = [
	{
		id: "default",
		name: "Default",
		preview: "/templates/default.png",
	},
	// Add more templates as needed
];

export function TemplateSection() {
	const { portfolioId } = useParams();
	const dispatch = useDispatch();
	const [showPricingDialog, setShowPricingDialog] = useState(false);
	const isSubscribed = useSelector(
		(state) => state.user.subscription?.status === "active"
	);

	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const {
		organization,
		hasActiveSubscription,
		hasReachedPortfolioLimit,
		canManagePortfolios,
	} = useOrganizationContext();

	logger.info("Current portfolio:", portfolio); // Debug log
	logger.info("Available templates:", templates); // Debug log

	const selectedTemplate = portfolio?.template || "default";
	logger.info("Selected template:", selectedTemplate); // Debug log

	const handleTemplateSelect = (templateId) => {
		if (!portfolio) return;

		// Check permissions only if in an organization context
		if (organization && !canManagePortfolios) {
			toast.error("You don't have permission to manage portfolios");
			return;
		}

		dispatch(
			updatePortfolioInDatabase({
				id: portfolio.id,
				data: { template: templateId },
			})
		);

		toast.success("Template updated successfully");
	};

	const toggleLiveStatus = async () => {
		if (!portfolio) return;

		// Organization-specific checks
		if (organization) {
			if (!canManagePortfolios) {
				toast.error("You don't have permission to manage portfolios");
				return;
			}

			if (!portfolio.isLive) {
				if (!hasActiveSubscription) {
					setShowPricingDialog(true);
					return;
				}

				if (hasReachedPortfolioLimit) {
					toast.error(
						"Portfolio limit reached. Please upgrade your plan."
					);
					setShowPricingDialog(true);
					return;
				}
			}
		} else {
			// Individual user checks
			if (!portfolio.isLive && !isSubscribed) {
				setShowPricingDialog(true);
				return;
			}
		}

		// If all checks pass, update the portfolio
		dispatch(
			updatePortfolioInDatabase({
				id: portfolio.id,
				data: { isLive: !portfolio.isLive },
			})
		);

		toast.success(
			portfolio.isLive
				? "Portfolio is now hidden"
				: "Portfolio is now live!"
		);
	};

	function copyToClipboard() {
		if (!portfolio.customDomain && !portfolio.slug) {
			toast.error("Portfolio slug not set");
			return;
		}
		const text = portfolio.customDomain
			? portfolio.customDomain
			: `${portfolio.slug}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`;

		try {
			// Modern clipboard API
			if (navigator.clipboard && window.isSecureContext) {
				navigator.clipboard
					.writeText(text)
					.then(() => {
						toast.success("Copied to clipboard");
					})
					.catch((err) => {
						toast.error("Failed to copy");
						logger.error("Copy failed", err);
					});
			} else {
				// Fallback method
				const textArea = document.createElement("textarea");
				textArea.value = text;

				textArea.style.position = "fixed";
				textArea.style.left = "-999999px";
				textArea.style.top = "-999999px";
				document.body.appendChild(textArea);

				textArea.focus();
				textArea.select();

				try {
					const successful = document.execCommand("copy");
					if (successful) {
						toast.success("Copied to clipboard");
					} else {
						toast.error("Copy failed");
					}
				} catch (err) {
					toast.error("Copy failed");
					logger.error("Unable to copy", err);
				}

				document.body.removeChild(textArea);
			}
		} catch (err) {
			toast.error("Copy failed");
			logger.error("Copy error", err);
		}
	}

	return (
		<>
			<section id="template" className="flex h-full flex-col gap-y-4">
				<div className="space-y-4">
					<div className="flex items-center justify-between">
						<div className="space-y-1">
							<Label>Live Status</Label>
							<div className="text-sm text-muted-foreground">
								{portfolio?.isLive ? (
									<span className="flex items-center gap-2">
										<Globe className="text-green-500" />
										Your portfolio is live
									</span>
								) : (
									<span className="flex items-center gap-2">
										<EyeSlash className="text-yellow-500" />
										Your portfolio is hidden
									</span>
								)}
							</div>
						</div>
						<TooltipProvider>
							<Tooltip>
								<TooltipTrigger>
									<Switch
										checked={portfolio?.isLive}
										onCheckedChange={toggleLiveStatus}
									/>
								</TooltipTrigger>
								<TooltipContent>
									<p>
										{portfolio?.isLive
											? "Take portfolio offline"
											: "Make portfolio live"}
									</p>
								</TooltipContent>
							</Tooltip>
						</TooltipProvider>
					</div>

					<div className="flex items-center gap-4">
						<Button
							variant="outline"
							size="sm"
							onClick={copyToClipboard}
						>
							<Globe className="mr-2 h-4 w-4" />
							Copy URL
						</Button>
					</div>
					<Separator />
				</div>

				<header className="flex shrink-0 items-center justify-between">
					<div className="flex items-center gap-x-4">
						<h2 className="line-clamp-1 text-2xl font-bold lg:text-3xl">
							Template
						</h2>
					</div>
				</header>

				<ScrollArea className="flex-1 -mx-6 px-6">
					<div className="grid grid-cols-2 gap-8 @lg/right:grid-cols-3 @2xl/right:grid-cols-4">
						{templates.map((template, index) => (
							<div key={template.id} className="w-full h-[280px]">
								<AspectRatio
									ratio={1 / 1.4142}
									className="h-full"
								>
									<motion.div
										initial={{ opacity: 0 }}
										animate={{
											opacity: 1,
											transition: { delay: index * 0.1 },
										}}
										whileTap={{
											scale: 0.98,
											transition: { duration: 0.1 },
										}}
										className={cn(
											"relative h-full w-full cursor-pointer rounded-sm ring-primary transition-all hover:ring-2",
											selectedTemplate === template.id &&
												"ring-2"
										)}
										onClick={() =>
											handleTemplateSelect(template.id)
										}
									>
										<Image
											src={template.preview}
											alt={template.name}
											fill
											className="object-cover rounded-sm"
											sizes="(max-width: 768px) 50vw, (max-width: 1200px) 33vw, 25vw"
											priority={index < 4}
										/>

										<div className="absolute inset-x-0 bottom-0 h-32 w-full bg-gradient-to-b from-transparent to-background/80">
											<div className="absolute inset-x-0 bottom-2 flex flex-col items-center gap-1">
												<p className="text-center font-bold capitalize text-primary">
													{template.name}
												</p>
											</div>
										</div>
									</motion.div>
								</AspectRatio>
							</div>
						))}
					</div>
				</ScrollArea>
			</section>

			<Dialog
				open={showPricingDialog}
				onOpenChange={setShowPricingDialog}
			>
				<DialogContent className="max-w-5xl">
					<Pricing
						isDialog={true}
						returnUrl={window.location.href}
						isOrganizationAccount={organization}
					/>
				</DialogContent>
			</Dialog>
		</>
	);
}

================
File: components/sections/testimonial.jsx
================
import { Plus } from "@phosphor-icons/react";
import { Button } from "@/components/ui/button";
import { cn, logger } from "@/lib/utils";
import { AnimatePresence, motion } from "framer-motion";
import { useSelector, useDispatch } from "react-redux";
import { SectionListItem } from "./shared/section-list-item";
import { useForm } from "react-hook-form";
import { defaultTestimonial, testimonialSchema } from "@/schema/sections";
import { zodResolver } from "@hookform/resolvers/zod";
import { useEffect, useState } from "react";
import {
	addTestimonialInDatabase,
	removeTestimonialFromDatabase,
	updateTestimonialInDatabase,
} from "@/redux/thunks/testimonials";
import { TestimonialDialog } from "@/components/dialogs/testimonial-dialog";
import { createId } from "@paralleldrive/cuid2";
import { useParams } from "next/navigation";

export const Testimonial = () => {
	const { portfolioId } = useParams();
	const portfolio = useSelector((state) =>
		state.portfolios.items.find((item) => item.id === portfolioId)
	);
	const dispatch = useDispatch();
	const [currentTestimonial, setCurrentTestimonial] = useState(null);
	const [isOpen, setIsOpen] = useState(false);

	const form = useForm({
		resolver: zodResolver(testimonialSchema),
		defaultValues: defaultTestimonial,
	});
	const {
		reset,
		formState: { errors, defaultValues },
	} = form;

	useEffect(() => {
		if (Object.keys(errors).length > 0) {
			logger.error("Form Validation Errors:", errors);
		}
	}, [errors, defaultValues]);

	const section = portfolio?.testimonials;
	if (!section) return null;

	// CRUD handlers
	const openCreateDialog = () => {
		reset({ ...defaultTestimonial, id: createId() });
		setCurrentTestimonial(null);
		setIsOpen(true);
	};
	const openUpdateDialog = (testimonial) => {
		reset(testimonial);
		setCurrentTestimonial(testimonial);
		setIsOpen(true);
	};
	const onDuplicate = (item) => {
		dispatch(
			addTestimonialInDatabase({ ...item, id: createId(), portfolioId })
		);
	};
	const onDelete = (item) => {
		dispatch(
			removeTestimonialFromDatabase({
				testimonialId: item.id,
				portfolioId,
			})
		);
	};
	const onToggleVisibility = (item) => {
		dispatch(
			updateTestimonialInDatabase({
				...item,
				visible: !item.visible,
				portfolioId,
			})
		);
	};

	return (
		<motion.section
			id={"testimonial"}
			initial={{ opacity: 0 }}
			animate={{ opacity: 1 }}
			exit={{ opacity: 0 }}
			className="grid gap-y-6"
		>
			<header className="flex items-center justify-between">
				<div className="flex items-center gap-x-4">
					<h2 className="line-clamp-1 text-3xl font-bold">
						Testimonials
					</h2>
				</div>
			</header>

			<main
				className={cn(
					"grid transition-opacity",
					!section?.visible && "opacity-50"
				)}
			>
				<TestimonialDialog
					portfolioId={portfolioId}
					form={form}
					currentTestimonial={currentTestimonial}
					isOpen={isOpen}
					setIsOpen={setIsOpen}
				/>

				{section.items.length === 0 && (
					<Button
						onClick={openCreateDialog}
						variant="outline"
						className="gap-x-2 border-dashed py-6 leading-relaxed hover:bg-secondary-accent"
					>
						<Plus size={14} />
						<span className="font-medium">Add a new item</span>
					</Button>
				)}

				<AnimatePresence>
					{section.items.map((item) => (
						<SectionListItem
							key={item.id}
							id={item.id}
							visible={item.visible}
							title={item.name}
							description={`${item.role}${item.company ? ` at ${item.company}` : ""}`}
							onUpdate={() => openUpdateDialog(item)}
							onDelete={() => onDelete(item)}
							onDuplicate={() => onDuplicate(item)}
							onToggleVisibility={() => onToggleVisibility(item)}
						/>
					))}
				</AnimatePresence>
			</main>

			{section.items.length > 0 && (
				<footer className="flex items-center justify-end">
					<Button
						variant="outline"
						className="ml-auto gap-x-2"
						onClick={openCreateDialog}
					>
						<Plus />
						<span>Add a new item</span>
					</Button>
				</footer>
			)}
		</motion.section>
	);
};

================
File: components/settings-tab.jsx
================
"use client";

import { BlogSettings } from "./blog-settings";
import { DomainSettings } from "./domain-settings";
import { Separator } from "./ui/separator";

export function SettingsTab() {
	return (
		<div className="space-y-6">
			<DomainSettings />
			<Separator />
			<BlogSettings />
			<Separator />
		</div>
	);
}

================
File: components/team-switcher.jsx
================
"use client"

import * as React from "react"
import { ChevronDown, Plus } from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar"

export function TeamSwitcher({
  teams
}) {
  const [activeTeam, setActiveTeam] = React.useState(teams[0])

  return (
    (<SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton className="w-fit px-1.5">
              <div
                className="flex aspect-square size-5 items-center justify-center rounded-md bg-sidebar-primary text-sidebar-primary-foreground">
                <activeTeam.logo className="size-3" />
              </div>
              <span className="truncate font-semibold">{activeTeam.name}</span>
              <ChevronDown className="opacity-50" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-64 rounded-lg" align="start" side="bottom" sideOffset={4}>
            <DropdownMenuLabel className="text-xs text-muted-foreground">
              Teams
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem key={team.name} onClick={() => setActiveTeam(team)} className="gap-2 p-2">
                <div className="flex size-6 items-center justify-center rounded-sm border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <DropdownMenuItem className="gap-2 p-2">
              <div
                className="flex size-6 items-center justify-center rounded-md border bg-background">
                <Plus className="size-4" />
              </div>
              <div className="font-medium text-muted-foreground">Add team</div>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>)
  );
}

================
File: components/templates/default.jsx
================
"use client";

import React, { useState, useEffect } from "react";
import Image from "next/image";
import Link from "next/link";
import BlurFade from "@/components/magicui/blur-fade";
import BlurFadeText from "@/components/magicui/blur-fade-text";
import HTMLReactParser from "html-react-parser";
import { getInitials, cn } from "@/lib/utils";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
	Card,
	CardContent,
	CardFooter,
	CardHeader,
	CardTitle,
} from "@/components/ui/card";
import { motion } from "framer-motion";
import {
	ChevronRightIcon,
	HomeIcon,
	NotebookIcon,
	Globe,
	ChevronLeft,
	ChevronRight,
} from "lucide-react";
import { CardBody, CardContainer, CardItem } from "@/components/ui/3d-card";
import { ContactForm } from "@/app/contact-us/components/contact-form";
import { useUserContactForm } from "@/hooks/use-user-contact-form";
import { Dock, DockIcon } from "@/components/magicui/dock";
import ModeToggle from "@/components/mode-toggle";
import { buttonVariants } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import {
	Tooltip,
	TooltipContent,
	TooltipTrigger,
} from "@/components/ui/tooltip";
import {
	GithubLogo,
	LinkedinLogo,
	XLogo,
	YoutubeLogo,
} from "@phosphor-icons/react";
import { BuildWithButton } from "../build-with-button";

const BLUR_FADE_DELAY = 0.04;

const ResumeCard = ({
	logoUrl,
	altText,
	title,
	subtitle,
	href,
	badges,
	period,
	description,
}) => {
	const [isExpanded, setIsExpanded] = React.useState(false);

	const handleClick = (e) => {
		if (description) {
			e.preventDefault();
			setIsExpanded(!isExpanded);
		}
	};

	return (
		<Link
			href={href || "#"}
			className="block cursor-pointer"
			onClick={handleClick}
		>
			<Card className="flex border border-hidden shadow-none">
				<div className="flex-none">
					<Avatar className="border size-12 m-auto bg-muted-background dark:bg-foreground">
						<AvatarImage
							src={logoUrl}
							alt={altText}
							className="object-contain"
						/>
						<AvatarFallback>{altText[0]}</AvatarFallback>
					</Avatar>
				</div>
				<div className="flex-grow ml-4 items-center flex-col group">
					<CardHeader className="p-0">
						<div className="flex items-center justify-between gap-x-2 text-base">
							<h3 className="inline-flex items-center justify-center font-semibold leading-none text-xs sm:text-sm">
								{title}
								{badges && (
									<span className="inline-flex gap-x-1">
										{badges.map((badge, index) => (
											<Badge
												variant="secondary"
												className="align-middle text-xs"
												key={index}
											>
												{badge}
											</Badge>
										))}
									</span>
								)}
								<ChevronRightIcon
									className={cn(
										"size-4 translate-x-0 transform opacity-0 transition-all duration-300 ease-out group-hover:translate-x-1 group-hover:opacity-100",
										isExpanded ? "rotate-90" : "rotate-0"
									)}
								/>
							</h3>
							<div className="text-xs sm:text-sm tabular-nums text-muted-foreground text-right">
								{period}
							</div>
						</div>
						{subtitle && (
							<div className="font-sans text-xs">{subtitle}</div>
						)}
					</CardHeader>
					{description && (
						<motion.div
							initial={{ opacity: 0, height: 0 }}
							animate={{
								opacity: isExpanded ? 1 : 0,
								height: isExpanded ? "auto" : 0,
							}}
							transition={{
								duration: 0.7,
								ease: [0.16, 1, 0.3, 1],
							}}
							className="mt-2 text-xs sm:text-sm"
						>
							{description}
						</motion.div>
					)}
				</div>
			</Card>
		</Link>
	);
};

const ProjectCard = ({
	title,
	description,
	dates,
	tags,
	website,
	source,
	image,
	video,
	className,
}) => {
	return (
		<Card className="flex flex-col overflow-hidden border hover:shadow-lg transition-all duration-300 ease-out h-full">
			<div className={cn("block cursor-pointer", className)}>
				{video && (
					<video
						src={video}
						autoPlay
						loop
						muted
						playsInline
						className="pointer-events-none mx-auto h-32 md:h-40 w-full object-cover object-top"
					/>
				)}
				{image && (
					<Image
						src={image}
						alt={title}
						width={500}
						height={300}
						className="h-32 md:h-40 w-full overflow-hidden object-cover object-top"
					/>
				)}
			</div>
			<CardHeader
				className={cn(image || video ? "px-2" : "px-4", "py-2 md:py-4")}
			>
				<div className="space-y-1">
					<CardTitle className="text-sm md:text-base">
						{title}
					</CardTitle>
					<time className="font-sans text-xs">{dates}</time>
					<div className="text-sm">{description}</div>
				</div>
			</CardHeader>
			<CardContent className="mt-auto flex flex-col px-5">
				{tags && tags.length > 0 && (
					<div className="mt-2 flex flex-wrap gap-1">
						{tags?.map((tag, index) => (
							<Badge
								className="px-1 py-0 text-[10px]"
								variant="secondary"
								key={index}
							>
								{tag}
							</Badge>
						))}
					</div>
				)}
			</CardContent>
			<CardFooter className="px-2 pb-2">
				<div className="flex flex-row flex-wrap items-start gap-1">
					{website && (
						<Link href={website} target="_blank">
							<Badge className="flex gap-2 px-2 py-1 text-[10px]">
								<Globe className="w-4 h-4" />
								Demo
							</Badge>
						</Link>
					)}
					{source && (
						<Link href={source} target="_blank">
							<Badge className="flex gap-2 px-2 py-1 text-[10px]">
								<GithubLogo className="w-4 h-4" />
								Source
							</Badge>
						</Link>
					)}
				</div>
			</CardFooter>
		</Card>
	);
};

const HackathonCard = ({
	title,
	description,
	dates,
	location,
	image,
	links,
}) => {
	return (
		<li className="relative ml-10 py-4">
			<div className="absolute -left-16 top-2 flex items-center justify-center bg-white rounded-full">
				<Avatar className="border size-12 m-auto">
					<AvatarImage
						src={image}
						alt={title}
						className="object-contain"
					/>
					<AvatarFallback>{title[0]}</AvatarFallback>
				</Avatar>
			</div>

			<div className="flex flex-1 flex-col gap-1">
				{/* Date Display */}
				{dates && (
					<time
						className="text-xs text-muted-foreground"
						dateTime={dates}
					>
						{dates}
					</time>
				)}

				{/* Title */}
				<h2 className="text-base font-semibold leading-snug text-foreground">
					{title}
				</h2>

				{/* Location */}
				{location && (
					<p className="text-sm text-muted-foreground">{location}</p>
				)}

				{/* Description */}
				{description && (
					<p className="prose dark:prose-invert text-sm text-muted-foreground">
						{description}
					</p>
				)}

				{/* Links */}
				{links && links.length > 0 && (
					<div className="flex flex-row flex-wrap items-start gap-1 mt-2">
						{links.map((link, idx) => (
							<Link href={link?.url} key={idx} target="_blank">
								<Badge className="flex gap-2 px-2 py-1 text-[10px]">
									<Image
										src={`https://cdn.simpleicons.org/${link.icon}`}
										alt={link.label}
										width={20}
										height={20}
										className="w-5 h-5"
									/>
									{link.label}
								</Badge>
							</Link>
						))}
					</div>
				)}
			</div>
		</li>
	);
};

const CertificationCard = ({ name, issuer, date, summary, url }) => {
	return (
		<li className="relative ml-10 py-4 flex flex-col gap-4">
			<div className="flex flex-1 flex-col gap-1">
				{date && (
					<time
						className="text-xs text-muted-foreground"
						dateTime={date}
					>
						{date}
					</time>
				)}

				<h2 className="text-base font-semibold leading-snug text-foreground">
					{name}
				</h2>

				{issuer && (
					<p className="text-sm text-muted-foreground">
						Issued by {issuer}
					</p>
				)}

				{summary && (
					<p className="prose dark:prose-invert text-sm text-muted-foreground">
						{summary}
					</p>
				)}
			</div>

			{url && (
				<Link href={url} target="_blank" rel="noopener noreferrer">
					<Badge className="inline-flex items-center gap-2 px-2 py-1 text-sm">
						<Globe className="h-4 w-4" />
						Source
					</Badge>
				</Link>
			)}
		</li>
	);
};

const ContactCard = () => {
	const { formData, errors, isSubmitting, handleChange, handleSubmit } =
		useUserContactForm();

	return (
		<CardContainer className="inter-var">
			<CardBody className="bg-black text-white relative group/card  dark:hover:shadow-2xl dark:hover:shadow-emerald-500/[0.1] dark:bg-gray-50 dark:text-black dark:border-white/[0.2] border-black/[0.1] w-auto sm:w-[30rem] h-auto rounded-xl p-6 border  ">
				<CardItem translateZ="50" className="text-xl font-bold">
					Send a message
				</CardItem>
				<CardItem
					as="p"
					translateZ="60"
					className="text-sm max-w-sm mt-2"
				>
					Will get back to you in no time
				</CardItem>
				<div className="text-start">
					<CardItem translateZ="60" className="w-full mt-4">
						<ContactForm
							formData={formData}
							errors={errors}
							isSubmitting={isSubmitting}
							handleChange={handleChange}
							handleSubmit={handleSubmit}
							revert={true}
						/>
					</CardItem>
				</div>
			</CardBody>
		</CardContainer>
	);
};

const Navbar = ({ profile, blogEnabled }) => {
	const navbar = [
		{ href: "/", icon: HomeIcon, label: "Home" },
		{
			href: "/blog",
			icon: NotebookIcon,
			label: "Blog",
			requiresBlog: true,
		},
	].filter((item) => !item.requiresBlog || blogEnabled);

	return (
		<div className="pointer-events-none fixed inset-x-0 bottom-0 z-30 mx-auto mb-6 flex flex-col origin-bottom h-full max-h-14">
			<div className="fixed bottom-0 inset-x-0 h-16 w-full bg-background to-transparent backdrop-blur-lg [-webkit-mask-image:linear-gradient(to_top,black,transparent)] dark:bg-background"></div>
			<Dock className="z-50 pointer-events-auto relative mx-auto flex min-h-full h-full items-center px-1 bg-background [box-shadow:0_0_0_1px_rgba(0,0,0,.03),0_2px_4px_rgba(0,0,0,.05),0_12px_24px_rgba(0,0,0,.05)] transform-gpu dark:[border:1px_solid_rgba(255,255,255,.1)] dark:[box-shadow:0_-20px_80px_-20px_#ffffff1f_inset] ">
				{navbar.map((item, index) => (
					<DockIcon key={index}>
						<Tooltip>
							<TooltipTrigger asChild>
								<Link
									href={item.href}
									className={cn(
										buttonVariants({
											variant: "ghost",
											size: "icon",
										}),
										"size-12"
									)}
								>
									<item.icon className="size-4" />
								</Link>
							</TooltipTrigger>
							<TooltipContent>
								<p>{item.label}</p>
							</TooltipContent>
						</Tooltip>
					</DockIcon>
				))}

				<Separator orientation="vertical" className="h-full" />
				{Object.entries(profile)
					.filter(([_, social]) => social.visible)
					.map(([network, social]) => (
						<DockIcon key={network}>
							<Tooltip>
								<TooltipTrigger asChild>
									<Link
										href={social.url}
										target="_blank"
										className={cn(
											buttonVariants({
												variant: "ghost",
												size: "icon",
											}),
											"size-12"
										)}
									>
										{social.network === "github" && (
											<GithubLogo size={4} />
										)}
										{social.network === "linkedin" && (
											<LinkedinLogo size={4} />
										)}
										{social.network === "x" && (
											<XLogo size={4} />
										)}
										{social.network === "youtube" && (
											<YoutubeLogo size={4} />
										)}
									</Link>
								</TooltipTrigger>
								<TooltipContent>
									<p>
										{social.network
											.charAt(0)
											.toLocaleUpperCase() +
											social.network.slice(1)}
									</p>
								</TooltipContent>
							</Tooltip>
						</DockIcon>
					))}
				<Separator orientation="vertical" className="h-full py-2" />
				<DockIcon>
					<Tooltip>
						<TooltipTrigger asChild>
							<ModeToggle />
						</TooltipTrigger>
						<TooltipContent>
							<p>Theme</p>
						</TooltipContent>
					</Tooltip>
				</DockIcon>
			</Dock>
		</div>
	);
};

export const TestimonialCarousel = ({ testimonials = [], className = "" }) => {
	const [currentIndex, setCurrentIndex] = useState(0);
	const [isAutoPlaying, setIsAutoPlaying] = useState(true);
	const [isPaused, setIsPaused] = useState(false);
	const autoPlayInterval = 5000;
	const showRating = true;

	useEffect(() => {
		let intervalId;

		if (isAutoPlaying && !isPaused && testimonials.length > 1) {
			intervalId = setInterval(() => {
				setCurrentIndex((prevIndex) =>
					prevIndex === testimonials.length - 1 ? 0 : prevIndex + 1
				);
			}, autoPlayInterval);
		}

		return () => {
			if (intervalId) {
				clearInterval(intervalId);
			}
		};
	}, [isAutoPlaying, isPaused, testimonials.length, autoPlayInterval]);

	const goToNext = () => {
		setCurrentIndex((prevIndex) =>
			prevIndex === testimonials.length - 1 ? 0 : prevIndex + 1
		);
		setIsAutoPlaying(false);
	};

	const goToPrevious = () => {
		setCurrentIndex((prevIndex) =>
			prevIndex === 0 ? testimonials.length - 1 : prevIndex - 1
		);
		setIsAutoPlaying(false);
	};

	const handleKeyDown = (e) => {
		if (e.key === "ArrowLeft") goToPrevious();
		if (e.key === "ArrowRight") goToNext();
	};

	const renderStars = (rating) => {
		return Array(rating).fill("★").join("");
	};

	return (
		<div
			className={cn(`relative w-full max-w-2xl mx-auto`, className)}
			onMouseEnter={() => setIsPaused(true)}
			onMouseLeave={() => setIsPaused(false)}
			onKeyDown={handleKeyDown}
			role="region"
			aria-label="Testimonials carousel"
			tabIndex={0}
		>
			<motion.div
				className="relative overflow-hidden rounded-xl bg-card shadow-lg dark:bg-card border"
				initial={false}
			>
				<motion.div
					className="flex"
					animate={{ x: `-${currentIndex * 100}%` }}
					transition={{ type: "spring", stiffness: 300, damping: 30 }}
				>
					{testimonials.map((testimonial, index) => (
						<motion.div
							key={index}
							className="w-full flex-shrink-0 p-6 flex items-center justify-center" // Added flex, items-center, and justify-center
							style={{ width: "100%" }}
							initial={{ opacity: 0 }}
							animate={{
								opacity: currentIndex === index ? 1 : 0.5,
							}}
							transition={{ duration: 0.3 }}
						>
							<div className="flex flex-col items-center text-center space-y-4">
								{testimonial.avatar && (
									<Avatar className="size-20 border">
										<AvatarImage
											src={testimonial.avatar}
											alt={testimonial.name}
											className="object-cover"
										/>
										<AvatarFallback>
											{testimonial.name[0]}
										</AvatarFallback>
									</Avatar>
								)}
								<blockquote className="space-y-2">
									<p className="text-muted-foreground text-sm md:text-base">
										{testimonial.message}
									</p>
									{showRating && testimonial.rating && (
										<div className="text-yellow-400 dark:text-yellow-300 text-sm">
											{renderStars(testimonial.rating)}
										</div>
									)}
									<footer className="space-y-1">
										<div className="font-medium text-foreground">
											{testimonial.name}
										</div>
										<div className="text-xs text-muted-foreground">
											{testimonial.role}
											{testimonial.company && (
												<>, {testimonial.company}</>
											)}
										</div>
									</footer>
								</blockquote>
							</div>
						</motion.div>
					))}
				</motion.div>

				{testimonials.length > 1 && (
					<>
						<button
							onClick={goToPrevious}
							className="absolute left-2 top-1/2 -translate-y-1/2 rounded-full bg-background/80 p-2 shadow-lg backdrop-blur-sm transition-opacity hover:bg-background focus:outline-none focus:ring-2 focus:ring-ring"
							aria-label="Previous testimonial"
						>
							<ChevronLeft className="h-5 w-5" />
						</button>

						<button
							onClick={goToNext}
							className="absolute right-2 top-1/2 -translate-y-1/2 rounded-full bg-background/80 p-2 shadow-lg backdrop-blur-sm transition-opacity hover:bg-background focus:outline-none focus:ring-2 focus:ring-ring"
							aria-label="Next testimonial"
						>
							<ChevronRight className="h-5 w-5" />
						</button>

						<div className="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
							{testimonials.map((_, index) => (
								<button
									key={index}
									onClick={() => {
										setCurrentIndex(index);
										setIsAutoPlaying(false);
									}}
									className={cn(
										"h-2 w-2 rounded-full transition-colors",
										currentIndex === index
											? "bg-primary"
											: "bg-muted hover:bg-muted-foreground"
									)}
									aria-label={`Go to slide ${index + 1}`}
									aria-current={currentIndex === index}
								/>
							))}
						</div>
					</>
				)}
			</motion.div>
		</div>
	);
};

// Add this after other section definitions and before the DefaultTemplate component
const TeamMemberCard = ({ name, role, avatar }) => {
	return (
		<Card className="text-center border hover:shadow-lg transition-all duration-300 ease-out">
			<CardContent className="p-6 py-10 flex flex-col items-center">
				<Avatar className="size-24 border mb-4">
					<AvatarImage
						src={avatar}
						alt={name}
						className="object-cover"
					/>
					<AvatarFallback>{name[0]}</AvatarFallback>
				</Avatar>
				<h3 className="font-semibold mb-1">{name}</h3>
				<p className="text-sm text-muted-foreground">{role}</p>
			</CardContent>
		</Card>
	);
};

export default function DefaultTemplate({
	basics,
	experiences,
	educations,
	skills,
	projects,
	hackathons,
	certifications,
	profiles = [],
	testimonials = [],
	teams = [], // Add this new prop
	blogEnabled = false,
}) {
	return (
		<>
			<BuildWithButton />
			<main className="flex flex-col min-h-[100dvh] overflow-auto scrollbar-hide">
				<div className="container mx-auto px-4 md:px-6 space-y-8 md:space-y-10 max-w-4xl">
					<section id="hero" className="pt-6 md:pt-10">
						<div className="space-y-6 md:space-y-8">
							<div className="gap-4 flex justify-between">
								<div className="flex-col flex flex-1 space-y-1.5">
									<BlurFadeText
										delay={BLUR_FADE_DELAY}
										className="text-2xl md:text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none"
										yOffset={8}
										text={`Hi, I'm ${basics?.name?.split(" ")[0]} 👋`}
									/>
									<BlurFadeText
										className="text-sm md:text-xl"
										delay={BLUR_FADE_DELAY}
										text={HTMLReactParser(
											basics?.summary || ""
										)}
									/>
								</div>
								<BlurFade delay={BLUR_FADE_DELAY}>
									<Avatar className="size-20 md:size-28 border">
										<AvatarImage
											alt={basics?.name}
											src={basics?.picture}
										/>
										<AvatarFallback>
											{getInitials(basics?.name || "")}
										</AvatarFallback>
									</Avatar>
								</BlurFade>
							</div>
						</div>
					</section>

					{/* Update section spacing and text sizes */}
					<section id="about" className="space-y-3 md:space-y-4">
						<BlurFade delay={BLUR_FADE_DELAY * 3}>
							<h2 className="text-lg md:text-xl font-bold">
								About
							</h2>
						</BlurFade>
						<BlurFade
							delay={BLUR_FADE_DELAY * 4}
							className="text-sm md:text-base"
						>
							{HTMLReactParser(basics?.about || "")}
						</BlurFade>
					</section>

					{experiences.length > 0 && (
						<section id="work" className="space-y-4">
							<BlurFade delay={BLUR_FADE_DELAY * 5}>
								<h2 className="text-xl font-bold">
									Work Experience
								</h2>
							</BlurFade>
							<div className="flex min-h-0 flex-col gap-y-3">
								{experiences.map((work, id) => (
									<BlurFade
										key={work.id}
										delay={BLUR_FADE_DELAY * 6 + id * 0.05}
									>
										<ResumeCard
											key={work.id}
											logoUrl={work.picture}
											altText={work.company}
											title={work.company}
											subtitle={work.position}
											href={work.url}
											badges={work.badges}
											period={work.date}
											description={HTMLReactParser(
												work.summary || ""
											)}
										/>
									</BlurFade>
								))}
							</div>
						</section>
					)}

					{educations.length > 0 && (
						<section id="education" className="space-y-4">
							<BlurFade delay={BLUR_FADE_DELAY * 7}>
								<h2 className="text-xl font-bold">Education</h2>
							</BlurFade>
							<div className="flex min-h-0 flex-col gap-y-3">
								{educations.map((edu, id) => (
									<BlurFade
										key={edu.id}
										delay={BLUR_FADE_DELAY * 8 + id * 0.05}
									>
										<ResumeCard
											key={edu.id}
											href={edu.url}
											logoUrl={edu.logo}
											altText={edu.institution}
											title={edu.institution}
											subtitle={edu.studyType}
											period={edu.date}
										/>
									</BlurFade>
								))}
							</div>
						</section>
					)}

					{skills.length > 0 && (
						<section id="skills" className="space-y-4">
							<BlurFade delay={BLUR_FADE_DELAY * 9}>
								<h2 className="text-xl font-bold">Skills</h2>
							</BlurFade>
							<div className="flex flex-wrap gap-1">
								{skills.map((skill, id) => (
									<BlurFade
										key={skill.id}
										delay={BLUR_FADE_DELAY * 10 + id * 0.05}
									>
										<Badge key={skill.id}>
											{skill.name}
										</Badge>
									</BlurFade>
								))}
							</div>
						</section>
					)}

					{projects.length > 0 && (
						<section
							id="projects"
							className="space-y-6 md:space-y-8 py-8 md:py-12"
						>
							<BlurFade delay={BLUR_FADE_DELAY * 11}>
								<div className="flex flex-col items-center justify-center space-y-4 text-center">
									<div className="space-y-2">
										<div className="inline-block rounded-lg bg-foreground text-background px-3 py-1 text-xs md:text-sm">
											My Projects
										</div>
										<h2 className="text-2xl md:text-3xl font-bold tracking-tighter sm:text-5xl">
											Check out my latest work
										</h2>
										<p className="text-sm text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
											I&apos;ve worked on a variety of
											projects, from simple websites to
											complex web applications. Here are a
											few of my favorites.
										</p>
									</div>
								</div>
							</BlurFade>
							<div className="grid grid-cols-1 gap-4 md:gap-6 sm:grid-cols-2">
								{projects.map((project, id) => (
									<BlurFade
										key={project.id}
										delay={BLUR_FADE_DELAY * 12 + id * 0.05}
									>
										<ProjectCard
											title={project.name}
											description={HTMLReactParser(
												project.description || ""
											)}
											dates={project.date}
											tags={project.technologies}
											website={project.website}
											source={project.source}
											image={project.image}
											video={project.video}
										/>
									</BlurFade>
								))}
							</div>
						</section>
					)}

					{testimonials.length > 0 && (
						<section
							id="testimonials"
							className="space-y-6 md:space-y-8 py-8 md:py-12"
						>
							<BlurFade delay={BLUR_FADE_DELAY * 11}>
								<div className="flex flex-col items-center justify-center space-y-4 text-center">
									<div className="space-y-2">
										<div className="inline-block rounded-lg bg-foreground text-background px-3 py-1 text-sm">
											Testimonials
										</div>
										<h2 className="text-3xl font-bold tracking-tighter sm:text-5xl">
											What people say
										</h2>
										<p className="text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed max-w-[800px] mx-auto">
											I&rsquo;ve had the pleasure of
											working with amazing people
											throughout my career. Here&rsquo;s
											what some of them have to say about
											our collaboration.
										</p>
									</div>
								</div>
							</BlurFade>
							<BlurFade delay={BLUR_FADE_DELAY * 12}>
								<TestimonialCarousel
									testimonials={testimonials}
								/>
							</BlurFade>
						</section>
					)}

					{certifications.length > 0 && (
						<section
							id="certifications"
							className="space-y-6 md:space-y-8 py-8 md:py-12"
						>
							<div className="space-y-12 w-full py-12">
								<BlurFade delay={BLUR_FADE_DELAY * 13}>
									<div className="flex flex-col items-center justify-center space-y-4 text-center">
										<div className="space-y-2">
											<div className="inline-block rounded-lg bg-foreground text-background px-3 py-1 text-sm">
												Certifications
											</div>
											<h2 className="text-3xl font-bold tracking-tighter sm:text-5xl">
												I value learning
											</h2>
											<p className="text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
												Explore the professional
												certifications I have earned
												throughout my career, showcasing
												my commitment to continuous
												learning and expertise in
												various fields. These
												certifications reflect my
												proficiency in key technologies,
												methodologies, and industry best
												practices, helping me stay at
												the forefront of innovation and
												ensuring that I deliver
												high-quality solutions.
											</p>
										</div>
									</div>
								</BlurFade>
								<BlurFade delay={BLUR_FADE_DELAY * 14}>
									<ul className="mb-4 ml-4 divide-y divide-dashed border-l">
										{certifications.map((project, id) => (
											<BlurFade
												key={project.id}
												delay={
													BLUR_FADE_DELAY * 15 +
													id * 0.05
												}
											>
												<CertificationCard
													name={project.name}
													issuer={project.issuer}
													summary={HTMLReactParser(
														project.summary || ""
													)}
													location={project.location}
													date={project.date}
													url={project.url}
												/>
											</BlurFade>
										))}
									</ul>
								</BlurFade>
							</div>
						</section>
					)}

					{hackathons.length > 0 && (
						<section
							id="hackathons"
							className="space-y-6 md:space-y-8 py-8 md:py-12"
						>
							<div className="space-y-12 w-full py-12">
								<BlurFade delay={BLUR_FADE_DELAY * 13}>
									<div className="flex flex-col items-center justify-center space-y-4 text-center">
										<div className="space-y-2">
											<div className="inline-block rounded-lg bg-foreground text-background px-3 py-1 text-sm">
												Hackathons
											</div>
											<h2 className="text-3xl font-bold tracking-tighter sm:text-5xl">
												I like building things
											</h2>
											<p className="text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
												During my time in university, I
												attended {hackathons.length}+
												hackathons. People from around
												the country would come together
												and build incredible things in
												2-3 days. It was eye-opening to
												see the endless possibilities
												brought to life by a group of
												motivated and passionate
												individuals.
											</p>
										</div>
									</div>
								</BlurFade>
								<BlurFade delay={BLUR_FADE_DELAY * 14}>
									<ul className="mb-4 ml-4 divide-y divide-dashed border-l">
										{hackathons.map((project, id) => (
											<BlurFade
												key={project.id}
												delay={
													BLUR_FADE_DELAY * 15 +
													id * 0.05
												}
											>
												<HackathonCard
													title={project.name}
													description={HTMLReactParser(
														project.description ||
															""
													)}
													location={project.location}
													dates={project.date}
													image={project.logo || null}
													links={project.links}
												/>
											</BlurFade>
										))}
									</ul>
								</BlurFade>
							</div>
						</section>
					)}

					{teams.length > 0 && (
						<section
							id="team"
							className="space-y-6 md:space-y-8 py-8 md:py-12"
						>
							<div className="space-y-12 w-full py-12">
								<BlurFade delay={BLUR_FADE_DELAY * 13}>
									<div className="flex flex-col items-center justify-center space-y-4 text-center">
										<div className="space-y-2">
											<div className="inline-block rounded-lg bg-foreground text-background px-3 py-1 text-sm">
												Our Team
											</div>
											<h2 className="text-3xl font-bold tracking-tighter sm:text-5xl">
												Save your time and money by
												choosing our team
											</h2>
											<p className="text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed max-w-[800px] mx-auto">
												Meet our talented team of
												professionals dedicated to
												bringing your vision to life
											</p>
										</div>
									</div>
								</BlurFade>
								<BlurFade delay={BLUR_FADE_DELAY * 14}>
									<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
										{teams.map((member, id) => (
											<BlurFade
												key={member.id}
												delay={
													BLUR_FADE_DELAY * 15 +
													id * 0.05
												}
											>
												<TeamMemberCard
													name={member.name}
													role={member.role}
													avatar={member.avatar}
												/>
											</BlurFade>
										))}
									</div>
								</BlurFade>
							</div>
						</section>
					)}

					<section
						id="contact"
						className="space-y-6 md:space-y-8 pb-20"
					>
						<BlurFade delay={BLUR_FADE_DELAY * 16}>
							<div className="flex flex-col items-center justify-center space-y-4 text-center">
								<div className="space-y-2">
									<div className="inline-block rounded-lg bg-foreground text-background px-3 py-1 text-xs md:text-sm">
										Contact
									</div>
									<h2 className="text-2xl md:text-3xl font-bold tracking-tighter sm:text-5xl">
										Got a project in mind?
									</h2>
									<p className="text-sm mx-auto max-w-[600px] text-muted-foreground md:text-xl/relaxed lg:text-base/relaxed xl:text-xl/relaxed">
										Don&rsquo;t be shy – send a message and
										slide into my digital inbox! I promise
										I&rsquo;m way more responsive than my
										houseplants.
									</p>
								</div>
								<ContactCard />
							</div>
						</BlurFade>
					</section>
				</div>
			</main>
			<Navbar profile={profiles} blogEnabled={blogEnabled} />
		</>
	);
}

================
File: components/templates/template-wrapper.jsx
================
"use client";

import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { cn } from "@/lib/utils";
import { CONTAINER_CLASS } from "@/utils/constants";

// Import templates
import DefaultTemplate from "./default";
// import MinimalTemplate from "./minimal";
// import ModernTemplate from "./modern";
// import ClassicTemplate from "./classic";

const TEMPLATES = {
	default: DefaultTemplate,
	// minimal: MinimalTemplate,
	// modern: ModernTemplate,
	// classic: ClassicTemplate,
};

export const getTemplate = (template) => {
	return TEMPLATES[template] || TEMPLATES.default;
};

export const TemplateWrapper = ({
	template = "default",
	data = {},
	className,
}) => {
	const Template = getTemplate(template);

	return (
		<div className={cn("relative w-full min-h-screen", className)}>
			<div className={cn(CONTAINER_CLASS, "py-6 md:py-8 lg:py-12")}>
				<AnimatePresence>
					<motion.div
						layout
						initial={{ opacity: 0, x: -20, y: 0 }}
						animate={{ opacity: 1, x: 0 }}
						exit={{ opacity: 0, x: -20 }}
						className="w-full"
					>
						<Template {...data} />
					</motion.div>
				</AnimatePresence>
			</div>
		</div>
	);
};

================
File: components/ui/3d-card.jsx
================
"use client";;
import { cn } from "@/lib/utils";
import React, {
  createContext,
  useState,
  useContext,
  useRef,
  useEffect,
} from "react";

const MouseEnterContext = createContext(undefined);

export const CardContainer = ({
  children,
  className,
  containerClassName
}) => {
  const containerRef = useRef(null);
  const [isMouseEntered, setIsMouseEntered] = useState(false);

  const handleMouseMove = (e) => {
    if (!containerRef.current) return;
    const { left, top, width, height } =
      containerRef.current.getBoundingClientRect();
    const x = (e.clientX - left - width / 2) / 25;
    const y = (e.clientY - top - height / 2) / 25;
    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`;
  };

  const handleMouseEnter = (e) => {
    setIsMouseEntered(true);
    if (!containerRef.current) return;
  };

  const handleMouseLeave = (e) => {
    if (!containerRef.current) return;
    setIsMouseEntered(false);
    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`;
  };
  return (
    (<MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>
      <div
        className={cn("py-20 flex items-center justify-center", containerClassName)}
        style={{
          perspective: "1000px",
        }}>
        <div
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          className={cn(
            "flex items-center justify-center relative transition-all duration-200 ease-linear",
            className
          )}
          style={{
            transformStyle: "preserve-3d",
          }}>
          {children}
        </div>
      </div>
    </MouseEnterContext.Provider>)
  );
};

export const CardBody = ({
  children,
  className
}) => {
  return (
    (<div
      className={cn(
        "h-96 w-96 [transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]",
        className
      )}>
      {children}
    </div>)
  );
};

export const CardItem = ({
  as: Tag = "div",
  children,
  className,
  translateX = 0,
  translateY = 0,
  translateZ = 0,
  rotateX = 0,
  rotateY = 0,
  rotateZ = 0,
  ...rest
}) => {
  const ref = useRef(null);
  const [isMouseEntered] = useMouseEnter();

  useEffect(() => {
    handleAnimations();
  }, [isMouseEntered]);

  const handleAnimations = () => {
    if (!ref.current) return;
    if (isMouseEntered) {
      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`;
    } else {
      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`;
    }
  };

  return (
    (<Tag
      ref={ref}
      className={cn("w-fit transition duration-200 ease-linear", className)}
      {...rest}>
      {children}
    </Tag>)
  );
};

// Create a hook to use the context
export const useMouseEnter = () => {
  const context = useContext(MouseEnterContext);
  if (context === undefined) {
    throw new Error("useMouseEnter must be used within a MouseEnterProvider");
  }
  return context;
};

================
File: components/ui/accordion.jsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}>
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}>
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/alert-dialog.jsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props} />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props} />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/alert.jsx
================
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props} />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props} />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props} />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: components/ui/aspect-ratio.jsx
================
"use client"

import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: components/ui/avatar.jsx
================
"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props} />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props} />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props} />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge-input.jsx
================
import { forwardRef, useCallback, useEffect, useState } from "react";
import { Input } from "./input";

export const BadgeInput = forwardRef(
	({ value = [], onChange, setPendingKeyword, ...props }, ref) => {
		const [label, setLabel] = useState("");

		const processInput = useCallback(() => {
			if (!label.trim()) return;

			const newLabels = label
				.split(",")
				.map((str) => str.trim())
				.filter(Boolean)
				.filter((str) => !value.includes(str));

			if (newLabels.length > 0) {
				onChange([...new Set([...value, ...newLabels])]);
				setLabel("");
			}
		}, [label, value, onChange]);

		useEffect(() => {
			if (label.includes(",")) {
				processInput();
			}
		}, [label, processInput]);

		useEffect(() => {
			if (setPendingKeyword) {
				setPendingKeyword(label);
			}
		}, [label, setPendingKeyword]);

		const onKeyDown = (event) => {
			if (event.key === "Enter") {
				event.preventDefault();
				event.stopPropagation();
				processInput();
			}
		};

		return (
			<div>
				<Input
					{...props}
					ref={ref}
					value={label}
					onKeyDown={onKeyDown}
					onChange={(event) => setLabel(event.target.value)}
				/>
				{props.error && (
					<small className="text-red-500 opacity-75">
						{props.error}
					</small>
				)}
			</div>
		);
	}
);

BadgeInput.displayName = "BadgeInput";

================
File: components/ui/badge.jsx
================
import * as React from "react"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

function Badge({
  className,
  variant,
  ...props
}) {
  return (<div className={cn(badgeVariants({ variant }), className)} {...props} />);
}

export { Badge, badgeVariants }

================
File: components/ui/breadcrumb.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef(
  ({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />
)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props} />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props} />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    (<Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props} />)
  );
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props} />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}>
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: components/ui/button.jsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-2xl font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/checkbox.jsx
================
"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}>
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/collapsible.jsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/context-menu.jsx
================
"use client"

import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props} />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props} />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)}
      {...props} />)
  );
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: components/ui/dialog.jsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dock.jsx
================
"use client";;
import React, { useRef } from "react";
import { cva } from "class-variance-authority";
import { motion, useMotionValue, useSpring, useTransform } from "framer-motion";

import { cn } from "@/lib/utils";

const DEFAULT_MAGNIFICATION = 60;
const DEFAULT_DISTANCE = 140;

const dockVariants = cva(
  "supports-backdrop-blur:bg-white/10 supports-backdrop-blur:dark:bg-black/10 mx-auto mt-8 flex h-[58px] w-max gap-2 rounded-2xl border p-2 backdrop-blur-md"
);

const Dock = React.forwardRef((
  {
    className,
    children,
    magnification = DEFAULT_MAGNIFICATION,
    distance = DEFAULT_DISTANCE,
    direction = "bottom",
    ...props
  },
  ref,
) => {
  const mouseX = useMotionValue(Infinity);

  const renderChildren = () => {
    return React.Children.map(children, (child) => {
      if (React.isValidElement(child) && child.type === DockIcon) {
        return React.cloneElement(child, {
          ...child.props,
          mouseX: mouseX,
          magnification: magnification,
          distance: distance,
        });
      }
      return child;
    });
  };

  return (
    (<motion.div
      ref={ref}
      onMouseMove={(e) => mouseX.set(e.pageX)}
      onMouseLeave={() => mouseX.set(Infinity)}
      {...props}
      className={cn(dockVariants({ className }), {
        "items-start": direction === "top",
        "items-center": direction === "middle",
        "items-end": direction === "bottom",
      })}>
      {renderChildren()}
    </motion.div>)
  );
});

Dock.displayName = "Dock";

const DockIcon = ({
  size,
  magnification = DEFAULT_MAGNIFICATION,
  distance = DEFAULT_DISTANCE,
  mouseX,
  className,
  children,
  ...props
}) => {
  const ref = useRef(null);

  const distanceCalc = useTransform(mouseX, (val) => {
    const bounds = ref.current?.getBoundingClientRect() ?? { x: 0, width: 0 };

    return val - bounds.x - bounds.width / 2;
  });

  const widthSync = useTransform(distanceCalc, [-distance, 0, distance], [40, magnification, 40]);

  const width = useSpring(widthSync, {
    mass: 0.1,
    stiffness: 150,
    damping: 12,
  });

  return (
    (<motion.div
      ref={ref}
      style={{ width }}
      className={cn(
        "flex aspect-square cursor-pointer items-center justify-center rounded-full",
        className
      )}
      {...props}>
      {children}
    </motion.div>)
  );
};

DockIcon.displayName = "DockIcon";

export { Dock, DockIcon, dockVariants };

================
File: components/ui/dropdown-menu.jsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />)
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/form.jsx
================
"use client";
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { Controller, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

const FormFieldContext = React.createContext({})

const FormField = (
  {
    ...props
  }
) => {
  return (
    (<FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>)
  );
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

const FormItemContext = React.createContext({})

const FormItem = React.forwardRef(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    (<FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>)
  );
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    (<Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props} />)
  );
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    (<Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props} />)
  );
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    (<p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props} />)
  );
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    (<p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}>
      {body}
    </p>)
  );
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/hover-card.jsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.jsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/navigation-menu.jsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}>
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props} />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}>
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true" />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props} />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props} />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}>
    <div
      className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/popover.jsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/radio-group.jsx
================
"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef(({ className, ...props }, ref) => {
  return (<RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />);
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}>
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>)
  );
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: components/ui/rainbow-button.jsx
================
import React from "react";
import { cn } from "@/lib/utils";

export const RainbowButton = React.forwardRef(({ children, className, ...props }, ref) => {
  return (
    (<button
      ref={ref}
      className={cn(
        "group relative inline-flex h-11 animate-rainbow cursor-pointer items-center justify-center rounded-xl border-0 bg-[length:200%] px-8 py-2 font-medium text-primary-foreground transition-colors [background-clip:padding-box,border-box,border-box] [background-origin:border-box] [border:calc(0.08*1rem)_solid_transparent] focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
        // before styles
        "before:absolute before:bottom-[-20%] before:left-1/2 before:z-0 before:h-1/5 before:w-3/5 before:-translate-x-1/2 before:animate-rainbow before:bg-[linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))] before:[filter:blur(calc(0.8*1rem))]",
        // light mode colors
        "bg-[linear-gradient(#121213,#121213),linear-gradient(#121213_50%,rgba(18,18,19,0.6)_80%,rgba(18,18,19,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]",
        // dark mode colors
        "dark:bg-[linear-gradient(#fff,#fff),linear-gradient(#fff_50%,rgba(255,255,255,0.6)_80%,rgba(0,0,0,0)),linear-gradient(90deg,hsl(var(--color-1)),hsl(var(--color-5)),hsl(var(--color-3)),hsl(var(--color-4)),hsl(var(--color-2)))]",
        className
      )}
      {...props}>
      {children}
    </button>)
  );
});

RainbowButton.displayName = "RainbowButton";

================
File: components/ui/resizable.jsx
================
"use client";

import { DotsSixVertical } from "@phosphor-icons/react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({ className, ...props }) => (
	<ResizablePrimitive.PanelGroup
		className={cn(
			"flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
			className
		)}
		{...props}
	/>
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({ withHandle, className, ...props }) => (
	<ResizablePrimitive.PanelResizeHandle
		className={cn(
			"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
			className
		)}
		{...props}
	>
		{withHandle && (
			<div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
				<DotsSixVertical className="h-2.5 w-2.5" />
			</div>
		)}
	</ResizablePrimitive.PanelResizeHandle>
);

export { ResizableHandle, ResizablePanel, ResizablePanelGroup };

================
File: components/ui/rich-input.jsx
================
import React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import {
	ArrowClockwise,
	ArrowCounterClockwise,
	Code as CodeIcon,
	CodeBlock as CodeBlockIcon,
	HighlighterCircle,
	Image as ImageIcon,
	KeyReturn,
	LinkSimple,
	ListBullets,
	ListNumbers,
	Minus,
	Paragraph as ParagraphIcon,
	TextAlignCenter,
	TextAlignJustify,
	TextAlignLeft,
	TextAlignRight,
	TextAUnderline,
	TextB,
	TextHOne,
	TextHThree,
	TextHTwo,
	TextIndent,
	TextItalic,
	TextOutdent,
	TextStrikethrough,
} from "@phosphor-icons/react";
import { BubbleMenu } from "@tiptap/react";
import { Bold, Italic, Code, Link as LinkIcon } from "lucide-react";
import { PopoverTrigger } from "@radix-ui/react-popover";
import { cn } from "@/lib/utils";
import { Highlight } from "@tiptap/extension-highlight";
import { Image } from "@tiptap/extension-image";
import { Link } from "@tiptap/extension-link";
import { TextAlign } from "@tiptap/extension-text-align";
import { Underline } from "@tiptap/extension-underline";
import {
	Editor,
	EditorContent,
	EditorContentProps,
	useEditor,
} from "@tiptap/react";
import { StarterKit } from "@tiptap/starter-kit";
import { forwardRef, useCallback } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "./button";
import {
	Form,
	FormControl,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "./form";
import { Input } from "./input";
import { Popover, PopoverContent } from "./popover";
import { Skeleton } from "./skeleton";
import { Toggle } from "./toggle";
import { Tooltip, TooltipContent, TooltipTrigger } from "./tooltip";

const InsertImageFormSchema = z.object({
	src: z.string(),
	alt: z.string().optional(),
});

const InsertImageForm = ({ onInsert }) => {
	const form = useForm({
		resolver: zodResolver(InsertImageFormSchema),
		defaultValues: { src: "", alt: "" },
	});

	const onSubmit = (values) => {
		onInsert(values);
		form.reset();
	};

	return (
		<Form {...form}>
			<form className="space-y-3" onSubmit={form.handleSubmit(onSubmit)}>
				<p className="prose prose-sm prose-zinc dark:prose-invert">
					Insert an image from an external URL and use it on your
					resume.
				</p>

				<FormField
					name="src"
					control={form.control}
					render={({ field }) => (
						<FormItem>
							<FormLabel>URL</FormLabel>
							<FormControl>
								<Input placeholder="https://..." {...field} />
							</FormControl>
							<FormMessage />
						</FormItem>
					)}
				/>

				<FormField
					name="alt"
					control={form.control}
					render={({ field }) => (
						<FormItem>
							<FormLabel>Description</FormLabel>
							<FormControl>
								<Input {...field} />
							</FormControl>
						</FormItem>
					)}
				/>

				<div className="!mt-5 ml-auto max-w-fit">
					<Button type="submit" variant="secondary" size="sm">
						Insert Image
					</Button>
				</div>
			</form>
		</Form>
	);
};

const Toolbar = ({ editor }) => {
	const setLink = useCallback(() => {
		const previousUrl = editor.getAttributes("link").href;
		const url = window.prompt("URL", previousUrl);

		// cancelled
		if (url === null) {
			return;
		}

		// empty
		if (url === "") {
			editor.chain().focus().extendMarkRange("link").unsetLink().run();

			return;
		}

		// update link
		editor
			.chain()
			.focus()
			.extendMarkRange("link")
			.setLink({ href: url })
			.run();
	}, [editor]);

	return (
		<div className="flex flex-wrap gap-0.5 border p-1">
			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("bold")}
						disabled={!editor.can().chain().toggleBold().run()}
						onPressedChange={() =>
							editor.chain().focus().toggleBold().run()
						}
					>
						<TextB />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Bold</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("italic")}
						disabled={
							!editor.can().chain().focus().toggleItalic().run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleItalic().run()
						}
					>
						<TextItalic />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Italic</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("strike")}
						disabled={
							!editor.can().chain().focus().toggleStrike().run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleStrike().run()
						}
					>
						<TextStrikethrough />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Strikethrough</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("underline")}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleUnderline()
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleUnderline().run()
						}
					>
						<TextAUnderline />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Underline</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("highlight")}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleHighlight()
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleHighlight().run()
						}
					>
						<HighlighterCircle />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Highlight</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Button
						type="button"
						size="sm"
						variant="ghost"
						className="px-2"
						onClick={setLink}
					>
						<LinkSimple />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Hyperlink</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("code")}
						disabled={
							!editor.can().chain().focus().toggleCode().run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleCode().run()
						}
					>
						<CodeIcon />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Inline Code</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("codeBlock")}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleCodeBlock()
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleCodeBlock().run()
						}
					>
						<CodeBlockIcon />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Code Block</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("heading", { level: 1 })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleHeading({ level: 1 })
								.run()
						}
						onPressedChange={() =>
							editor
								.chain()
								.focus()
								.toggleHeading({ level: 1 })
								.run()
						}
					>
						<TextHOne />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Heading 1</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("heading", { level: 2 })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleHeading({ level: 2 })
								.run()
						}
						onPressedChange={() =>
							editor
								.chain()
								.focus()
								.toggleHeading({ level: 2 })
								.run()
						}
					>
						<TextHTwo />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Heading 2</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("heading", { level: 3 })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleHeading({ level: 3 })
								.run()
						}
						onPressedChange={() =>
							editor
								.chain()
								.focus()
								.toggleHeading({ level: 3 })
								.run()
						}
					>
						<TextHThree />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Heading 3</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("paragraph")}
						onPressedChange={() =>
							editor.chain().focus().setParagraph().run()
						}
					>
						<ParagraphIcon />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Paragraph</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive({ textAlign: "left" })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.setTextAlign("left")
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().setTextAlign("left").run()
						}
					>
						<TextAlignLeft />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Align Left</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive({ textAlign: "center" })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.setTextAlign("center")
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().setTextAlign("center").run()
						}
					>
						<TextAlignCenter />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Align Center</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive({ textAlign: "right" })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.setTextAlign("right")
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().setTextAlign("right").run()
						}
					>
						<TextAlignRight />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Align Right</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive({ textAlign: "justify" })}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.setTextAlign("justify")
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().setTextAlign("justify").run()
						}
					>
						<TextAlignJustify />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Align Justify</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Toggle
						size="sm"
						pressed={editor.isActive("bulletList")}
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.toggleBulletList()
								.run()
						}
						onPressedChange={() =>
							editor.chain().focus().toggleBulletList().run()
						}
					>
						<ListBullets />
					</Toggle>
				</TooltipTrigger>
				<TooltipContent>Bullet List</TooltipContent>
			</Tooltip>

			<Tooltip content="Numbered List">
				<TooltipTrigger></TooltipTrigger>
				<TooltipContent></TooltipContent>
				<Toggle
					size="sm"
					pressed={editor.isActive("orderedList")}
					disabled={
						!editor.can().chain().focus().toggleOrderedList().run()
					}
					onPressedChange={() =>
						editor.chain().focus().toggleOrderedList().run()
					}
				>
					<ListNumbers />
				</Toggle>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Button
						size="sm"
						variant="ghost"
						className="px-2"
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.liftListItem("listItem")
								.run()
						}
						onClick={() =>
							editor
								.chain()
								.focus()
								.liftListItem("listItem")
								.run()
						}
					>
						<TextOutdent />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Outdent</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Button
						size="sm"
						variant="ghost"
						className="px-2"
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.sinkListItem("listItem")
								.run()
						}
						onClick={() =>
							editor
								.chain()
								.focus()
								.sinkListItem("listItem")
								.run()
						}
					>
						<TextIndent />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Indent</TooltipContent>
			</Tooltip>

			<Popover>
				<Tooltip>
					<TooltipTrigger>
						<PopoverTrigger asChild>
							<Button size="sm" variant="ghost" className="px-2">
								<ImageIcon />
							</Button>
						</PopoverTrigger>
					</TooltipTrigger>
					<TooltipContent>Insert Image</TooltipContent>
				</Tooltip>
				<PopoverContent className="w-80">
					<InsertImageForm
						onInsert={(props) =>
							editor.chain().focus().setImage(props).run()
						}
					/>
				</PopoverContent>
			</Popover>

			<Tooltip>
				<TooltipTrigger>
					<Button
						size="sm"
						variant="ghost"
						className="px-2"
						disabled={
							!editor.can().chain().focus().setHardBreak().run()
						}
						onClick={() =>
							editor.chain().focus().setHardBreak().run()
						}
					>
						<KeyReturn />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Insert Break Line</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Button
						size="sm"
						variant="ghost"
						className="px-2"
						disabled={
							!editor
								.can()
								.chain()
								.focus()
								.setHorizontalRule()
								.run()
						}
						onClick={() =>
							editor.chain().focus().setHorizontalRule().run()
						}
					>
						<Minus />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Insert Horizontal Rule</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Button
						size="sm"
						variant="ghost"
						className="px-2"
						disabled={!editor.can().undo()}
						onClick={() => editor.chain().focus().undo().run()}
					>
						<ArrowCounterClockwise />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Undo</TooltipContent>
			</Tooltip>

			<Tooltip>
				<TooltipTrigger>
					<Button
						size="sm"
						variant="ghost"
						className="px-2"
						disabled={!editor.can().redo()}
						onClick={() => editor.chain().focus().redo().run()}
					>
						<ArrowClockwise />
					</Button>
				</TooltipTrigger>
				<TooltipContent>Redo</TooltipContent>
			</Tooltip>
		</div>
	);
};

export const RichInput = forwardRef(
	(
		{
			content,
			onChange,
			footer,
			hideToolbar = false,
			className,
			editorClassName,
			...props
		},
		_ref
	) => {
		const editor = useEditor({
			extensions: [
				StarterKit,
				Image,
				Underline,
				Highlight,
				TextAlign.configure({ types: ["heading", "paragraph"] }),
				Link.extend({ inclusive: false }).configure({
					openOnClick: false,
				}),
			],
			editorProps: {
				attributes: {
					class: cn(
						"prose prose-sm prose-zinc max-h-[200px] max-w-none overflow-y-scroll dark:prose-invert focus:outline-none [&_*]:my-2",
						editorClassName
					),
				},
			},
			content,
			parseOptions: { preserveWhitespace: "full" },
			onUpdate: ({ editor }) => onChange?.(editor.getHTML()),
		});

		const [dragActive, setDragActive] = React.useState(false);

		const handleDrop = React.useCallback(
			(e) => {
				e.preventDefault();
				setDragActive(false);

				if (e.dataTransfer.files && e.dataTransfer.files[0]) {
					const file = e.dataTransfer.files[0];
					if (file.type.startsWith("image/")) {
						const reader = new FileReader();
						reader.onload = (event) => {
							editor
								.chain()
								.focus()
								.setImage({
									src: event.target.result,
									alt: file.name,
									title: file.name,
								})
								.run();
						};
						reader.readAsDataURL(file);
					}
				}
			},
			[editor]
		);

		const handleDrag = React.useCallback((e) => {
			e.preventDefault();
			e.stopPropagation();
			if (e.type === "dragenter" || e.type === "dragover") {
				setDragActive(true);
			} else if (e.type === "dragleave") {
				setDragActive(false);
			}
		}, []);

		if (!editor) {
			return (
				<div className="space-y-2">
					<Skeleton
						className={cn(
							"h-[42px] w-full",
							hideToolbar && "hidden"
						)}
					/>
					<Skeleton className="h-[90px] w-full" />
				</div>
			);
		}

		return (
			<div
				className={`${dragActive ? "ring-2 ring-blue-500 ring-opacity-50" : ""}`}
				onDragEnter={handleDrag}
				onDragLeave={handleDrag}
				onDragOver={handleDrag}
				onDrop={handleDrop}
			>
				{!hideToolbar && <Toolbar editor={editor} />}

				{editor && (
					<BubbleMenu
						editor={editor}
						tippyOptions={{ duration: 100 }}
						className="bg-white rounded-md shadow-lg border p-1 flex gap-1"
					>
						<Button
							variant={
								editor.isActive("bold") ? "secondary" : "ghost"
							}
							size="sm"
							onClick={() =>
								editor.chain().focus().toggleBold().run()
							}
						>
							<Bold className="h-3 w-3" />
						</Button>
						<Button
							variant={
								editor.isActive("italic")
									? "secondary"
									: "ghost"
							}
							size="sm"
							onClick={() =>
								editor.chain().focus().toggleItalic().run()
							}
						>
							<Italic className="h-3 w-3" />
						</Button>
						<Button
							variant={
								editor.isActive("code") ? "secondary" : "ghost"
							}
							size="sm"
							onClick={() =>
								editor.chain().focus().toggleCode().run()
							}
						>
							<Code className="h-3 w-3" />
						</Button>
						<Button
							variant={
								editor.isActive("strike")
									? "secondary"
									: "ghost"
							}
							size="sm"
							onClick={() =>
								editor.chain().focus().toggleStrike().run()
							}
						>
							<TextStrikethrough className="h-3 w-3" />
						</Button>
						<Button
							variant={
								editor.isActive("underline")
									? "secondary"
									: "ghost"
							}
							size="sm"
							onClick={() =>
								editor.chain().focus().toggleUnderline().run()
							}
						>
							<TextAUnderline className="h-3 w-3" />
						</Button>
						<Button
							variant="ghost"
							size="sm"
							onClick={() => {
								const url = window.prompt("Enter URL");
								if (url) {
									editor
										.chain()
										.focus()
										.setLink({ href: url })
										.run();
								}
							}}
						>
							<LinkIcon className="h-3 w-3" />
						</Button>
						<Button
							variant={
								editor.isActive("codeBlock")
									? "secondary"
									: "ghost"
							}
							size="sm"
							onClick={() =>
								editor.chain().focus().toggleCodeBlock().run()
							}
						>
							<CodeBlockIcon className="h-3 w-3" />
						</Button>
					</BubbleMenu>
				)}

				<EditorContent
					editor={editor}
					className={cn(
						"grid min-h-[160px] w-full rounded-sm border bg-transparent px-3 py-2 text-sm placeholder:opacity-80 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary disabled:cursor-not-allowed disabled:opacity-50",
						hideToolbar && "pt-2",
						className
					)}
					{...props}
				/>

				{footer?.(editor)}
			</div>
		);
	}
);

RichInput.displayName = "RichInput";

================
File: components/ui/scroll-area.jsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}>
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/select.jsx
================
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}>
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}>
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}>
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn("p-1", position === "popper" &&
          "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]")}>
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props} />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: components/ui/separator.jsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef((
  { className, orientation = "horizontal", decorative = true, ...props },
  ref
) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn(
      "shrink-0 bg-border",
      orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
      className
    )}
    {...props} />
))
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.jsx
================
"use client";
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva } from "class-variance-authority";
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref} />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

const SheetContent = React.forwardRef(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
      {children}
      <SheetPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-2 text-center sm:text-left", className)}
    {...props} />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props} />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/sidebar.jsx
================
"use client";
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import {
	Tooltip,
	TooltipContent,
	TooltipProvider,
	TooltipTrigger,
} from "@/components/ui/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

const SidebarContext = React.createContext(null);

function useSidebar() {
	const context = React.useContext(SidebarContext);
	if (!context) {
		throw new Error("useSidebar must be used within a SidebarProvider.");
	}

	return context;
}

const SidebarProvider = React.forwardRef(
	(
		{
			defaultOpen = true,
			open: openProp,
			onOpenChange: setOpenProp,
			className,
			style,
			children,
			...props
		},
		ref
	) => {
		const isMobile = useIsMobile();
		const [openMobile, setOpenMobile] = React.useState(false);

		// This is the internal state of the sidebar.
		// We use openProp and setOpenProp for control from outside the component.
		const [_open, _setOpen] = React.useState(defaultOpen);
		const open = openProp ?? _open;
		const setOpen = React.useCallback(
			(value) => {
				const openState =
					typeof value === "function" ? value(open) : value;
				if (setOpenProp) {
					setOpenProp(openState);
				} else {
					_setOpen(openState);
				}

				// This sets the cookie to keep the sidebar state.
				document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
			},
			[setOpenProp, open]
		);

		// Helper to toggle the sidebar.
		const toggleSidebar = React.useCallback(() => {
			return isMobile
				? setOpenMobile((open) => !open)
				: setOpen((open) => !open);
		}, [isMobile, setOpen, setOpenMobile]);

		// Adds a keyboard shortcut to toggle the sidebar.
		React.useEffect(() => {
			const handleKeyDown = (event) => {
				if (
					event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
					(event.metaKey || event.ctrlKey)
				) {
					event.preventDefault();
					toggleSidebar();
				}
			};

			window.addEventListener("keydown", handleKeyDown);
			return () => window.removeEventListener("keydown", handleKeyDown);
		}, [toggleSidebar]);

		// We add a state so that we can do data-state="expanded" or "collapsed".
		// This makes it easier to style the sidebar with Tailwind classes.
		const state = open ? "expanded" : "collapsed";

		const contextValue = React.useMemo(
			() => ({
				state,
				open,
				setOpen,
				isMobile,
				openMobile,
				setOpenMobile,
				toggleSidebar,
			}),
			[
				state,
				open,
				setOpen,
				isMobile,
				openMobile,
				setOpenMobile,
				toggleSidebar,
			]
		);

		return (
			<SidebarContext.Provider value={contextValue}>
				<TooltipProvider delayDuration={0}>
					<div
						style={{
							"--sidebar-width": SIDEBAR_WIDTH,
							"--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
							...style,
						}}
						className={cn(
							"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
							className
						)}
						ref={ref}
						{...props}
					>
						{children}
					</div>
				</TooltipProvider>
			</SidebarContext.Provider>
		);
	}
);
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef(
	(
		{
			side = "left",
			variant = "sidebar",
			collapsible = "offcanvas",
			className,
			children,
			...props
		},
		ref
	) => {
		const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

		if (collapsible === "none") {
			return (
				<div
					className={cn(
						"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
						className
					)}
					ref={ref}
					{...props}
				>
					{children}
				</div>
			);
		}

		if (isMobile) {
			return (
				<Sheet
					open={openMobile}
					onOpenChange={setOpenMobile}
					{...props}
				>
					<SheetContent
						data-sidebar="sidebar"
						data-mobile="true"
						className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
						style={{
							"--sidebar-width": SIDEBAR_WIDTH_MOBILE,
						}}
						side={side}
					>
						<div className="flex h-full w-full flex-col">
							{children}
						</div>
					</SheetContent>
				</Sheet>
			);
		}

		return (
			<div
				ref={ref}
				className="group peer hidden md:block text-sidebar-foreground"
				data-state={state}
				data-collapsible={state === "collapsed" ? collapsible : ""}
				data-variant={variant}
				data-side={side}
			>
				{/* This is what handles the sidebar gap on desktop */}
				<div
					className={cn(
						"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
						"group-data-[collapsible=offcanvas]:w-0",
						"group-data-[side=right]:rotate-180",
						variant === "floating" || variant === "inset"
							? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
							: "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
					)}
				/>
				<div
					className={cn(
						"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
						side === "left"
							? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
							: "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
						// Adjust the padding for floating and inset variants.
						variant === "floating" || variant === "inset"
							? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
							: "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
						className
					)}
					{...props}
				>
					<div
						data-sidebar="sidebar"
						className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
					>
						{children}
					</div>
				</div>
			</div>
		);
	}
);
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef(
	({ className, onClick, ...props }, ref) => {
		const { toggleSidebar } = useSidebar();

		return (
			<Button
				ref={ref}
				data-sidebar="trigger"
				variant="ghost"
				size="icon"
				className={cn("h-7 w-7", className)}
				onClick={(event) => {
					onClick?.(event);
					toggleSidebar();
				}}
				{...props}
			>
				<PanelLeft />
				<span className="sr-only">Toggle Sidebar</span>
			</Button>
		);
	}
);
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef(({ className, ...props }, ref) => {
	const { toggleSidebar } = useSidebar();

	return (
		<button
			ref={ref}
			data-sidebar="rail"
			aria-label="Toggle Sidebar"
			tabIndex={-1}
			onClick={toggleSidebar}
			title="Toggle Sidebar"
			className={cn(
				"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
				"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
				"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
				"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
				"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
				"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
				className
			)}
			{...props}
		/>
	);
});
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<main
			ref={ref}
			className={cn(
				"relative flex min-h-svh flex-1 flex-col bg-background",
				"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
				className
			)}
			{...props}
		/>
	);
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<Input
			ref={ref}
			data-sidebar="input"
			className={cn(
				"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
				className
			)}
			{...props}
		/>
	);
});
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<div
			ref={ref}
			data-sidebar="header"
			className={cn("flex flex-col gap-2 p-2", className)}
			{...props}
		/>
	);
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<div
			ref={ref}
			data-sidebar="footer"
			className={cn("flex flex-col gap-2 p-2", className)}
			{...props}
		/>
	);
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<Separator
			ref={ref}
			data-sidebar="separator"
			className={cn("mx-2 w-auto bg-sidebar-border", className)}
			{...props}
		/>
	);
});
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<div
			ref={ref}
			data-sidebar="content"
			className={cn(
				"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
				className
			)}
			{...props}
		/>
	);
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef(({ className, ...props }, ref) => {
	return (
		<div
			ref={ref}
			data-sidebar="group"
			className={cn(
				"relative flex w-full min-w-0 flex-col p-2",
				className
			)}
			{...props}
		/>
	);
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef(
	({ className, asChild = false, ...props }, ref) => {
		const Comp = asChild ? Slot : "div";

		return (
			<Comp
				ref={ref}
				data-sidebar="group-label"
				className={cn(
					"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
					"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
					className
				)}
				{...props}
			/>
		);
	}
);
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef(
	({ className, asChild = false, ...props }, ref) => {
		const Comp = asChild ? Slot : "button";

		return (
			<Comp
				ref={ref}
				data-sidebar="group-action"
				className={cn(
					"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
					// Increases the hit area of the button on mobile.
					"after:absolute after:-inset-2 after:md:hidden",
					"group-data-[collapsible=icon]:hidden",
					className
				)}
				{...props}
			/>
		);
	}
);
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef(({ className, ...props }, ref) => (
	<div
		ref={ref}
		data-sidebar="group-content"
		className={cn("w-full text-sm", className)}
		{...props}
	/>
));
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef(({ className, ...props }, ref) => (
	<ul
		ref={ref}
		data-sidebar="menu"
		className={cn("flex w-full min-w-0 flex-col gap-1", className)}
		{...props}
	/>
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef(({ className, ...props }, ref) => (
	<li
		ref={ref}
		data-sidebar="menu-item"
		className={cn("group/menu-item relative", className)}
		{...props}
	/>
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
	"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
	{
		variants: {
			variant: {
				default:
					"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				outline:
					"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
			},
			size: {
				default: "h-8 text-sm",
				sm: "h-7 text-xs",
				lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
			},
		},
		defaultVariants: {
			variant: "default",
			size: "default",
		},
	}
);

const SidebarMenuButton = React.forwardRef(
	(
		{
			asChild = false,
			isActive = false,
			variant = "default",
			size = "default",
			tooltip,
			className,
			...props
		},
		ref
	) => {
		const Comp = asChild ? Slot : "button";
		const { isMobile, state } = useSidebar();

		const button = (
			<Comp
				ref={ref}
				data-sidebar="menu-button"
				data-size={size}
				data-active={isActive}
				className={cn(
					sidebarMenuButtonVariants({ variant, size }),
					className
				)}
				{...props}
			/>
		);

		if (!tooltip) {
			return button;
		}

		if (typeof tooltip === "string") {
			tooltip = {
				children: tooltip,
			};
		}

		return (
			<Tooltip>
				<TooltipTrigger asChild>{button}</TooltipTrigger>
				<TooltipContent
					side="right"
					align="center"
					hidden={state !== "collapsed" || isMobile}
					{...tooltip}
				/>
			</Tooltip>
		);
	}
);
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef(
	({ className, asChild = false, showOnHover = false, ...props }, ref) => {
		const Comp = asChild ? Slot : "button";

		return (
			<Comp
				ref={ref}
				data-sidebar="menu-action"
				className={cn(
					"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
					// Increases the hit area of the button on mobile.
					"after:absolute after:-inset-2 after:md:hidden",
					"peer-data-[size=sm]/menu-button:top-1",
					"peer-data-[size=default]/menu-button:top-1.5",
					"peer-data-[size=lg]/menu-button:top-2.5",
					"group-data-[collapsible=icon]:hidden",
					showOnHover &&
						"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
					className
				)}
				{...props}
			/>
		);
	}
);
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef(({ className, ...props }, ref) => (
	<div
		ref={ref}
		data-sidebar="menu-badge"
		className={cn(
			"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
			"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
			"peer-data-[size=sm]/menu-button:top-1",
			"peer-data-[size=default]/menu-button:top-1.5",
			"peer-data-[size=lg]/menu-button:top-2.5",
			"group-data-[collapsible=icon]:hidden",
			className
		)}
		{...props}
	/>
));
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef(
	({ className, showIcon = false, ...props }, ref) => {
		// Random width between 50 to 90%.
		const width = React.useMemo(() => {
			return `${Math.floor(Math.random() * 40) + 50}%`;
		}, []);

		return (
			<div
				ref={ref}
				data-sidebar="menu-skeleton"
				className={cn(
					"rounded-md h-8 flex gap-2 px-2 items-center",
					className
				)}
				{...props}
			>
				{showIcon && (
					<Skeleton
						className="size-4 rounded-md"
						data-sidebar="menu-skeleton-icon"
					/>
				)}
				<Skeleton
					className="h-4 flex-1 max-w-[--skeleton-width]"
					data-sidebar="menu-skeleton-text"
					style={{
						"--skeleton-width": width,
					}}
				/>
			</div>
		);
	}
);
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef(({ className, ...props }, ref) => (
	<ul
		ref={ref}
		data-sidebar="menu-sub"
		className={cn(
			"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
			"group-data-[collapsible=icon]:hidden",
			className
		)}
		{...props}
	/>
));
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef(({ ...props }, ref) => (
	<li ref={ref} {...props} />
));
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef(
	({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
		const Comp = asChild ? Slot : "a";

		return (
			<Comp
				ref={ref}
				data-sidebar="menu-sub-button"
				data-size={size}
				data-active={isActive}
				className={cn(
					"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
					"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
					size === "sm" && "text-xs",
					size === "md" && "text-sm",
					"group-data-[collapsible=icon]:hidden",
					className
				)}
				{...props}
			/>
		);
	}
);
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
	Sidebar,
	SidebarContent,
	SidebarFooter,
	SidebarGroup,
	SidebarGroupAction,
	SidebarGroupContent,
	SidebarGroupLabel,
	SidebarHeader,
	SidebarInput,
	SidebarInset,
	SidebarMenu,
	SidebarMenuAction,
	SidebarMenuBadge,
	SidebarMenuButton,
	SidebarMenuItem,
	SidebarMenuSkeleton,
	SidebarMenuSub,
	SidebarMenuSubButton,
	SidebarMenuSubItem,
	SidebarProvider,
	SidebarRail,
	SidebarSeparator,
	SidebarTrigger,
	useSidebar,
};

================
File: components/ui/skeleton.jsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}) {
  return (<div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />);
}

export { Skeleton }

================
File: components/ui/sonner.jsx
================
"use client";
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    (<Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props} />)
  );
}

export { Toaster }

================
File: components/ui/Spinner.jsx
================
import React from "react";

export function Spinner() {
	return (
		<div role="status">
			<svg
				aria-hidden="true"
				className="w-8 h-8 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600"
				viewBox="0 0 100 101"
				fill="none"
				xmlns="http://www.w3.org/2000/svg"
			>
				<path
					d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"
					fill="currentColor"
				/>
				<path
					d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"
					fill="currentFill"
				/>
			</svg>
			<span className="sr-only">Loading...</span>
		</div>
	);
}

================
File: components/ui/switch.jsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}>
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )} />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/tabs.jsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props} />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props} />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props} />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.jsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef(({ className, ...props }, ref) => {
  return (
    (<textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/toggle-group.jsx
================
"use client";
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    (<ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(toggleVariants({
        variant: context.variant || variant,
        size: context.size || size,
      }), className)}
      {...props}>
      {children}
    </ToggleGroupPrimitive.Item>)
  );
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: components/ui/toggle.jsx
================
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3 min-w-10",
        sm: "h-9 px-2.5 min-w-9",
        lg: "h-11 px-5 min-w-11",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props} />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.jsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/url-input.jsx
================
import { Tag } from "@phosphor-icons/react";
import { urlSchema } from "@/schema/shared/url";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Popover, PopoverContent, PopoverTrigger } from "./ui/popover";
import { Tooltip } from "./ui/tooltip";
import React, { forwardRef, useState } from "react";

export const URLInput = forwardRef(function URLInput(
	{ id, field, placeholder, onChange },
	ref
) {
	const [touched, setTouched] = useState(false);

	return (
		<div>
			<div className="flex gap-x-1">
				{/* URL Input Field */}
				<Input
					ref={ref}
					id={id}
					value={field?.url || ""}
					className={`flex-1`}
					placeholder={placeholder || "https://example.com"}
					onChange={(event) => onChange("url", event.target.value)}
					onBlur={() => setTouched(true)} // Mark field as touched on blur
				/>

				{/* Label Popover */}
				<Popover>
					<Tooltip content="Add a label">
						<PopoverTrigger asChild>
							<Button
								size="icon"
								variant="ghost"
								aria-label="Add label"
							>
								<Tag />
							</Button>
						</PopoverTrigger>
					</Tooltip>
					<PopoverContent className="p-1.5">
						<Input
							value={field?.label || ""}
							placeholder="Label (optional)"
							onChange={(event) =>
								onChange("label", event.target.value)
							}
						/>
					</PopoverContent>
				</Popover>
			</div>
		</div>
	);
});

================
File: components/wrapper/blog-wrapper.jsx
================
import Footer from "./footer";
import { Header1 } from "./header";

export function BlogWrapper({ children }) {
	return (
		<>
			<Header1 />
			<main className="flex min-w-screen min-h-screen flex-col pt-[4rem] items-center dark:bg-black bg-white justify-between isolate">
				{children}
			</main>
			<Footer />
		</>
	);
}

================
File: components/wrapper/footer.jsx
================
import { siteConfig } from "@/config/site";
import Link from "next/link";
import Image from "next/image";

const Footer = () => {
	return (
		<footer className="py-3 my-4">
			<ul className="flex justify-center border-b pb-3 mb-3">
				<li className="mx-2">
					<Link
						href="/"
						className="text-gray-500 hover:text-gray-700"
					>
						Home
					</Link>
				</li>
				{/* <li className="mx-2">
					<Link
						href="/#features"
						className="text-gray-500 hover:text-gray-700"
					>
						Features
					</Link>
				</li> */}
				<li className="mx-2">
					<Link
						href="/#pricing"
						className="text-gray-500 hover:text-gray-700"
					>
						Pricing
					</Link>
				</li>
				<li className="mx-2">
					<Link
						href="/privacy-policy"
						className="text-gray-500 hover:text-gray-700"
					>
						Privacy
					</Link>
				</li>
				<li className="mx-2">
					<Link
						href="/terms"
						className="text-gray-500 hover:text-gray-700"
					>
						Terms
					</Link>
				</li>
			</ul>
			<p className="text-center text-gray-500 flex items-center justify-center gap-2">
				<Image
					src={siteConfig.icon}
					alt={siteConfig.name}
					width={24}
					height={24}
					className="text-black dark:text-white"
				/>
				©{" "}
				<span className="text-sm">
					{new Date().getFullYear()} {siteConfig.name}
				</span>
			</p>
		</footer>
	);
};

export default Footer;

================
File: components/wrapper/form-wrapper.jsx
================
import Link from "next/link";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { siteConfig } from "@/config/site";

function FormWrapper({ title, description, children }) {
	return (
		<div className="container relative h-screen flex-col items-center justify-center grid lg:max-w-none lg:grid-cols-2 lg:px-0 px-5">
			<div className="absolute left-4 top-4 md:left-8 md:top-8">
				<Link
					className="flex items-center text-lg font-medium"
					href="/"
				>
					<span className="font-semibold text-xl">
						{siteConfig.name}
					</span>
				</Link>
			</div>
			<div className="relative hidden h-full flex-col bg-muted p-10 text-white dark:border-r lg:flex">
				<div className="absolute inset-0 bg-zinc-900" />
				<div className="relative z-20 flex items-center text-lg font-medium">
					<Link
						className="flex items-center text-lg font-medium"
						href="/"
					>
						<span className="font-semibold text-xl">
							{siteConfig.name}
						</span>
					</Link>
				</div>
				<div className="relative z-20 mt-auto">
					<blockquote className="space-y-2">
						<p className="text-lg">{siteConfig.description}</p>
						<footer className="text-sm">{siteConfig.name}</footer>
					</blockquote>
				</div>
			</div>
			<div className="lg:p-8">
				<div className="mx-auto my-auto flex w-full flex-col justify-center space-y-6 sm:w-[350px]">
					<div className="flex flex-col space-y-2 text-center">
						<h1 className="text-2xl font-semibold tracking-tight">
							{title}
						</h1>
						<p className="text-sm text-muted-foreground">
							{description}
						</p>
					</div>
					{children}
				</div>
			</div>
		</div>
	);
}

export default FormWrapper;

================
File: components/wrapper/header.jsx
================
"use client";

import { Button } from "@/components/ui/button";
import {
	NavigationMenu,
	NavigationMenuItem,
	NavigationMenuLink,
	NavigationMenuList,
} from "@/components/ui/navigation-menu";
import { Menu, MoveRight, X } from "lucide-react";
import { useState, useEffect, useMemo } from "react";
import Link from "next/link";
import ModeToggle from "../mode-toggle";
import { SignedIn, SignedOut, UserButton } from "@clerk/nextjs";
import { siteConfig } from "@/config/site";

export const Header1 = () => {
	const [isOpen, setOpen] = useState(false);
	const [scrolled, setScrolled] = useState(false);

	const navItems = useMemo(
		() => [
			{
				title: "Features",
				href: "/#features",
			},
			{
				title: "Contact us",
				href: "/contact-us",
			},
			{
				title: "Pricing",
				href: "/#pricing",
			},
			{
				title: "Blog",
				href: "/blog",
			},
		],
		[]
	);

	useEffect(() => {
		const handleScroll = () => {
			setScrolled(window.scrollY > 20);
		};

		window.addEventListener("scroll", handleScroll);
		return () => window.removeEventListener("scroll", handleScroll);
	}, []);

	return (
		<header
			className={`w-full z-40 fixed top-0 left-0 border-b backdrop-blur-md transition-colors duration-200 ${
				scrolled ? "bg-background/60" : "bg-background"
			}`}
		>
			<div className="container relative mx-auto min-h-14 flex items-center justify-between gap-4">
				{/* Logo Section */}
				<div className="flex-none">
					<Link href={"/"}>
						<Button variant="icon">
							<span className="text-2xl font-bold">
								{siteConfig.name}
							</span>
						</Button>
					</Link>
				</div>

				{/* Navigation Section - Centered */}
				<div className="hidden lg:flex flex-auto justify-center">
					<NavigationMenu>
						<NavigationMenuList className="flex gap-4">
							{navItems.map((item) => (
								<NavigationMenuItem key={item.title}>
									<NavigationMenuLink>
										<Link href={item.href}>
											<Button variant="ghost">
												{item.title}
											</Button>
										</Link>
									</NavigationMenuLink>
								</NavigationMenuItem>
							))}
						</NavigationMenuList>
					</NavigationMenu>
				</div>

				{/* User Controls Section */}
				<div className="flex items-center gap-4">
					<ModeToggle />
					<div className="border-r hidden md:inline"></div>
					<SignedIn>
						<UserButton />
						<Link href={"/dashboard/portfolios"}>
							<Button size="sm">Dashboard</Button>
						</Link>
					</SignedIn>
					<SignedOut>
						<Link href={"/sign-in"}>
							<Button variant="outline">Sign in</Button>
						</Link>
						<Link href={"/sign-up"}>
							<Button>Get started</Button>
						</Link>
					</SignedOut>
					<div className="flex lg:hidden">
						<Button
							variant="ghost"
							onClick={() => setOpen(!isOpen)}
						>
							{isOpen ? (
								<X className="w-5 h-5" />
							) : (
								<Menu className="w-5 h-5" />
							)}
						</Button>
					</div>
				</div>

				{/* Mobile Menu */}
				{isOpen && (
					<div className="absolute top-14 border-t flex flex-col w-full right-0 bg-background shadow-lg py-4 container gap-8">
						{navItems.map((item) => (
							<Link
								key={item.title}
								href={item.href}
								className="flex justify-between items-center"
							>
								<span className="text-muted-foreground">
									{item.title}
								</span>
								<MoveRight className="w-4 h-4 stroke-1" />
							</Link>
						))}
					</div>
				)}
			</div>
		</header>
	);
};

================
File: components/wrapper/page-wrapper.jsx
================
import Footer from "./footer";
import { Header1 } from "./header";

export default function PageWrapper({ children }) {
	return (
		<>
			<Header1 />
			<main className="flex min-w-screen min-h-screen flex-col pt-[4rem] items-center dark:bg-black bg-white justify-between">
				<div className="absolute z-[-99] pointer-events-none inset-0 flex items-center justify-center [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)]"></div>
				{children}
			</main>
			<Footer />
		</>
	);
}

================
File: config/site.js
================
import { FileCode, Code, Globe, Book } from "lucide-react";
// import MediaImage from "@/public/illustartions/media.png";
// import ChannelImage from "@/public/illustartions/channels.png";
// import CloudImage from "@/public/illustartions/cloud.png";

export const siteConfig = {
	name: "Spaark",
	heroIntro: "Create your tech portfolio in minutes",
	description:
		"Choose from our beautiful templates, fill in your details, and get your portfolio live in minutes.",
	keywords: [
		"portfolio builder",
		"developer portfolio",
		"developer portfolio generator",
		"portfolio website",
		"portfolio maker",
		"portfolio design",
		"portfolio management",
		"developer showcase",
		"portfolio template",
		"personal website",
		"wix alternatives",
		"wix pricing",
		"webflow alternatives",
		"webflow pricing",
		"squarespace alternatives",
		"squarespace pricing",
		"wordpress alternatives",
		"wordpress pricing",
	],
	author: "github.com/Oseni03",
	github: "https://github.com/Oseni03/Spaark",
	icon: "/icon.png",
	logo: "/logo.png",
	url: `https://${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
	twitterHandle: "@Oseni03",
	features: [
		{
			name: "Stunning Portfolio Templates",
			description:
				"Launch your professional tech portfolio in minutes with our mobile-responsive, SEO-optimized templates designed specifically for developers and tech professionals.",
			icon: FileCode,
			id: "templates",
		},
		{
			name: "Professional Domain Setup",
			description:
				"Stand out with a custom domain that matches your personal brand. Easy setup with full SSL security and fast global CDN included.",
			icon: Globe,
			id: "domain",
		},
		{
			name: "Built-in Tech Blog",
			description:
				"Boost your personal brand with an integrated technical blog. Share your expertise, attract recruiters, and establish thought leadership in your field.",
			icon: Book,
			id: "blog",
		},
		{
			name: "Developer-Focused Features",
			description:
				"Showcase your GitHub projects, tech stack, and coding achievements with dedicated sections that highlight your technical expertise.",
			icon: Code,
			id: "tech-features",
		},
	],
};

================
File: context/OrganizationContext.js
================
"use client";

import { createContext, useContext, useState, useEffect } from "react";
import { useOrganization, useOrganizationList } from "@clerk/nextjs";
import { logger } from "@/lib/utils";

const OrganizationContext = createContext({});

export function OrganizationProvider({ children }) {
	const { organization } = useOrganization();
	const { userMemberships } = useOrganizationList();
	const [activeOrg, setActiveOrg] = useState(null);
	const [subscription, setSubscription] = useState(null);
	const portfolioCount = 4; // Fetch portfolio count here

	useEffect(() => {
		if (organization) {
			setActiveOrg(organization);
			fetchOrgSubscription(organization.id)
				.then(setSubscription)
				.catch(logger.error);
		}
	}, [organization]);

	const value = {
		organization: activeOrg,
		userMemberships,
		subscription,
		isAdmin: activeOrg?.membership?.role === "admin",
		isMember: activeOrg?.membership?.role === "member",
		canManagePortfolios:
			activeOrg?.membership?.role === "admin" ||
			activeOrg?.membership?.permissions?.includes("portfolio:manage"),
		canCreateOrganization: !activeOrg, // Only allow when not in an organization
		isIndividualAccount: !activeOrg,
		hasActiveSubscription:
			subscription?.status === "active" && subscription?.type === "TEAM",
		subscriptionType: subscription?.type || null,
		portfolioCount,
		portfolioLimit: subscription?.portfolioLimit || 1,
		hasReachedPortfolioLimit:
			portfolioCount >= (subscription?.portfolioLimit || 1),
		remainingPortfolios: Math.max(
			0,
			(subscription?.portfolioLimit || 1) - portfolioCount
		),
	};

	return (
		<OrganizationContext.Provider value={value}>
			{children}
		</OrganizationContext.Provider>
	);
}

export const useOrganizationContext = () => {
	const context = useContext(OrganizationContext);
	if (!context) {
		throw new Error(
			"useOrganizationContext must be used within an OrganizationProvider"
		);
	}
	return context;
};

// Helper function to fetch organization subscription
async function fetchOrgSubscription(orgId) {
	try {
		const response = await fetch(
			`/api/organizations/${orgId}/subscription`
		);
		if (!response.ok) throw new Error("Failed to fetch subscription");
		return await response.json();
	} catch (error) {
		console.error("Error fetching organization subscription:", error);
		return null;
	}
}

================
File: context/PortfolioContext.js
================
"use client";

import React, { createContext, useContext } from "react";

const PortfolioContext = createContext(null);

export const usePortfolio = () => {
	const context = useContext(PortfolioContext);
	if (!context) {
		throw new Error("usePortfolio must be used within a PortfolioProvider");
	}
	return context;
};

export const PortfolioProvider = ({
	portfolio,
	metaTags,
	blogEnabled,
	children,
}) => {
	return (
		<PortfolioContext.Provider value={{ portfolio, metaTags, blogEnabled }}>
			{children}
		</PortfolioContext.Provider>
	);
};

================
File: context/UserContext.js
================
"use client";

import React, { createContext, useContext } from "react";

// Create the UserContext
const UserContext = createContext(null);

// Custom hook for consuming the context
export const useUser = () => {
	const context = useContext(UserContext);
	if (!context) {
		throw new Error("useUser must be used within a UserProvider");
	}
	return context;
};

// Provider component
export const UserProvider = ({ user, metaTags, children }) => {
	return (
		<UserContext.Provider value={{ user, metaTags }}>
			{children}
		</UserContext.Provider>
	);
};

================
File: emails/templates/contact-notification.jsx
================
import React from "react";
import {
	Body,
	Container,
	Head,
	Hr,
	Html,
	Preview,
	Section,
	Text,
	Link,
} from "@react-email/components";
import { siteConfig } from "@/config/site";

const ContactNotification = ({ name, email, message }) => {
	return (
		<Html lang="en">
			<Head />
			<Preview>New contact form submission from {name}</Preview>
			<Body style={main}>
				<Container style={container}>
					<Section>
						<Text style={heading}>New Contact Form Submission</Text>
						<Text style={paragraph}>
							You have received a new message from your portfolio
							contact form.
						</Text>
						<Hr style={hr} />
						<Text style={paragraph}>
							<strong>Name:</strong> {name}
						</Text>
						<Text style={paragraph}>
							<strong>Email:</strong>{" "}
							<Link href={`mailto:${email}`} style={link}>
								{email}
							</Link>
						</Text>
						<Text style={paragraph}>
							<strong>Message:</strong>
						</Text>
						<Text style={messageBox}>{message}</Text>
						<Hr style={hr} />
						<Text style={paragraph}>Best regards,</Text>
						<Text style={paragraph}>{siteConfig.name}</Text>
					</Section>
				</Container>
			</Body>
		</Html>
	);
};

const main = {
	backgroundColor: "#f9f9f9",
	fontFamily:
		'-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif',
};

const container = {
	margin: "0 auto",
	padding: "20px",
	maxWidth: "580px",
	backgroundColor: "#ffffff",
	borderRadius: "8px",
	boxShadow: "0 2px 4px rgba(0, 0, 0, 0.1)",
};

const heading = {
	fontSize: "24px",
	letterSpacing: "-0.5px",
	lineHeight: "1.3",
	fontWeight: "400",
	color: "#333333",
	padding: "17px 0 0",
};

const paragraph = {
	margin: "0 0 15px",
	fontSize: "15px",
	lineHeight: "1.4",
	color: "#555555",
};

const messageBox = {
	padding: "15px",
	backgroundColor: "#f4f4f4",
	borderRadius: "4px",
	marginTop: "10px",
	whiteSpace: "pre-wrap",
	fontSize: "16px",
	lineHeight: "1.5",
	color: "#333333",
};

const hr = {
	borderColor: "#cccccc",
	margin: "20px 0",
};

const link = {
	color: "#007BFF",
	textDecoration: "none",
};

export default ContactNotification;

================
File: generateCodes.js
================
const { PrismaClient } = require("@prisma/client");
const { v4: uuidv4 } = require("uuid");
const fs = require("fs");

const prisma = new PrismaClient();

async function generateAndStoreCodes(count = 100) {
	console.log(`Starting to generate ${count} codes...`);

	try {
		// Generate and store codes in batches to avoid memory issues
		const batchSize = 25;
		const batches = Math.ceil(count / batchSize);
		let allCodes = [];

		for (let i = 0; i < batches; i++) {
			const currentBatchSize = Math.min(batchSize, count - i * batchSize);
			const codes = Array.from({ length: currentBatchSize }, () => ({
				code: uuidv4(),
				type: "DISCOUNT", // Set code type here
				isActive: true,
				createdAt: new Date(),
				updatedAt: new Date(),
			}));

			console.log(`Generating batch ${i + 1} of ${batches}...`);

			// Create codes in database
			await prisma.code.createMany({
				data: codes,
			});

			allCodes = allCodes.concat(codes.map((c) => c.code));

			console.log(`Batch ${i + 1} of ${batches} completed.`);
		}

		// Write all codes to CSV
		fs.writeFileSync("generated_codes.csv", allCodes.join("\n"));
		console.log("CSV file written successfully.");

		console.log(`Successfully generated and stored ${count} codes.`);
	} catch (error) {
		console.error("Error generating codes:", error);
	} finally {
		await prisma.$disconnect();
	}
}

// Run the function
generateAndStoreCodes(1000);

================
File: hooks/use-code-activation.js
================
"use client";
import { useState, useCallback } from "react";
import { toast } from "sonner";
import { logger } from "@/lib/utils";
import { getUserByEmail } from "@/services/user";
import { activateUserCode } from "@/services/code";

const INITIAL_FORM_STATE = {
	email: "",
	code: "",
};

export const useCodeActivation = () => {
	const [formData, setFormData] = useState(INITIAL_FORM_STATE);
	const [errors, setErrors] = useState({});
	const [isSubmitting, setIsSubmitting] = useState(false);

	const validateEmail = (email) => {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	};

	const validateForm = useCallback(() => {
		const newErrors = {};

		// Email validation
		if (!formData.email.trim()) {
			newErrors.email = "Email is required";
		} else if (!validateEmail(formData.email)) {
			newErrors.email = "Please enter a valid email address";
		}

		// Code validation
		if (!formData.code.trim()) {
			newErrors.code = "Code is required";
		} else if (formData.code.length < 4) {
			newErrors.code = "Code must be at least 4 characters long";
		}

		setErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	}, [formData, setErrors]);

	const handleChange = useCallback(
		(e) => {
			const { name, value } = e.target;
			setFormData((prev) => ({
				...prev,
				[name]: value,
			}));

			// Clear error when user starts typing
			if (errors[name]) {
				setErrors((prev) => ({
					...prev,
					[name]: "",
				}));
			}
		},
		[errors, setErrors, setFormData]
	);

	const resetForm = useCallback(() => {
		setFormData(INITIAL_FORM_STATE);
		setErrors({});
	}, [setErrors, setFormData]);

	const handleSubmit = async (e) => {
		e.preventDefault();
		if (!validateForm() || isSubmitting) return;

		setIsSubmitting(true);
		logger.info("Code activation submission attempt", {
			email: formData.email,
			code: formData.code,
		});

		try {
			const user = await getUserByEmail(formData.email);

			if (!user.success) {
				toast.error("User does not exist!");
				throw new Error(user.error || "User does not exist");
			}

			const userCode = await activateUserCode(
				formData.code,
				user.data.id
			);

			if (!userCode.success) {
				logger.error("Invalid code: ", formData.code);
			} else {
				logger.info("Code activation successful");
			}

			toast.success("Code activated!");
			resetForm();
		} catch (error) {
			logger.error("Code activation failed", {
				error,
				email: formData.email,
				code: formData.code,
			});

			toast.error(
				error instanceof Error
					? error.message
					: "Error sending message. Please try again later."
			);
		} finally {
			setIsSubmitting(false);
		}
	};

	return {
		formData,
		errors,
		isSubmitting,
		handleChange,
		handleSubmit,
	};
};

================
File: hooks/use-contact-form.js
================
"use client";
import { useState, useCallback } from "react";
import { toast } from "sonner";
import { logger } from "@/lib/utils";
import { saveContact } from "@/services/contact";

const INITIAL_FORM_STATE = {
	email: "",
	full_name: "",
	message: "",
};

export const useContactForm = () => {
	const [formData, setFormData] = useState(INITIAL_FORM_STATE);
	const [errors, setErrors] = useState({});
	const [isSubmitting, setIsSubmitting] = useState(false);

	const validateEmail = (email) => {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	};

	const validateForm = useCallback(() => {
		const newErrors = {};

		// Email validation
		if (!formData.email.trim()) {
			newErrors.email = "Email is required";
		} else if (!validateEmail(formData.email)) {
			newErrors.email = "Please enter a valid email address";
		}

		// Full name validation
		if (!formData.full_name.trim()) {
			newErrors.full_name = "Full name is required";
		} else if (formData.full_name.length < 2) {
			newErrors.full_name = "Name must be at least 2 characters long";
		}

		// Message validation
		if (!formData.message.trim()) {
			newErrors.message = "Message is required";
		} else if (formData.message.trim().length < 10) {
			newErrors.message = "Message must be at least 10 characters long";
		} else if (formData.message.length > 1000) {
			newErrors.message = "Message must not exceed 1000 characters";
		}

		setErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	}, [formData, setErrors]);

	const handleChange = useCallback(
		(e) => {
			const { name, value } = e.target;
			setFormData((prev) => ({
				...prev,
				[name]: value,
			}));

			// Clear error when user starts typing
			if (errors[name]) {
				setErrors((prev) => ({
					...prev,
					[name]: "",
				}));
			}
		},
		[errors, setErrors, setFormData]
	);

	const resetForm = useCallback(() => {
		setFormData(INITIAL_FORM_STATE);
		setErrors({});
	}, [setErrors, setFormData]);

	const handleSubmit = async (e) => {
		e.preventDefault();
		if (!validateForm() || isSubmitting) return;

		setIsSubmitting(true);
		logger.info("Contact form submission attempt", {
			email: formData.email,
			name: formData.full_name,
		});

		try {
			const response = await saveContact(formData);

			if (response.success) {
				toast.success("Message sent successfully!");
				resetForm();
				logger.info("Contact form submitted successfully");
			} else {
				throw new Error(response.message || "Failed to send message");
			}
		} catch (error) {
			logger.error("Contact form submission failed", {
				error,
				email: formData.email,
			});

			toast.error(
				error instanceof Error
					? error.message
					: "Error sending message. Please try again later."
			);
		} finally {
			setIsSubmitting(false);
		}
	};

	return {
		formData,
		errors,
		isSubmitting,
		handleChange,
		handleSubmit,
		resetForm,
	};
};

================
File: hooks/use-media-query.js
================
import { useEffect, useState } from "react";

export function useMediaQuery(query) {
    const [matches, setMatches] = useState(false);

    useEffect(() => {
        const media = window.matchMedia(query);
        if (media.matches !== matches) {
            setMatches(media.matches);
        }
        const listener = () => setMatches(media.matches);
        media.addEventListener("change", listener);
        return () => media.removeEventListener("change", listener);
    }, [matches, query]);

    return matches;
}

================
File: hooks/use-mobile.jsx
================
import * as React from "react";

const MOBILE_BREAKPOINT = 1024;

export function useIsMobile() {
	const [isMobile, setIsMobile] = React.useState(undefined);

	React.useEffect(() => {
		const mql = window.matchMedia(
			`(max-width: ${MOBILE_BREAKPOINT - 1}px)`
		);
		const onChange = () => {
			setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
		};
		mql.addEventListener("change", onChange);
		setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
		return () => mql.removeEventListener("change", onChange);
	}, []);

	return !!isMobile;
}

================
File: hooks/use-user-contact-form.jsx
================
"use client";
import { useState, useCallback } from "react";
import { toast } from "sonner";
import { logger } from "@/lib/utils";
import { useParams } from "next/navigation";

const INITIAL_FORM_STATE = {
	email: "",
	full_name: "",
	message: "",
};

export const useUserContactForm = () => {
	const { subdomain } = useParams();
	const [formData, setFormData] = useState(INITIAL_FORM_STATE);
	const [errors, setErrors] = useState({});
	const [isSubmitting, setIsSubmitting] = useState(false);

	const validateEmail = (email) => {
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		return emailRegex.test(email);
	};

	const validateForm = useCallback(() => {
		const newErrors = {};

		// Email validation
		if (!formData.email.trim()) {
			newErrors.email = "Email is required";
		} else if (!validateEmail(formData.email)) {
			newErrors.email = "Please enter a valid email address";
		}

		// Full name validation
		if (!formData.full_name.trim()) {
			newErrors.full_name = "Full name is required";
		} else if (formData.full_name.length < 2) {
			newErrors.full_name = "Name must be at least 2 characters long";
		}

		// Message validation
		if (!formData.message.trim()) {
			newErrors.message = "Message is required";
		} else if (formData.message.trim().length < 10) {
			newErrors.message = "Message must be at least 10 characters long";
		} else if (formData.message.length > 1000) {
			newErrors.message = "Message must not exceed 1000 characters";
		}

		setErrors(newErrors);
		return Object.keys(newErrors).length === 0;
	}, [formData, setErrors]);

	const handleChange = useCallback(
		(e) => {
			const { name, value } = e.target;
			setFormData((prev) => ({
				...prev,
				[name]: value,
			}));

			// Clear error when user starts typing
			if (errors[name]) {
				setErrors((prev) => ({
					...prev,
					[name]: "",
				}));
			}
		},
		[errors, setErrors, setFormData]
	);

	const resetForm = useCallback(() => {
		setFormData(INITIAL_FORM_STATE);
		setErrors({});
	}, [setErrors, setFormData]);

	const handleSubmit = async (e) => {
		e.preventDefault();
		if (!validateForm() || isSubmitting) return;

		setIsSubmitting(true);
		logger.info("User contact form submission attempt", {
			email: formData.email,
			name: formData.full_name,
		});

		try {
			if (!subdomain) {
				throw new Error("Can't send contact email from builder page");
			}
			const response = await fetch("/api/send-user-contact-email", {
				method: "POST",
				headers: { "Content-Type": "application/json" },
				body: JSON.stringify({
					subdomain,
					subject: "New contact message",
					props: {
						name: formData.full_name,
						email: formData.email,
						message: formData.message,
					},
				}),
			});

			const { success, error } = await response.json();

			if (success) {
				toast.success("Message sent successfully!");
				resetForm();
				logger.info("Contact form submitted successfully");
			} else {
				toast.error(error || "Failed to send message");
			}
		} catch (error) {
			logger.error("Contact form submission failed", {
				error,
				email: formData.email,
			});

			toast.error(
				error instanceof Error
					? error.message
					: "Error sending message. Please try again later."
			);
		} finally {
			setIsSubmitting(false);
		}
	};

	return {
		formData,
		errors,
		isSubmitting,
		handleChange,
		handleSubmit,
		resetForm,
	};
};

================
File: hooks/use-verify-payment.js
================
"use client";

import { useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { toast } from "sonner";
import { logger } from "@/lib/utils";

export function useVerifyPayment() {
	const searchParams = useSearchParams() || new URLSearchParams();
	const status = searchParams.get("status");
	const tx_ref = searchParams.get("tx_ref");
	const transaction_id = searchParams.get("transaction_id");

	useEffect(() => {
		const verifyPayment = async () => {
			if ((!tx_ref && !transaction_id) || !status) {
				logger.error("Missing verification parameters", {
					tx_ref,
					transaction_id,
					status,
				});
				return;
			}

			logger.info("Starting payment verification", {
				tx_ref,
				transaction_id,
				status,
			});

			try {
				const response = await fetch("/api/payment/verify", {
					method: "POST",
					headers: { "Content-Type": "application/json" },
					body: JSON.stringify({
						tx_ref,
						transaction_id,
						status,
					}),
				});

				const data = await response.json();

				if (!response.ok) {
					throw new Error(
						data.message || "Payment verification failed"
					);
				}

				if (status === "successful") {
					toast.success("Payment verified successfully!");
				} else if (status === "cancelled") {
					toast.error("Payment was cancelled");
				} else {
					toast.error("Payment verification failed");
				}

				// Clear the URL params after verification
				window.history.replaceState({}, "", window.location.pathname);
			} catch (error) {
				logger.error("Payment verification error:", {
					error: error.message,
					tx_ref,
					transaction_id,
				});
				toast.error(error.message || "Error verifying payment");
			}
		};

		verifyPayment();
	}, [status, tx_ref, transaction_id]);
}

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./*"]
    }
  }
}

================
File: lib/blog-utils.js
================
import { getPortfolio } from "@/services/portfolio";
import { transformPortfolio } from "./utils";

export async function getPortfolioFromSlug(subdomain) {
	try {
		const portfolioResult = await getPortfolio(subdomain);

		if (!portfolioResult.success || !portfolioResult.data) {
			return { success: false, error: "Portfolio not found" };
		}

		const portfolio = transformPortfolio(portfolioResult.data);
		const metaTags = {
			title: portfolio.basics?.name || subdomain,
			description:
				portfolio.basics?.summary || "Welcome to my portfolio!",
			image: portfolio.basics?.picture,
			url: portfolio.customDomain
				? portfolio.customDomain
				: `${subdomain}.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`,
		};

		return {
			success: true,
			data: { portfolio, metaTags },
		};
	} catch (error) {
		console.error("Error fetching portfolio:", error);
		return { success: false, error: "Failed to fetch portfolio" };
	}
}

================
File: lib/db.js
================
import { PrismaClient } from "@prisma/client";

export const prisma = new PrismaClient();

================
File: lib/domains.js
================
export const addDomainToVercel = async (domain) => {
	return await fetch(
		`https://api.vercel.com/v10/projects/${
			process.env.PROJECT_ID_VERCEL
		}/domains${
			process.env.TEAM_ID_VERCEL
				? `?teamId=${process.env.TEAM_ID_VERCEL}`
				: ""
		}`,
		{
			method: "POST",
			headers: {
				Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
				"Content-Type": "application/json",
			},
			body: JSON.stringify({ name: domain }),
		}
	).then((res) => res.json());
};

export const removeDomainFromVercelProject = async (domain) => {
	return await fetch(
		`https://api.vercel.com/v9/projects/${
			process.env.PROJECT_ID_VERCEL
		}/domains/${domain}${
			process.env.TEAM_ID_VERCEL
				? `?teamId=${process.env.TEAM_ID_VERCEL}`
				: ""
		}`,
		{
			headers: {
				Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
			},
			method: "DELETE",
		}
	).then((res) => res.json());
};

export const getDomainResponse = async (domain) => {
	return await fetch(
		`https://api.vercel.com/v9/projects/${
			process.env.PROJECT_ID_VERCEL
		}/domains/${domain}${
			process.env.TEAM_ID_VERCEL
				? `?teamId=${process.env.TEAM_ID_VERCEL}`
				: ""
		}`,
		{
			method: "GET",
			headers: {
				Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
				"Content-Type": "application/json",
			},
		}
	).then((res) => res.json());
};

export const getConfigResponse = async (domain) => {
	return await fetch(
		`https://api.vercel.com/v6/domains/${domain}/config${
			process.env.TEAM_ID_VERCEL
				? `?teamId=${process.env.TEAM_ID_VERCEL}`
				: ""
		}`,
		{
			method: "GET",
			headers: {
				Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
				"Content-Type": "application/json",
			},
		}
	).then((res) => res.json());
};

export const verifyDomain = async (domain) => {
	return await fetch(
		`https://api.vercel.com/v9/projects/${
			process.env.PROJECT_ID_VERCEL
		}/domains/${domain}/verify${
			process.env.TEAM_ID_VERCEL
				? `?teamId=${process.env.TEAM_ID_VERCEL}`
				: ""
		}`,
		{
			method: "POST",
			headers: {
				Authorization: `Bearer ${process.env.AUTH_BEARER_TOKEN}`,
			},
		}
	).then((res) => res.json());
};

// Domain validation regex
export const validDomainRegex = new RegExp(
	/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,}$/
);

// Helper functions
export const getSubdomain = (name, apexName) => {
	if (name === apexName) return null;
	return name.slice(0, name.length - apexName.length - 1);
};

export const getApexDomain = (url) => {
	let domain;
	try {
		domain = new URL(url).hostname;
	} catch (e) {
		return "";
	}

	const parts = domain.split(".");
	if (parts.length > 2) {
		return parts.slice(-2).join(".");
	}
	return domain;
};

================
File: lib/upload-image.js
================
import { toast } from "sonner";

export const handleUpload = async (file) => {
	try {
		if (file.size / 1024 / 1024 > 5) {
			toast.error("File size too big (max 5MB)");
		} else if (
			!file.type.includes("png") &&
			!file.type.includes("jpg") &&
			!file.type.includes("jpeg")
		) {
			toast.error("Invalid file type (must be .png, .jpg, or .jpeg)");
		} else {
			const resp = await fetch("/api/file-upload", {
				method: "POST",
				headers: {
					"content-type": file?.type || "application/octet-stream",
					"x-vercel-filename":
						file?.name || `image-${Date.now()}.png`,
				},
				body: file,
			});

			const { blob } = await resp.json();
			return { success: true, data: blob };
		}
	} catch (error) {
		return;
	}
};

================
File: lib/utils.js
================
import { siteConfig } from "@/config/site";
import {
	certificationSchema,
	educationSchema,
	experienceSchema,
	hackathonSchema,
	profileSchema,
	projectSchema,
	skillSchema,
	testimonialSchema,
	teamSchema,
} from "@/schema/sections";
import { defaultBasics } from "@/schema/sections/basics";
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs) {
	return twMerge(clsx(inputs));
}

export function getInitials(fullName) {
	try {
		return fullName
			.split(" ")
			.map((word) => word[0]?.toUpperCase())
			.join("");
	} catch (error) {
		console.log("getInitials error: ", error);
		return "";
	}
}

export function isTrialing(createdAt) {
	const currentDate = new Date();
	const userDate = new Date(createdAt);
	const differenceInMs = currentDate - userDate;
	const differenceInDays = differenceInMs / (1000 * 60 * 60 * 24);

	return differenceInDays < 14;
}

export function formatDate(date) {
	if (!date) return "";
	return new Intl.DateTimeFormat("en-US", {
		year: "numeric",
		month: "long",
		day: "numeric",
	}).format(new Date(date));
}

const isClient = typeof window !== "undefined";
const isDev = process.env.NODE_ENV === "development";

const noopLogger = {
	info: () => {},
	error: () => {},
	warn: () => {},
	debug: () => {},
};

const devLogger = {
	info: (...args) => isDev && console.log("[INFO]", ...args),
	error: (...args) => isDev && console.log("[ERROR]", ...args),
	warn: (...args) => isDev && console.log("[WARN]", ...args),
	debug: (...args) => isDev && console.log("[DEBUG]", ...args),
};

// Use noop logger in production, dev logger in development
export const logger = isDev ? devLogger : noopLogger;
export const sortByDate = (a, b) => {
	const dateA = a.publishedAt || a.updatedAt;
	const dateB = b.publishedAt || b.updatedAt;
	return new Date(dateB) - new Date(dateA);
};

const serializeDate = (date) => {
	if (!date) return null;
	if (typeof date === "string") return date;
	if (date instanceof Date) return date.toISOString();
	return null;
};

export const transformPortfolio = (portfolio) => {
	logger.info("Transforming portfolio data", portfolio);

	// Serialize dates in basics
	const serializedBasics = portfolio?.basics
		? {
				...portfolio.basics,
				createdAt: serializeDate(portfolio.basics.createdAt),
				updatedAt: serializeDate(portfolio.basics.updatedAt),
			}
		: null;

	// Transform basics section
	const transformedBasics = {
		name: "Basics",
		visible: true,
		...defaultBasics,
		...(serializedBasics || {}),
	};

	// Transform each section
	const transformedSections = {
		certifications: {
			name: "Certifications",
			visible: true,
			id: "certification",
			items: Array.isArray(portfolio?.certifications)
				? portfolio.certifications.map((cert) => ({
						...certificationSchema.parse(cert),
						createdAt: serializeDate(cert.createdAt),
						updatedAt: serializeDate(cert.updatedAt),
					}))
				: [],
		},
		educations: {
			name: "Education",
			visible: true,
			id: "education",
			items: Array.isArray(portfolio?.educations)
				? portfolio.educations.map((edu) => ({
						...educationSchema.parse(edu),
						createdAt: serializeDate(edu.createdAt),
						updatedAt: serializeDate(edu.updatedAt),
					}))
				: [],
		},
		experiences: {
			name: "Experience",
			visible: true,
			id: "experience",
			items: Array.isArray(portfolio?.experiences)
				? portfolio.experiences.map((exp) => ({
						...experienceSchema.parse(exp),
						createdAt: serializeDate(exp.createdAt),
						updatedAt: serializeDate(exp.updatedAt),
					}))
				: [],
		},
		hackathons: {
			name: "Hackathons",
			visible: true,
			id: "hackathon",
			items: Array.isArray(portfolio?.hackathons)
				? portfolio.hackathons.map((hack) => ({
						...hackathonSchema.parse(hack),
						createdAt: serializeDate(hack.createdAt),
						updatedAt: serializeDate(hack.updatedAt),
					}))
				: [],
		},
		profiles: {
			name: "Profiles",
			visible: true,
			id: "profile",
			items: Array.isArray(portfolio?.profiles)
				? portfolio.profiles.map((prof) => ({
						...profileSchema.parse(prof),
						createdAt: serializeDate(prof.createdAt),
						updatedAt: serializeDate(prof.updatedAt),
					}))
				: [],
		},
		projects: {
			name: "Projects",
			visible: true,
			id: "project",
			items: Array.isArray(portfolio?.projects)
				? portfolio.projects.map((proj) => ({
						...projectSchema.parse(proj),
						createdAt: serializeDate(proj.createdAt),
						updatedAt: serializeDate(proj.updatedAt),
					}))
				: [],
		},
		skills: {
			name: "Skills",
			visible: true,
			id: "skill",
			items: Array.isArray(portfolio?.skills)
				? portfolio.skills.map((skill) => ({
						...skillSchema.parse(skill),
						createdAt: serializeDate(skill.createdAt),
						updatedAt: serializeDate(skill.updatedAt),
					}))
				: [],
		},
		testimonials: {
			name: "Testimonials",
			visible: true,
			id: "testimonial",
			items: Array.isArray(portfolio?.testimonials)
				? portfolio.testimonials.map((item) => ({
						...testimonialSchema.parse(item),
						createdAt: serializeDate(item.createdAt),
						updatedAt: serializeDate(item.updatedAt),
					}))
				: [],
		},
		teams: {
			name: "Team",
			visible: true,
			id: "team",
			items: Array.isArray(portfolio?.teams)
				? portfolio.teams.map((item) => ({
						...teamSchema.parse(item),
						createdAt: serializeDate(item.createdAt),
						updatedAt: serializeDate(item.updatedAt),
					}))
				: [],
		},
	};

	// Return transformed and serialized portfolio object
	return {
		id: portfolio.id,
		name: portfolio.name,
		slug: portfolio.slug,
		isLive: portfolio.isLive,
		blogEnabled: portfolio.blogEnabled,
		customDomain: portfolio.customDomain,
		template: portfolio.template,
		organizationId: portfolio.organizationId,
		createdAt: serializeDate(portfolio.createdAt),
		updatedAt: serializeDate(portfolio.updatedAt),
		basics: transformedBasics,
		...transformedSections,
	};
};

================
File: LICENCE.txt
================
MIT License

Copyright (c) 2024 Spaark

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: middleware.js
================
import { clerkMiddleware, createRouteMatcher } from "@clerk/nextjs/server";
import { NextResponse } from "next/server";

const isProtectedRoute = createRouteMatcher(["/builder(.*)", "/dashboard(.*)"]);

export default clerkMiddleware(async (auth, req) => {
	const { nextUrl: url, headers } = req;
	const { pathname, search } = url;

	// Enforce authentication for protected routes
	if (isProtectedRoute(req)) auth.protect();

	// Redirect specific paths to "/dashboard/portfolios"
	if (["/dashboard", "/builder"].includes(pathname)) {
		return NextResponse.redirect(new URL("/dashboard/portfolios", req.url));
	}

	// Determine the domain based on the environment
	const hostname = headers.get("host");
	const domain =
		process.env.NODE_ENV === "production"
			? hostname.replace(`.${process.env.NEXT_PUBLIC_ROOT_DOMAIN}`, "")
			: hostname
					.split(":")[0]
					.replace(".localhost", "")
					.replace("adequate-adequately-husky.ngrok-free.app", "");

	// Handle subdomains and API requests
	if (
		!domain ||
		["localhost", "www", process.env.NEXT_PUBLIC_ROOT_DOMAIN].includes(
			domain
		)
	) {
		return NextResponse.next();
	}

	// If it's an API request from a subdomain
	if (url.pathname.startsWith("/api/")) {
		// Rewrite to the main domain's API
		const mainDomain = process.env.NEXT_PUBLIC_ROOT_DOMAIN;
		let newURL;

		if (process.env.NODE_ENV === "production") {
			newURL = `https://${mainDomain}${pathname}${search}`;
		} else {
			newURL = `http://${mainDomain}${pathname}${search}`;
		}
		return NextResponse.rewrite(new URL(newURL, req.url));
	}

	// Pass the domain to the dynamic route
	return NextResponse.rewrite(new URL(`/${domain}${pathname}`, req.url));
});

// Define paths for middleware execution
export const config = {
	matcher: ["/((?!.*\\..*|_next).*)", "/", "/(api|trpc)(.*)"],
};

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
	async headers() {
		return [
			{
				// Apply these headers to all routes
				source: "/:path*",
				headers: [
					{
						key: "Access-Control-Allow-Credentials",
						value: "true",
					},
					{
						key: "Access-Control-Allow-Origin",
						value: process.env.NEXT_PUBLIC_APP_URL,
					},
					{
						key: "Access-Control-Allow-Methods",
						value: "GET, OPTIONS",
					},
					{
						key: "Access-Control-Allow-Headers",
						value: "Content-Type, Authorization, x-clerk-auth-status, x-clerk-auth-reason",
					},
				],
			},
		];
	},
	images: {
		domains: [
			"cdn.sanity.io",
			"assets.aceternity.com",
			"cdn.simpleicons.org",
		],
	},
};
export default nextConfig;

================
File: package.json
================
{
	"name": "portfolio-builder",
	"version": "0.1.0",
	"private": true,
	"scripts": {
		"dev": "next dev",
		"build": "prisma generate && next build",
		"start": "next start",
		"lint": "next lint",
		"postinstall": "prisma generate",
		"vercel-build": "prisma generate && next build",
		"prisma:generate": "prisma generate",
		"generate-codes": "node generateCodes.js"
	},
	"dependencies": {
		"@clerk/nextjs": "^6.9.3",
		"@dnd-kit/sortable": "^9.0.0",
		"@dnd-kit/utilities": "^3.2.2",
		"@hookform/resolvers": "^3.9.1",
		"@mdx-js/loader": "^3.1.0",
		"@mdx-js/react": "^3.1.0",
		"@next/mdx": "^15.1.6",
		"@paralleldrive/cuid2": "^2.2.2",
		"@phosphor-icons/react": "^2.1.7",
		"@portabletext/react": "^3.2.0",
		"@radix-ui/react-accordion": "^1.2.1",
		"@radix-ui/react-alert-dialog": "^1.1.2",
		"@radix-ui/react-aspect-ratio": "^1.1.1",
		"@radix-ui/react-avatar": "^1.1.1",
		"@radix-ui/react-checkbox": "^1.1.3",
		"@radix-ui/react-collapsible": "^1.1.1",
		"@radix-ui/react-context-menu": "^2.2.2",
		"@radix-ui/react-dialog": "^1.1.2",
		"@radix-ui/react-dropdown-menu": "^2.1.2",
		"@radix-ui/react-hover-card": "^1.1.3",
		"@radix-ui/react-label": "^2.1.0",
		"@radix-ui/react-navigation-menu": "^1.2.1",
		"@radix-ui/react-popover": "^1.1.2",
		"@radix-ui/react-radio-group": "^1.2.1",
		"@radix-ui/react-scroll-area": "^1.2.1",
		"@radix-ui/react-select": "^2.1.2",
		"@radix-ui/react-separator": "^1.1.0",
		"@radix-ui/react-slot": "^1.1.0",
		"@radix-ui/react-switch": "^1.1.2",
		"@radix-ui/react-tabs": "^1.1.1",
		"@radix-ui/react-toast": "^1.2.2",
		"@radix-ui/react-toggle": "^1.1.0",
		"@radix-ui/react-toggle-group": "^1.1.0",
		"@radix-ui/react-tooltip": "^1.1.4",
		"@react-email/components": "^0.0.31",
		"@reduxjs/toolkit": "^2.4.0",
		"@sanity/client": "^6.27.2",
		"@sanity/icons": "^3.5.7",
		"@sanity/image-url": "^1.1.0",
		"@sanity/vision": "^3.72.1",
		"@tabler/icons-react": "^3.28.1",
		"@tailwindcss/typography": "^0.5.16",
		"@tanstack/react-query": "^5.62.2",
		"@tanstack/react-table": "^8.20.5",
		"@tiptap/extension-highlight": "^2.10.3",
		"@tiptap/extension-image": "^2.10.3",
		"@tiptap/extension-link": "^2.10.3",
		"@tiptap/extension-text-align": "^2.10.3",
		"@tiptap/extension-underline": "^2.10.3",
		"@tiptap/react": "^2.10.3",
		"@tiptap/starter-kit": "^2.10.3",
		"@vercel/blob": "^0.27.0",
		"axios": "^1.7.8",
		"axios-retry": "^4.5.0",
		"class-variance-authority": "^0.7.1",
		"clsx": "^2.1.1",
		"cors": "^2.8.5",
		"dayjs": "^1.11.13",
		"framer-motion": "^11.16.1",
		"gray-matter": "^4.0.3",
		"html-react-parser": "^5.2.0",
		"js-cookie": "^3.0.5",
		"lucide-react": "^0.464.0",
		"next": "15.0.3",
		"next-sanity": "^9.8.46",
		"next-theme": "^0.1.5",
		"next-themes": "^0.4.4",
		"novel": "^0.5.0",
		"posthog-js": "^1.203.2",
		"react": "^18.3.1",
		"react-dom": "^18.3.1",
		"react-hook-form": "^7.54.0",
		"react-icons": "^5.4.0",
		"react-parallax-tilt": "^1.7.272",
		"react-redux": "^9.1.2",
		"react-resizable-panels": "^2.1.7",
		"react-zoom-pan-pinch": "^3.6.1",
		"redux-persist": "^6.0.0",
		"redux-persist-cookie-storage": "^1.0.0",
		"redux-thunk": "^3.1.0",
		"resend": "^4.0.1",
		"sanity": "^3.72.1",
		"sonner": "^1.7.0",
		"styled-components": "^6.1.14",
		"svix": "^1.42.0",
		"tailwind-merge": "^2.6.0",
		"tailwind-scrollbar-hide": "^2.0.0",
		"tailwindcss-animate": "^1.0.7",
		"tiptap": "^1.32.2",
		"usehooks-ts": "^3.1.0",
		"uuid": "^11.0.4",
		"zod": "^3.23.8"
	},
	"devDependencies": {
		"@prisma/client": "^6.1.0",
		"eslint": "^8",
		"eslint-config-next": "15.0.3",
		"postcss": "^8",
		"prisma": "^6.0.1",
		"tailwindcss": "^3.4.1"
	}
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: prisma/migrations/20241206200432_user_basics/migration.sql
================
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "email_address" TEXT NOT NULL,
    "email_verified" BOOLEAN NOT NULL DEFAULT false,
    "first_name" TEXT,
    "last_name" TEXT,
    "image_url" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Basics" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "headline" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "phone" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "url" TEXT,
    "picture" TEXT,
    "summary" TEXT NOT NULL,
    "about" TEXT NOT NULL,
    "userId" TEXT NOT NULL,

    CONSTRAINT "Basics_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_address_key" ON "User"("email_address");

-- CreateIndex
CREATE UNIQUE INDEX "Basics_userId_key" ON "Basics"("userId");

-- AddForeignKey
ALTER TABLE "Basics" ADD CONSTRAINT "Basics_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20241207014556_remove_user_table/migration.sql
================
/*
  Warnings:

  - You are about to drop the `User` table. If the table is not empty, all the data it contains will be lost.

*/
-- DropForeignKey
ALTER TABLE "Basics" DROP CONSTRAINT "Basics_userId_fkey";

-- DropTable
DROP TABLE "User";

================
File: prisma/migrations/20241207035053_add_profile/migration.sql
================
-- CreateTable
CREATE TABLE "Profile" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "network" TEXT NOT NULL,
    "username" TEXT NOT NULL,
    "icon" TEXT NOT NULL,
    "url" TEXT,

    CONSTRAINT "Profile_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Profile_userId_key" ON "Profile"("userId");

-- CreateIndex
CREATE INDEX "Profile_userId_idx" ON "Profile"("userId");

================
File: prisma/migrations/20241207210036_fix_profile/migration.sql
================
-- DropIndex
DROP INDEX "Profile_userId_idx";

-- DropIndex
DROP INDEX "Profile_userId_key";

================
File: prisma/migrations/20241207231543_added_datetime/migration.sql
================
-- AlterTable
ALTER TABLE "Basics" ADD COLUMN     "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN     "updatedAt" TIMESTAMP(3);

-- AlterTable
ALTER TABLE "Profile" ADD COLUMN     "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
ADD COLUMN     "updatedAt" TIMESTAMP(3);

================
File: prisma/migrations/20241208005629_add_experience/migration.sql
================
-- CreateTable
CREATE TABLE "Experience" (
    "id" SERIAL NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "company" TEXT NOT NULL,
    "position" TEXT NOT NULL,
    "location" TEXT,
    "date" TEXT NOT NULL,
    "summary" TEXT NOT NULL,
    "url" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Experience_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20241208014329_add_education/migration.sql
================
-- CreateTable
CREATE TABLE "Education" (
    "id" SERIAL NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "institution" TEXT NOT NULL,
    "studyType" TEXT NOT NULL,
    "date" TEXT NOT NULL,
    "summary" TEXT,
    "url" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Education_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20241208014848_modify_id/migration.sql
================
/*
  Warnings:

  - The primary key for the `Education` table will be changed. If it partially fails, the table could be left without primary key constraint.
  - The primary key for the `Experience` table will be changed. If it partially fails, the table could be left without primary key constraint.

*/
-- AlterTable
ALTER TABLE "Education" DROP CONSTRAINT "Education_pkey",
ALTER COLUMN "id" DROP DEFAULT,
ALTER COLUMN "id" SET DATA TYPE TEXT,
ADD CONSTRAINT "Education_pkey" PRIMARY KEY ("id");
DROP SEQUENCE "Education_id_seq";

-- AlterTable
ALTER TABLE "Experience" DROP CONSTRAINT "Experience_pkey",
ALTER COLUMN "id" DROP DEFAULT,
ALTER COLUMN "id" SET DATA TYPE TEXT,
ADD CONSTRAINT "Experience_pkey" PRIMARY KEY ("id");
DROP SEQUENCE "Experience_id_seq";

================
File: prisma/migrations/20241208020700_add_skill/migration.sql
================
-- CreateTable
CREATE TABLE "Skill" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "name" TEXT NOT NULL,
    "keywords" TEXT[],
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Skill_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20241208024605_add_certification/migration.sql
================
-- CreateTable
CREATE TABLE "Certification" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "name" TEXT NOT NULL,
    "issuer" TEXT NOT NULL,
    "date" TEXT NOT NULL,
    "summary" TEXT NOT NULL,
    "url" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Certification_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20241208230448_add_project/migration.sql
================
-- CreateTable
CREATE TABLE "Project" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "date" TEXT NOT NULL,
    "keywords" TEXT[],
    "url" TEXT,
    "source" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Project_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20241209003952_add_hackathon/migration.sql
================
-- CreateTable
CREATE TABLE "Hackathon" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "name" TEXT NOT NULL,
    "description" TEXT NOT NULL,
    "date" TEXT NOT NULL,
    "location" TEXT NOT NULL,
    "url" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Hackathon_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20241209161217_replace_skill_keywords_description/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `keywords` on the `Skill` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Skill" DROP COLUMN "keywords",
ADD COLUMN     "description" TEXT;

================
File: prisma/migrations/20241209162950_rename_project_keywords_to_technologies/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `keywords` on the `Project` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Project" DROP COLUMN "keywords",
ADD COLUMN     "technologies" TEXT[];

================
File: prisma/migrations/20241209164434_add_links_to_project/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `source` on the `Project` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Project" DROP COLUMN "source",
ADD COLUMN     "image" TEXT,
ADD COLUMN     "video" TEXT;

-- CreateTable
CREATE TABLE "Link" (
    "id" TEXT NOT NULL,
    "projectId" TEXT NOT NULL,
    "label" TEXT NOT NULL,
    "url" TEXT NOT NULL,
    "icon" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Link_pkey" PRIMARY KEY ("id")
);

-- AddForeignKey
ALTER TABLE "Link" ADD CONSTRAINT "Link_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "Project"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20241211012718_add_logo_experience/migration.sql
================
-- AlterTable
ALTER TABLE "Experience" ADD COLUMN     "logoURL" TEXT;

================
File: prisma/migrations/20241211014701_rename_logo_url_to_picture/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `logoURL` on the `Experience` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Experience" DROP COLUMN "logoURL",
ADD COLUMN     "picture" TEXT;

================
File: prisma/migrations/20241211025845_add_logo_to_education/migration.sql
================
-- AlterTable
ALTER TABLE "Education" ADD COLUMN     "logo" TEXT;

================
File: prisma/migrations/20241211121040_add_logo_to_hackathon/migration.sql
================
-- AlterTable
ALTER TABLE "Hackathon" ADD COLUMN     "logo" TEXT;

================
File: prisma/migrations/20241211135119_hackathon_add_links/migration.sql
================
-- AlterTable
ALTER TABLE "Link" ADD COLUMN     "hackathonId" TEXT;

-- AddForeignKey
ALTER TABLE "Link" ADD CONSTRAINT "Link_hackathonId_fkey" FOREIGN KEY ("hackathonId") REFERENCES "Hackathon"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20241211235042_link_fix_error/migration.sql
================
-- AlterTable
ALTER TABLE "Link" ALTER COLUMN "projectId" DROP NOT NULL;

================
File: prisma/migrations/20241214194244_add_user/migration.sql
================
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "email" TEXT,
    "username" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3),

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "User_username_key" ON "User"("username");

================
File: prisma/migrations/20241214201353_connect_user_to_sections/migration.sql
================
-- AddForeignKey
ALTER TABLE "Basics" ADD CONSTRAINT "Basics_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Profile" ADD CONSTRAINT "Profile_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Experience" ADD CONSTRAINT "Experience_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Education" ADD CONSTRAINT "Education_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Skill" ADD CONSTRAINT "Skill_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Certification" ADD CONSTRAINT "Certification_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Project" ADD CONSTRAINT "Project_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Hackathon" ADD CONSTRAINT "Hackathon_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20241214214530_minor_modifications/migration.sql
================
/*
  Warnings:

  - Made the column `email` on table `User` required. This step will fail if there are existing NULL values in that column.

*/
-- AlterTable
ALTER TABLE "Basics" ALTER COLUMN "phone" DROP NOT NULL;

-- AlterTable
ALTER TABLE "User" ALTER COLUMN "email" SET NOT NULL;

================
File: prisma/migrations/20241215020056_profile_modify/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `icon` on the `Profile` table. All the data in the column will be lost.
  - A unique constraint covering the columns `[network]` on the table `Profile` will be added. If there are existing duplicate values, this will fail.
  - Made the column `url` on table `Profile` required. This step will fail if there are existing NULL values in that column.

*/
-- AlterTable
ALTER TABLE "Profile" DROP COLUMN "icon",
ALTER COLUMN "url" SET NOT NULL;

-- CreateIndex
CREATE UNIQUE INDEX "Profile_network_key" ON "Profile"("network");

================
File: prisma/migrations/20241216024434_add_transaction/migration.sql
================
-- CreateTable
CREATE TABLE "Transaction" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "status" TEXT DEFAULT 'pending',
    "priceId" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Transaction_pkey" PRIMARY KEY ("id")
);

-- AddForeignKey
ALTER TABLE "Transaction" ADD CONSTRAINT "Transaction_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20241216042430_user_add_subscription_status/migration.sql
================
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "subscribed" BOOLEAN;

================
File: prisma/migrations/20241216053534_user_modify_subscribed/migration.sql
================
-- AlterTable
ALTER TABLE "User" ALTER COLUMN "subscribed" SET DEFAULT false;

================
File: prisma/migrations/20241231140609_add_contact/migration.sql
================
-- CreateTable
CREATE TABLE "Contact" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "full_name" TEXT NOT NULL,
    "message" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Contact_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20250107051206_add_code/migration.sql
================
/*
  Warnings:

  - A unique constraint covering the columns `[codeId]` on the table `User` will be added. If there are existing duplicate values, this will fail.

*/
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "codeId" TEXT;

-- CreateTable
CREATE TABLE "Code" (
    "id" TEXT NOT NULL,
    "code" TEXT NOT NULL,
    "type" TEXT,
    "value" DOUBLE PRECISION,
    "isActive" BOOLEAN NOT NULL DEFAULT true,
    "expiresAt" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3),
    "userId" TEXT,

    CONSTRAINT "Code_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Code_code_key" ON "Code"("code");

-- CreateIndex
CREATE UNIQUE INDEX "Code_userId_key" ON "Code"("userId");

-- CreateIndex
CREATE INDEX "Code_userId_idx" ON "Code"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "User_codeId_key" ON "User"("codeId");

-- AddForeignKey
ALTER TABLE "Code" ADD CONSTRAINT "Code_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE SET NULL ON UPDATE CASCADE;

================
File: prisma/migrations/20250117022156_fresh_tables/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `userId` on the `Basics` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Certification` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Education` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Experience` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Hackathon` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Profile` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Project` table. All the data in the column will be lost.
  - You are about to drop the column `userId` on the `Skill` table. All the data in the column will be lost.
  - A unique constraint covering the columns `[portfolioId]` on the table `Basics` will be added. If there are existing duplicate values, this will fail.
  - A unique constraint covering the columns `[portfolioId,network]` on the table `Profile` will be added. If there are existing duplicate values, this will fail.
  - Added the required column `portfolioId` to the `Basics` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Certification` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Education` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Experience` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Hackathon` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Profile` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Project` table without a default value. This is not possible if the table is not empty.
  - Added the required column `portfolioId` to the `Skill` table without a default value. This is not possible if the table is not empty.

*/
-- CreateEnum
CREATE TYPE "UserType" AS ENUM ('INDIVIDUAL', 'ORGANIZATION');

-- CreateEnum
CREATE TYPE "Role" AS ENUM ('OWNER', 'ADMIN', 'MANAGER', 'MEMBER');

-- CreateEnum
CREATE TYPE "Permission" AS ENUM ('MANAGE_ORGANIZATION', 'MANAGE_MEMBERS', 'INVITE_MEMBERS', 'MANAGE_ROLES', 'CREATE_PORTFOLIO', 'EDIT_PORTFOLIO', 'DELETE_PORTFOLIO', 'VIEW_ANALYTICS');

-- DropForeignKey
ALTER TABLE "Basics" DROP CONSTRAINT "Basics_userId_fkey";

-- DropForeignKey
ALTER TABLE "Certification" DROP CONSTRAINT "Certification_userId_fkey";

-- DropForeignKey
ALTER TABLE "Education" DROP CONSTRAINT "Education_userId_fkey";

-- DropForeignKey
ALTER TABLE "Experience" DROP CONSTRAINT "Experience_userId_fkey";

-- DropForeignKey
ALTER TABLE "Hackathon" DROP CONSTRAINT "Hackathon_userId_fkey";

-- DropForeignKey
ALTER TABLE "Profile" DROP CONSTRAINT "Profile_userId_fkey";

-- DropForeignKey
ALTER TABLE "Project" DROP CONSTRAINT "Project_userId_fkey";

-- DropForeignKey
ALTER TABLE "Skill" DROP CONSTRAINT "Skill_userId_fkey";

-- DropIndex
DROP INDEX "Basics_userId_key";

-- DropIndex
DROP INDEX "Profile_network_key";

-- AlterTable
ALTER TABLE "Basics" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Certification" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Education" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Experience" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Hackathon" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Profile" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Project" DROP COLUMN "userId",
ADD COLUMN     "github" TEXT,
ADD COLUMN     "portfolioId" TEXT NOT NULL,
ALTER COLUMN "updatedAt" DROP NOT NULL;

-- AlterTable
ALTER TABLE "Skill" DROP COLUMN "userId",
ADD COLUMN     "portfolioId" TEXT NOT NULL;

-- AlterTable
ALTER TABLE "Transaction" ALTER COLUMN "updatedAt" DROP NOT NULL;

-- AlterTable
ALTER TABLE "User" ADD COLUMN     "userType" "UserType" NOT NULL DEFAULT 'INDIVIDUAL';

-- CreateTable
CREATE TABLE "Organization" (
    "id" TEXT NOT NULL,
    "clerkOrgId" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "slug" TEXT NOT NULL,
    "industry" TEXT,
    "size" TEXT,
    "logo" TEXT,
    "website" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3),
    "allowMemberInvites" BOOLEAN NOT NULL DEFAULT false,
    "requireApproval" BOOLEAN NOT NULL DEFAULT true,
    "defaultRole" "Role" NOT NULL DEFAULT 'MEMBER',
    "ownerId" TEXT NOT NULL,

    CONSTRAINT "Organization_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "OrganizationMember" (
    "id" TEXT NOT NULL,
    "organizationId" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "role" "Role" NOT NULL DEFAULT 'MEMBER',
    "permissions" "Permission"[],
    "status" TEXT NOT NULL DEFAULT 'pending',
    "invitedBy" TEXT,
    "invitedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "joinedAt" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3),

    CONSTRAINT "OrganizationMember_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Portfolio" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "slug" TEXT NOT NULL,
    "isPublic" BOOLEAN NOT NULL DEFAULT true,
    "isPrimary" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3),
    "userId" TEXT NOT NULL,
    "organizationId" TEXT,

    CONSTRAINT "Portfolio_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE UNIQUE INDEX "Organization_clerkOrgId_key" ON "Organization"("clerkOrgId");

-- CreateIndex
CREATE UNIQUE INDEX "Organization_slug_key" ON "Organization"("slug");

-- CreateIndex
CREATE INDEX "Organization_ownerId_idx" ON "Organization"("ownerId");

-- CreateIndex
CREATE INDEX "OrganizationMember_organizationId_idx" ON "OrganizationMember"("organizationId");

-- CreateIndex
CREATE UNIQUE INDEX "OrganizationMember_userId_organizationId_key" ON "OrganizationMember"("userId", "organizationId");

-- CreateIndex
CREATE UNIQUE INDEX "Portfolio_slug_key" ON "Portfolio"("slug");

-- CreateIndex
CREATE INDEX "Portfolio_userId_idx" ON "Portfolio"("userId");

-- CreateIndex
CREATE INDEX "Portfolio_organizationId_idx" ON "Portfolio"("organizationId");

-- CreateIndex
CREATE UNIQUE INDEX "Basics_portfolioId_key" ON "Basics"("portfolioId");

-- CreateIndex
CREATE INDEX "Certification_portfolioId_idx" ON "Certification"("portfolioId");

-- CreateIndex
CREATE INDEX "Education_portfolioId_idx" ON "Education"("portfolioId");

-- CreateIndex
CREATE INDEX "Experience_portfolioId_idx" ON "Experience"("portfolioId");

-- CreateIndex
CREATE INDEX "Hackathon_portfolioId_idx" ON "Hackathon"("portfolioId");

-- CreateIndex
CREATE INDEX "Profile_portfolioId_idx" ON "Profile"("portfolioId");

-- CreateIndex
CREATE UNIQUE INDEX "Profile_portfolioId_network_key" ON "Profile"("portfolioId", "network");

-- CreateIndex
CREATE INDEX "Project_portfolioId_idx" ON "Project"("portfolioId");

-- CreateIndex
CREATE INDEX "Skill_portfolioId_idx" ON "Skill"("portfolioId");

-- CreateIndex
CREATE INDEX "Transaction_userId_idx" ON "Transaction"("userId");

-- AddForeignKey
ALTER TABLE "Organization" ADD CONSTRAINT "Organization_ownerId_fkey" FOREIGN KEY ("ownerId") REFERENCES "User"("id") ON DELETE RESTRICT ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "OrganizationMember" ADD CONSTRAINT "OrganizationMember_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "Organization"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "OrganizationMember" ADD CONSTRAINT "OrganizationMember_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Portfolio" ADD CONSTRAINT "Portfolio_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Portfolio" ADD CONSTRAINT "Portfolio_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "Organization"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Basics" ADD CONSTRAINT "Basics_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Profile" ADD CONSTRAINT "Profile_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Experience" ADD CONSTRAINT "Experience_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Education" ADD CONSTRAINT "Education_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Skill" ADD CONSTRAINT "Skill_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Certification" ADD CONSTRAINT "Certification_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Project" ADD CONSTRAINT "Project_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Hackathon" ADD CONSTRAINT "Hackathon_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20250126014952_add_template_portfolio/migration.sql
================
-- AlterTable
ALTER TABLE "Portfolio" ADD COLUMN     "template" TEXT NOT NULL DEFAULT 'minimal';

================
File: prisma/migrations/20250126015821_change_template_default/migration.sql
================
-- AlterTable
ALTER TABLE "Portfolio" ALTER COLUMN "template" SET DEFAULT 'default';

================
File: prisma/migrations/20250127001304_add_custom_domain_portfolio/migration.sql
================
-- AlterTable
ALTER TABLE "Portfolio" ADD COLUMN     "customDomain" TEXT;

================
File: prisma/migrations/20250201233849_add_subscription/migration.sql
================
/*
  Warnings:

  - Added the required column `amount` to the `Transaction` table without a default value. This is not possible if the table is not empty.
  - Made the column `status` on table `Transaction` required. This step will fail if there are existing NULL values in that column.

*/
-- AlterTable
ALTER TABLE "Transaction" ADD COLUMN     "amount" DOUBLE PRECISION NOT NULL,
ADD COLUMN     "subscriptionId" TEXT,
ALTER COLUMN "status" SET NOT NULL;

-- CreateTable
CREATE TABLE "Subscription" (
    "id" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "frequency" TEXT NOT NULL,
    "status" TEXT NOT NULL DEFAULT 'pending',
    "priceId" TEXT NOT NULL,
    "startDate" TIMESTAMP(3),
    "endDate" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3),

    CONSTRAINT "Subscription_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Blog" (
    "id" TEXT NOT NULL,
    "title" TEXT NOT NULL,
    "slug" TEXT NOT NULL,
    "content" JSONB,
    "excerpt" TEXT,
    "featuredImage" JSONB,
    "status" TEXT NOT NULL DEFAULT 'draft',
    "publishedAt" TIMESTAMP(3),
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    "views" INTEGER NOT NULL DEFAULT 0,
    "likes" INTEGER NOT NULL DEFAULT 0,
    "portfolioId" TEXT NOT NULL,
    "authorId" TEXT NOT NULL,

    CONSTRAINT "Blog_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Tag" (
    "id" TEXT NOT NULL,
    "name" TEXT NOT NULL,
    "slug" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Tag_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Comment" (
    "id" TEXT NOT NULL,
    "content" TEXT NOT NULL,
    "blogId" TEXT NOT NULL,
    "authorId" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Comment_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "_BlogToTag" (
    "A" TEXT NOT NULL,
    "B" TEXT NOT NULL,

    CONSTRAINT "_BlogToTag_AB_pkey" PRIMARY KEY ("A","B")
);

-- CreateIndex
CREATE UNIQUE INDEX "Subscription_userId_key" ON "Subscription"("userId");

-- CreateIndex
CREATE INDEX "Subscription_userId_idx" ON "Subscription"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "Blog_slug_key" ON "Blog"("slug");

-- CreateIndex
CREATE INDEX "Blog_portfolioId_idx" ON "Blog"("portfolioId");

-- CreateIndex
CREATE INDEX "Blog_authorId_idx" ON "Blog"("authorId");

-- CreateIndex
CREATE INDEX "Blog_status_idx" ON "Blog"("status");

-- CreateIndex
CREATE UNIQUE INDEX "Tag_name_key" ON "Tag"("name");

-- CreateIndex
CREATE UNIQUE INDEX "Tag_slug_key" ON "Tag"("slug");

-- CreateIndex
CREATE INDEX "Comment_blogId_idx" ON "Comment"("blogId");

-- CreateIndex
CREATE INDEX "Comment_authorId_idx" ON "Comment"("authorId");

-- CreateIndex
CREATE INDEX "_BlogToTag_B_index" ON "_BlogToTag"("B");

-- CreateIndex
CREATE INDEX "Transaction_subscriptionId_idx" ON "Transaction"("subscriptionId");

-- AddForeignKey
ALTER TABLE "Transaction" ADD CONSTRAINT "Transaction_subscriptionId_fkey" FOREIGN KEY ("subscriptionId") REFERENCES "Subscription"("id") ON DELETE SET NULL ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Subscription" ADD CONSTRAINT "Subscription_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Blog" ADD CONSTRAINT "Blog_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Comment" ADD CONSTRAINT "Comment_blogId_fkey" FOREIGN KEY ("blogId") REFERENCES "Blog"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "_BlogToTag" ADD CONSTRAINT "_BlogToTag_A_fkey" FOREIGN KEY ("A") REFERENCES "Blog"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "_BlogToTag" ADD CONSTRAINT "_BlogToTag_B_fkey" FOREIGN KEY ("B") REFERENCES "Tag"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20250202023115_add_blog_enabled/migration.sql
================
-- AlterTable
ALTER TABLE "Portfolio" ADD COLUMN     "blogEnabled" BOOLEAN NOT NULL DEFAULT false;

================
File: prisma/migrations/20250202154533_replace_is_public_with_is_live/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `isPublic` on the `Portfolio` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Portfolio" DROP COLUMN "isPublic",
ADD COLUMN     "isLive" BOOLEAN NOT NULL DEFAULT false;

================
File: prisma/migrations/20250202174524_add_portfolio_limit/migration.sql
================
-- AlterTable
ALTER TABLE "User" ADD COLUMN     "portfolioLimit" INTEGER NOT NULL DEFAULT 1;

================
File: prisma/migrations/20250204223606_modify_blog_featured_image/migration.sql
================
-- AlterTable
ALTER TABLE "Blog" ALTER COLUMN "featuredImage" SET DATA TYPE TEXT;

================
File: prisma/migrations/20250206235208_portfolio_add_testimonials/migration.sql
================
-- CreateTable
CREATE TABLE "Testimonial" (
    "id" TEXT NOT NULL,
    "portfolioId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "name" TEXT NOT NULL,
    "role" TEXT NOT NULL,
    "company" TEXT,
    "message" TEXT NOT NULL,
    "avatar" TEXT,
    "rating" INTEGER DEFAULT 5,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Testimonial_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE INDEX "Testimonial_portfolioId_idx" ON "Testimonial"("portfolioId");

-- AddForeignKey
ALTER TABLE "Testimonial" ADD CONSTRAINT "Testimonial_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20250207021905_portfolio_add_teams/migration.sql
================
-- AlterTable
ALTER TABLE "Link" ADD COLUMN     "teamId" TEXT;

-- CreateTable
CREATE TABLE "Team" (
    "id" TEXT NOT NULL,
    "portfolioId" TEXT NOT NULL,
    "visible" BOOLEAN NOT NULL DEFAULT true,
    "name" TEXT NOT NULL,
    "role" TEXT NOT NULL,
    "bio" TEXT,
    "avatar" TEXT,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Team_pkey" PRIMARY KEY ("id")
);

-- CreateIndex
CREATE INDEX "Team_portfolioId_idx" ON "Team"("portfolioId");

-- AddForeignKey
ALTER TABLE "Link" ADD CONSTRAINT "Link_teamId_fkey" FOREIGN KEY ("teamId") REFERENCES "Team"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Team" ADD CONSTRAINT "Team_portfolioId_fkey" FOREIGN KEY ("portfolioId") REFERENCES "Portfolio"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20250210035725_org_permissions/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `portfolioLimit` on the `User` table. All the data in the column will be lost.
  - A unique constraint covering the columns `[subscriptionId]` on the table `Organization` will be added. If there are existing duplicate values, this will fail.

*/
-- AlterTable
ALTER TABLE "Organization" ADD COLUMN     "subscriptionId" TEXT;

-- AlterTable
ALTER TABLE "Subscription" ADD COLUMN     "portfolioLimit" INTEGER NOT NULL DEFAULT 1,
ALTER COLUMN "userId" DROP NOT NULL;

-- AlterTable
ALTER TABLE "User" DROP COLUMN "portfolioLimit";

-- CreateIndex
CREATE UNIQUE INDEX "Organization_subscriptionId_key" ON "Organization"("subscriptionId");

-- AddForeignKey
ALTER TABLE "Organization" ADD CONSTRAINT "Organization_subscriptionId_fkey" FOREIGN KEY ("subscriptionId") REFERENCES "Subscription"("id") ON DELETE SET NULL ON UPDATE CASCADE;

================
File: prisma/migrations/20250211115432_connect_org_subscription/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `subscriptionId` on the `Organization` table. All the data in the column will be lost.
  - A unique constraint covering the columns `[organizationId]` on the table `Subscription` will be added. If there are existing duplicate values, this will fail.

*/
-- DropForeignKey
ALTER TABLE "Organization" DROP CONSTRAINT "Organization_subscriptionId_fkey";

-- DropIndex
DROP INDEX "Organization_subscriptionId_key";

-- AlterTable
ALTER TABLE "Organization" DROP COLUMN "subscriptionId";

-- AlterTable
ALTER TABLE "Subscription" ADD COLUMN     "organizationId" TEXT;

-- CreateIndex
CREATE UNIQUE INDEX "Subscription_organizationId_key" ON "Subscription"("organizationId");

-- CreateIndex
CREATE INDEX "Subscription_organizationId_idx" ON "Subscription"("organizationId");

-- AddForeignKey
ALTER TABLE "Subscription" ADD CONSTRAINT "Subscription_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "Organization"("id") ON DELETE SET NULL ON UPDATE CASCADE;

================
File: prisma/migrations/20250211122322_connect_transaction_organization/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `clerkOrgId` on the `Organization` table. All the data in the column will be lost.

*/
-- DropIndex
DROP INDEX "Organization_clerkOrgId_key";

-- AlterTable
ALTER TABLE "Organization" DROP COLUMN "clerkOrgId";

-- AlterTable
ALTER TABLE "Transaction" ADD COLUMN     "organizationId" TEXT,
ALTER COLUMN "userId" DROP NOT NULL;

-- CreateIndex
CREATE INDEX "Transaction_organizationId_idx" ON "Transaction"("organizationId");

-- AddForeignKey
ALTER TABLE "Transaction" ADD CONSTRAINT "Transaction_organizationId_fkey" FOREIGN KEY ("organizationId") REFERENCES "Organization"("id") ON DELETE CASCADE ON UPDATE CASCADE;

================
File: prisma/migrations/20250211125315_add_newsletter/migration.sql
================
-- CreateTable
CREATE TABLE "Newsletter" (
    "id" TEXT NOT NULL,
    "email" TEXT NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "Newsletter_pkey" PRIMARY KEY ("id")
);

================
File: prisma/migrations/20250217153022_project_remove_links/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `projectId` on the `Link` table. All the data in the column will be lost.
  - You are about to drop the column `github` on the `Project` table. All the data in the column will be lost.
  - You are about to drop the column `url` on the `Project` table. All the data in the column will be lost.

*/
-- DropForeignKey
ALTER TABLE "Link" DROP CONSTRAINT "Link_projectId_fkey";

-- AlterTable
ALTER TABLE "Link" DROP COLUMN "projectId";

-- AlterTable
ALTER TABLE "Project" DROP COLUMN "github",
DROP COLUMN "url",
ADD COLUMN     "source" TEXT,
ADD COLUMN     "website" TEXT;

================
File: prisma/migrations/20250220075206_portfolio_remove_is_primary/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `isPrimary` on the `Portfolio` table. All the data in the column will be lost.

*/
-- AlterTable
ALTER TABLE "Portfolio" DROP COLUMN "isPrimary";

================
File: prisma/migrations/20250221143127_user_remove_username/migration.sql
================
/*
  Warnings:

  - You are about to drop the column `username` on the `User` table. All the data in the column will be lost.

*/
-- DropIndex
DROP INDEX "User_username_key";

-- AlterTable
ALTER TABLE "User" DROP COLUMN "username";

================
File: prisma/migrations/migration_lock.toml
================
# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "postgresql"

================
File: prisma/schema.prisma
================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  INDIVIDUAL
  ORGANIZATION
}

enum Role {
  OWNER
  ADMIN
  MANAGER
  MEMBER
}

enum Permission {
  MANAGE_ORGANIZATION
  MANAGE_MEMBERS
  INVITE_MEMBERS
  MANAGE_ROLES
  CREATE_PORTFOLIO
  EDIT_PORTFOLIO
  DELETE_PORTFOLIO
  VIEW_ANALYTICS
}

model User {
  id         String    @id @default(cuid())
  email      String    @unique
  userType   UserType  @default(INDIVIDUAL)
  subscribed Boolean?  @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  // Relations
  portfolios    Portfolio[]
  memberships   OrganizationMember[]
  organizations Organization[] // Organizations owned by user
  transactions  Transaction[]
  subscription  Subscription?

  // One-to-one relation to Code
  code   Code?
  codeId String? @unique
}

model Organization {
  id         String    @id @default(cuid())
  // clerkOrgId String    @unique
  name       String
  slug       String    @unique
  industry   String?
  size       String?
  logo       String?
  website    String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt

  // Organization settings
  allowMemberInvites Boolean @default(false)
  requireApproval    Boolean @default(true)
  defaultRole        Role    @default(MEMBER)

  // Relations
  ownerId       String
  owner         User                 @relation(fields: [ownerId], references: [id])
  members       OrganizationMember[]
  portfolios    Portfolio[]
  transactions  Transaction[]

  // Add new subscription relation
  subscription   Subscription?

  @@index([ownerId])
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           Role         @default(MEMBER)
  permissions    Permission[]
  status         String       @default("pending") // pending, active, suspended
  invitedBy      String?
  invitedAt      DateTime     @default(now())
  joinedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime?    @updatedAt

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
}

model Portfolio {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  isLive       Boolean   @default(false)
  blogEnabled  Boolean   @default(false)
  customDomain String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  template     String    @default("default")

  // Ownership
  userId         String
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  // Portfolio content
  basics         Basics?
  profiles       Profile[] // Social profiles
  experiences    Experience[]
  educations     Education[]
  skills         Skill[]
  certifications Certification[]
  projects       Project[]
  hackathons     Hackathon[]
  blogs          Blog[]
  testimonials   Testimonial[]
  teams          Team[] // Add this line

  @@index([userId])
  @@index([organizationId])
}

model Basics {
  id          String    @id @default(cuid())
  name        String
  headline    String
  email       String
  phone       String?
  location    String
  url         String?
  picture     String?
  summary     String
  about       String
  portfolioId String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  // Relation to Portfolio
  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Profile {
  id          String    @id @default(cuid())
  portfolioId String
  visible     Boolean   @default(true)
  network     String // e.g., "github", "linkedin"
  username    String
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@unique([portfolioId, network])
  @@index([portfolioId])
}

model Experience {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true) // Visibility status of the profile
  company     String
  position    String
  location    String?
  date        String
  summary     String
  picture     String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Education {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  institution String
  studyType   String
  date        String
  summary     String?
  logo        String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Skill {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Certification {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  issuer      String
  date        String
  summary     String
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Project {
  id           String    @id @default(cuid())
  portfolioId  String
  visible      Boolean   @default(true)
  name         String
  description  String
  date         String
  technologies String[]
  website      String?
  source       String?
  image        String?
  video        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Link {
  id        String   @id @default(cuid())
  label     String
  url       String
  icon      String? // Slug for the icon (e.g., from simpleicons.org)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Hackathon   Hackathon? @relation(fields: [hackathonId], references: [id], onDelete: Cascade)
  hackathonId String?

  Team        Team?      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      String?
}

model Hackathon {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  description String
  date        String
  location    String
  url         String?
  logo        String?
  links       Link[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Transaction {
  id             String        @id @default(cuid())
  userId         String?
  organizationId String?
  status         String        @default("pending")
  priceId        String
  title          String
  amount         Float
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  user           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([subscriptionId])
}

model Subscription {
  id             String    @id @default(cuid())
  userId         String?   @unique
  organizationId String?   @unique
  type           String // INDIVIDUAL or TEAM
  frequency      String // weekly, monthly, yearly
  status         String    @default("pending")
  priceId        String
  startDate      DateTime?
  endDate        DateTime?
  portfolioLimit Int       @default(1)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt

  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  organization Organization?  @relation(fields: [organizationId], references: [id])

  @@index([userId])
  @@index([organizationId])
}

model Contact {
  id        String   @id @default(cuid())
  email     String
  full_name String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Code {
  id        String    @id @default(cuid())
  code      String    @unique
  type      String? // e.g., 'referral', 'discount', etc.
  value     Float? // optional value associated with the code
  isActive  Boolean   @default(true)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Optional relation to User - one Code can belong to one User
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Blog {
  id            String    @id @default(cuid())
  title         String
  slug          String    @unique
  content       Json? // For rich text content
  excerpt       String?   @db.Text
  featuredImage String?
  status        String    @default("draft") // draft, published
  publishedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  views         Int       @default(0)
  likes         Int       @default(0)

  // Relations
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  authorId    String // Clerk user ID
  tags        Tag[]
  comments    Comment[]

  @@index([portfolioId])
  @@index([authorId])
  @@index([status])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  authorId  String // Clerk user ID
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogId])
  @@index([authorId])
}

model Testimonial {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  role        String
  company     String?
  message     String
  avatar      String?
  rating      Int?     @default(5)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Team {
  id          String   @id @default(cuid())
  portfolioId String
  visible     Boolean  @default(true)
  name        String
  role        String
  bio         String?
  avatar      String?
  links       Link[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  portfolio Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId])
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/github.svg
================
<?xml version="1.0" encoding="utf-8"?>

<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg width="800px" height="800px" viewBox="0 -3.5 256 256" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMinYMin meet">

<g fill="#161614">

<path d="M127.505 0C57.095 0 0 57.085 0 127.505c0 56.336 36.534 104.13 87.196 120.99 6.372 1.18 8.712-2.766 8.712-6.134 0-3.04-.119-13.085-.173-23.739-35.473 7.713-42.958-15.044-42.958-15.044-5.8-14.738-14.157-18.656-14.157-18.656-11.568-7.914.872-7.752.872-7.752 12.804.9 19.546 13.14 19.546 13.14 11.372 19.493 29.828 13.857 37.104 10.6 1.144-8.242 4.449-13.866 8.095-17.05-28.32-3.225-58.092-14.158-58.092-63.014 0-13.92 4.981-25.295 13.138-34.224-1.324-3.212-5.688-16.18 1.235-33.743 0 0 10.707-3.427 35.073 13.07 10.17-2.826 21.078-4.242 31.914-4.29 10.836.048 21.752 1.464 31.942 4.29 24.337-16.497 35.029-13.07 35.029-13.07 6.94 17.563 2.574 30.531 1.25 33.743 8.175 8.929 13.122 20.303 13.122 34.224 0 48.972-29.828 59.756-58.22 62.912 4.573 3.957 8.648 11.717 8.648 23.612 0 17.06-.148 30.791-.148 34.991 0 3.393 2.295 7.369 8.759 6.117 50.634-16.879 87.122-64.656 87.122-120.973C255.009 57.085 197.922 0 127.505 0"/>

<path d="M47.755 181.634c-.28.633-1.278.823-2.185.389-.925-.416-1.445-1.28-1.145-1.916.275-.652 1.273-.834 2.196-.396.927.415 1.455 1.287 1.134 1.923M54.027 187.23c-.608.564-1.797.302-2.604-.589-.834-.889-.99-2.077-.373-2.65.627-.563 1.78-.3 2.616.59.834.899.996 2.08.36 2.65M58.33 194.39c-.782.543-2.06.034-2.849-1.1-.781-1.133-.781-2.493.017-3.038.792-.545 2.05-.055 2.85 1.07.78 1.153.78 2.513-.019 3.069M65.606 202.683c-.699.77-2.187.564-3.277-.488-1.114-1.028-1.425-2.487-.724-3.258.707-.772 2.204-.555 3.302.488 1.107 1.026 1.445 2.496.7 3.258M75.01 205.483c-.307.998-1.741 1.452-3.185 1.028-1.442-.437-2.386-1.607-2.095-2.616.3-1.005 1.74-1.478 3.195-1.024 1.44.435 2.386 1.596 2.086 2.612M85.714 206.67c.036 1.052-1.189 1.924-2.705 1.943-1.525.033-2.758-.818-2.774-1.852 0-1.062 1.197-1.926 2.721-1.951 1.516-.03 2.758.815 2.758 1.86M96.228 206.267c.182 1.026-.872 2.08-2.377 2.36-1.48.27-2.85-.363-3.039-1.38-.184-1.052.89-2.105 2.367-2.378 1.508-.262 2.857.355 3.049 1.398"/>

</g>

</svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/spaark.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" className="text-black dark:text-white">
  <!-- Main Container -->
  <g transform="translate(15, 15)">
    <!-- Outer Circle -->
    <circle 
      cx="35" 
      cy="35" 
      r="32" 
      fill="none" 
      stroke="currentColor" 
      stroke-width="3"
      stroke-dasharray="8 3"
    >
      <animateTransform
        attributeName="transform"
        type="rotate"
        from="0 35 35"
        to="360 35 35"
        dur="20s"
        repeatCount="indefinite"
      />
    </circle>
    
    <!-- Code Window Frame -->
    <rect 
      x="15" 
      y="15" 
      width="40" 
      height="40" 
      rx="6"
      fill="none" 
      stroke="currentColor" 
      stroke-width="3"
    />
    
    <!-- Spark Symbol -->
    <path 
      d="M25 35 L35 25 L45 35 L35 45 Z" 
      fill="currentColor"
      opacity="0.9"
    >
      <animate
        attributeName="opacity"
        values="0.9;0.5;0.9"
        dur="2s"
        repeatCount="indefinite"
      />
    </path>
    
    <!-- Small Code Lines -->
    <path 
      d="M48 20 L58 20 M48 28 L58 28" 
      stroke="currentColor" 
      stroke-width="2.5" 
      stroke-linecap="round"
    />
  </g>
</svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: react-email-starter/emails/notion-magic-link.jsx
================
import {
	Body,
	Container,
	Head,
	Heading,
	Html,
	Img,
	Link,
	Preview,
	Text,
} from "@react-email/components";
import * as React from "react";

const baseUrl = process.env.VERCEL_URL
	? `https://${process.env.VERCEL_URL}`
	: "";

export const NotionMagicLinkEmail = ({ loginCode }) => (
	<Html>
		<Head />
		<Preview>Log in with this magic link</Preview>
		<Body style={main}>
			<Container style={container}>
				<Heading style={h1}>Login</Heading>
				<Link
					href="https://notion.so"
					target="_blank"
					style={{
						...link,
						display: "block",
						marginBottom: "16px",
					}}
				>
					Click here to log in with this magic link
				</Link>
				<Text style={{ ...text, marginBottom: "14px" }}>
					Or, copy and paste this temporary login code:
				</Text>
				<code style={code}>{loginCode}</code>
				<Text
					style={{
						...text,
						color: "#ababab",
						marginTop: "14px",
						marginBottom: "16px",
					}}
				>
					If you didn&apos;t try to login, you can safely ignore this
					email.
				</Text>
				<Text
					style={{
						...text,
						color: "#ababab",
						marginTop: "12px",
						marginBottom: "38px",
					}}
				>
					Hint: You can set a permanent password in Settings & members
					→ My account.
				</Text>
				<Img
					src={`${baseUrl}/static/notion-logo.png`}
					width="32"
					height="32"
					alt="Notion's Logo"
				/>
				<Text style={footer}>
					<Link
						href="https://notion.so"
						target="_blank"
						style={{ ...link, color: "#898989" }}
					>
						Notion.so
					</Link>
					, the all-in-one-workspace
					<br />
					for your notes, tasks, wikis, and databases.
				</Text>
			</Container>
		</Body>
	</Html>
);

NotionMagicLinkEmail.PreviewProps = {
	loginCode: "sparo-ndigo-amurt-secan",
};

export default NotionMagicLinkEmail;

const main = {
	backgroundColor: "#ffffff",
};

const container = {
	paddingLeft: "12px",
	paddingRight: "12px",
	margin: "0 auto",
};

const h1 = {
	color: "#333",
	fontFamily:
		"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
	fontSize: "24px",
	fontWeight: "bold",
	margin: "40px 0",
	padding: "0",
};

const link = {
	color: "#2754C5",
	fontFamily:
		"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
	fontSize: "14px",
	textDecoration: "underline",
};

const text = {
	color: "#333",
	fontFamily:
		"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
	fontSize: "14px",
	margin: "24px 0",
};

const footer = {
	color: "#898989",
	fontFamily:
		"-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
	fontSize: "12px",
	lineHeight: "22px",
	marginTop: "12px",
	marginBottom: "24px",
};

const code = {
	display: "inline-block",
	padding: "16px 4.5%",
	width: "90.5%",
	backgroundColor: "#f4f4f4",
	borderRadius: "5px",
	border: "1px solid #eee",
	color: "#333",
};

================
File: react-email-starter/emails/plaid-verify-identity.jsx
================
import {
	Body,
	Container,
	Head,
	Heading,
	Html,
	Img,
	Link,
	Section,
	Text,
} from "@react-email/components";
import * as React from "react";

const baseUrl = process.env.VERCEL_URL
	? `https://${process.env.VERCEL_URL}`
	: "";

export const PlaidVerifyIdentityEmail = ({ validationCode }) => (
	<Html>
		<Head />
		<Body style={main}>
			<Container style={container}>
				<Img
					src={`${baseUrl}/static/plaid-logo.png`}
					width="212"
					height="88"
					alt="Plaid"
					style={logo}
				/>
				<Text style={tertiary}>Verify Your Identity</Text>
				<Heading style={secondary}>
					Enter the following code to finish linking Venmo.
				</Heading>
				<Section style={codeContainer}>
					<Text style={code}>{validationCode}</Text>
				</Section>
				<Text style={paragraph}>Not expecting this email?</Text>
				<Text style={paragraph}>
					Contact{" "}
					<Link href="mailto:login@plaid.com" style={link}>
						login@plaid.com
					</Link>{" "}
					if you did not request this code.
				</Text>
			</Container>
			<Text style={footer}>Securely powered by Plaid.</Text>
		</Body>
	</Html>
);

PlaidVerifyIdentityEmail.PreviewProps = {
	validationCode: "144833",
};

export default PlaidVerifyIdentityEmail;

const main = {
	backgroundColor: "#ffffff",
	fontFamily: "HelveticaNeue,Helvetica,Arial,sans-serif",
};

const container = {
	backgroundColor: "#ffffff",
	border: "1px solid #eee",
	borderRadius: "5px",
	boxShadow: "0 5px 10px rgba(20,50,70,.2)",
	marginTop: "20px",
	maxWidth: "360px",
	margin: "0 auto",
	padding: "68px 0 130px",
};

const logo = {
	margin: "0 auto",
};

const tertiary = {
	color: "#0a85ea",
	fontSize: "11px",
	fontWeight: 700,
	fontFamily: "HelveticaNeue,Helvetica,Arial,sans-serif",
	height: "16px",
	letterSpacing: "0",
	lineHeight: "16px",
	margin: "16px 8px 8px 8px",
	textTransform: "uppercase",
	textAlign: "center",
};

const secondary = {
	color: "#000",
	display: "inline-block",
	fontFamily: "HelveticaNeue-Medium,Helvetica,Arial,sans-serif",
	fontSize: "20px",
	fontWeight: 500,
	lineHeight: "24px",
	marginBottom: "0",
	marginTop: "0",
	textAlign: "center",
};

const codeContainer = {
	background: "rgba(0,0,0,.05)",
	borderRadius: "4px",
	margin: "16px auto 14px",
	verticalAlign: "middle",
	width: "280px",
};

const code = {
	color: "#000",
	display: "inline-block",
	fontFamily: "HelveticaNeue-Bold",
	fontSize: "32px",
	fontWeight: 700,
	letterSpacing: "6px",
	lineHeight: "40px",
	paddingBottom: "8px",
	paddingTop: "8px",
	margin: "0 auto",
	width: "100%",
	textAlign: "center",
};

const paragraph = {
	color: "#444",
	fontSize: "15px",
	fontFamily: "HelveticaNeue,Helvetica,Arial,sans-serif",
	letterSpacing: "0",
	lineHeight: "23px",
	padding: "0 40px",
	margin: "0",
	textAlign: "center",
};

const link = {
	color: "#444",
	textDecoration: "underline",
};

const footer = {
	color: "#000",
	fontSize: "12px",
	fontWeight: 800,
	letterSpacing: "0",
	lineHeight: "23px",
	margin: "0",
	marginTop: "20px",
	fontFamily: "HelveticaNeue,Helvetica,Arial,sans-serif",
	textAlign: "center",
	textTransform: "uppercase",
};

================
File: react-email-starter/emails/stripe-welcome.tsx
================
import {
  Body,
  Button,
  Container,
  Head,
  Hr,
  Html,
  Img,
  Link,
  Preview,
  Section,
  Text,
} from "@react-email/components";
import * as React from "react";

const baseUrl = process.env.VERCEL_URL
  ? `https://${process.env.VERCEL_URL}`
  : "";

export const StripeWelcomeEmail = () => (
  <Html>
    <Head />
    <Preview>You're now ready to make live transactions with Stripe!</Preview>
    <Body style={main}>
      <Container style={container}>
        <Section style={box}>
          <Img
            src={`${baseUrl}/static/stripe-logo.png`}
            width="49"
            height="21"
            alt="Stripe"
          />
          <Hr style={hr} />
          <Text style={paragraph}>
            Thanks for submitting your account information. You're now ready to
            make live transactions with Stripe!
          </Text>
          <Text style={paragraph}>
            You can view your payments and a variety of other information about
            your account right from your dashboard.
          </Text>
          <Button style={button} href="https://dashboard.stripe.com/login">
            View your Stripe Dashboard
          </Button>
          <Hr style={hr} />
          <Text style={paragraph}>
            If you haven't finished your integration, you might find our{" "}
            <Link style={anchor} href="https://stripe.com/docs">
              docs
            </Link>{" "}
            handy.
          </Text>
          <Text style={paragraph}>
            Once you're ready to start accepting payments, you'll just need to
            use your live{" "}
            <Link
              style={anchor}
              href="https://dashboard.stripe.com/login?redirect=%2Fapikeys"
            >
              API keys
            </Link>{" "}
            instead of your test API keys. Your account can simultaneously be
            used for both test and live requests, so you can continue testing
            while accepting live payments. Check out our{" "}
            <Link style={anchor} href="https://stripe.com/docs/dashboard">
              tutorial about account basics
            </Link>
            .
          </Text>
          <Text style={paragraph}>
            Finally, we've put together a{" "}
            <Link
              style={anchor}
              href="https://stripe.com/docs/checklist/website"
            >
              quick checklist
            </Link>{" "}
            to ensure your website conforms to card network standards.
          </Text>
          <Text style={paragraph}>
            We'll be here to help you with any step along the way. You can find
            answers to most questions and get in touch with us on our{" "}
            <Link style={anchor} href="https://support.stripe.com/">
              support site
            </Link>
            .
          </Text>
          <Text style={paragraph}>— The Stripe team</Text>
          <Hr style={hr} />
          <Text style={footer}>
            Stripe, 354 Oyster Point Blvd, South San Francisco, CA 94080
          </Text>
        </Section>
      </Container>
    </Body>
  </Html>
);

export default StripeWelcomeEmail;

const main = {
  backgroundColor: "#f6f9fc",
  fontFamily:
    '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Ubuntu,sans-serif',
};

const container = {
  backgroundColor: "#ffffff",
  margin: "0 auto",
  padding: "20px 0 48px",
  marginBottom: "64px",
};

const box = {
  padding: "0 48px",
};

const hr = {
  borderColor: "#e6ebf1",
  margin: "20px 0",
};

const paragraph = {
  color: "#525f7f",

  fontSize: "16px",
  lineHeight: "24px",
  textAlign: "left" as const,
};

const anchor = {
  color: "#556cd6",
};

const button = {
  backgroundColor: "#656ee8",
  borderRadius: "5px",
  color: "#fff",
  fontSize: "16px",
  fontWeight: "bold",
  textDecoration: "none",
  textAlign: "center" as const,
  display: "block",
  width: "100%",
  padding: "10px",
};

const footer = {
  color: "#8898aa",
  fontSize: "12px",
  lineHeight: "16px",
};

================
File: react-email-starter/emails/vercel-invite-user.jsx
================
import {
	Body,
	Button,
	Container,
	Column,
	Head,
	Heading,
	Hr,
	Html,
	Img,
	Link,
	Preview,
	Row,
	Section,
	Text,
	Tailwind,
} from "@react-email/components";
import * as React from "react";

const baseUrl = process.env.VERCEL_URL
	? `https://${process.env.VERCEL_URL}`
	: "";

export const VercelInviteUserEmail = ({
	username,
	userImage,
	invitedByUsername,
	invitedByEmail,
	teamName,
	teamImage,
	inviteLink,
	inviteFromIp,
	inviteFromLocation,
}) => {
	const previewText = `Join ${invitedByUsername} on Vercel`;

	return (
		<Html>
			<Head />
			<Preview>{previewText}</Preview>
			<Tailwind>
				<Body className="bg-white my-auto mx-auto font-sans px-2">
					<Container className="border border-solid border-[#eaeaea] rounded my-[40px] mx-auto p-[20px] max-w-[465px]">
						<Section className="mt-[32px]">
							<Img
								src={`${baseUrl}/static/vercel-logo.png`}
								width="40"
								height="37"
								alt="Vercel"
								className="my-0 mx-auto"
							/>
						</Section>
						<Heading className="text-black text-[24px] font-normal text-center p-0 my-[30px] mx-0">
							Join <strong>{teamName}</strong> on{" "}
							<strong>Vercel</strong>
						</Heading>
						<Text className="text-black text-[14px] leading-[24px]">
							Hello {username},
						</Text>
						<Text className="text-black text-[14px] leading-[24px]">
							<strong>{invitedByUsername}</strong> (
							<Link
								href={`mailto:${invitedByEmail}`}
								className="text-blue-600 no-underline"
							>
								{invitedByEmail}
							</Link>
							) has invited you to the <strong>{teamName}</strong>{" "}
							team on <strong>Vercel</strong>.
						</Text>
						<Section>
							<Row>
								<Column align="right">
									<Img
										className="rounded-full"
										src={userImage}
										width="64"
										height="64"
									/>
								</Column>
								<Column align="center">
									<Img
										src={`${baseUrl}/static/vercel-arrow.png`}
										width="12"
										height="9"
										alt="invited you to"
									/>
								</Column>
								<Column align="left">
									<Img
										className="rounded-full"
										src={teamImage}
										width="64"
										height="64"
									/>
								</Column>
							</Row>
						</Section>
						<Section className="text-center mt-[32px] mb-[32px]">
							<Button
								className="bg-[#000000] rounded text-white text-[12px] font-semibold no-underline text-center px-5 py-3"
								href={inviteLink}
							>
								Join the team
							</Button>
						</Section>
						<Text className="text-black text-[14px] leading-[24px]">
							or copy and paste this URL into your browser:{" "}
							<Link
								href={inviteLink}
								className="text-blue-600 no-underline"
							>
								{inviteLink}
							</Link>
						</Text>
						<Hr className="border border-solid border-[#eaeaea] my-[26px] mx-0 w-full" />
						<Text className="text-[#666666] text-[12px] leading-[24px]">
							This invitation was intended for{" "}
							<span className="text-black">{username}</span>. This
							invite was sent from{" "}
							<span className="text-black">{inviteFromIp}</span>{" "}
							located in{" "}
							<span className="text-black">
								{inviteFromLocation}
							</span>
							. If you were not expecting this invitation, you can
							ignore this email. If you are concerned about your
							account&rsquo;s safety, please reply to this email
							to get in touch with us.
						</Text>
					</Container>
				</Body>
			</Tailwind>
		</Html>
	);
};

VercelInviteUserEmail.PreviewProps = {
	username: "alanturing",
	userImage: `${baseUrl}/static/vercel-user.png`,
	invitedByUsername: "Alan",
	invitedByEmail: "alan.turing@example.com",
	teamName: "Enigma",
	teamImage: `${baseUrl}/static/vercel-team.png`,
	inviteLink: "https://vercel.com/teams/invite/foo",
	inviteFromIp: "204.13.186.218",
	inviteFromLocation: "São Paulo, Brazil",
};

export default VercelInviteUserEmail;

================
File: react-email-starter/package.json
================
{
  "name": "react-email-starter",
  "version": "0.1.6",
  "private": true,
  "scripts": {
    "build": "email build",
    "dev": "email dev",
    "export": "email export"
  },
  "dependencies": {
    "@react-email/components": "0.0.31",
    "react-dom": "19.0.0",
    "react": "19.0.0"
  },
  "devDependencies": {
    "@types/react": "19.0.1",
    "@types/react-dom": "19.0.1",
    "react-email": "3.0.4"
  }
}

================
File: react-email-starter/readme.md
================
# React Email Starter

A live preview right in your browser so you don't need to keep sending real emails during development.

## Getting Started

First, install the dependencies:

```sh
npm install
# or
yarn
```

Then, run the development server:

```sh
npm run dev
# or
yarn dev
```

Open [localhost:3000](http://localhost:3000) with your browser to see the result.

## License

MIT License

================
File: README.md
================
# Portfolio Builder

The Portfolio Builder is an open-source, web-based application designed specifically for developers to create and manage their professional portfolios with ease. Showcase your coding projects, technical skills, and achievements in a sleek and organized manner to attract potential employers, clients, or collaborators.

## Features

- **MagicUI Template**: Start with the [MagicUI free portfolio template](https://magicui.design/docs/templates/portfolio), which is specifically tailored for developers. More templates will be added in future updates.
- **Responsive Design**: Ensures your portfolio looks great on all devices, from desktops to mobile phones.
- **Project Showcase**: Highlight your coding projects with detailed descriptions, tech stacks used, images, and links to live demos or repositories.
- **Skills Section**: Display your technical skills and proficiencies in programming languages, frameworks, and tools.
- **Custom Domain Support**: Use your custom domain to make your portfolio more professional and personalized.
- **Contact Form**: Allow potential clients or employers to reach out to you directly through your portfolio.
- **SEO Optimized**: Built with best practices to ensure your portfolio ranks well in search engines.
- **Easy Deployment**: After filling in the necessary information, users receive a link to their personalized portfolio.
- **Future Template Support**: Plans to provide multiple templates to choose from in future updates.

## Getting Started

1. **Fork the Repository**: Start by forking the repository to your GitHub account.
2. **Clone the Repository**: Clone the forked repository to your local machine.
3. **Install Dependencies**: Navigate to the project directory and run `npm install` to install all required dependencies.
4. **Customize Your Portfolio**: Fill in the necessary information such as personal details, projects, and skills.
5. **Deploy**: Follow the deployment instructions to publish your portfolio online. Once deployed, you will receive a link to your personalized portfolio.

## Contributions

We welcome contributions from the developer community! If you have ideas for new features, bug fixes, or improvements, feel free to open an issue or submit a pull request. Please follow the contribution guidelines outlined in the repository.

## License

This project is licensed under the MIT License. See the [LICENSE](LICENSE) file for more details.

---

Build your professional developer portfolio today and make a lasting impression with Portfolio Builder!

---

Feel free to customize this description to better fit your specific portfolio builder project for developers.

================
File: redux/features/blogSlice.js
================
import { createSlice } from "@reduxjs/toolkit";
import {
	createBlogInDatabase,
	updateBlogInDatabase,
	removeBlogFromDatabase,
	fetchBlogsForPortfolio,
} from "../thunks/blog";
import { logger } from "@/lib/utils";

const initialState = {
	items: [],
	loading: false,
	error: null,
	filters: {
		status: "all", // all, draft, published
		search: "",
		tags: [],
	},
};

export const blogSlice = createSlice({
	name: "blogs",
	initialState,
	reducers: {
		setBlogs: (state, action) => {
			state.items = action.payload;
			state.loading = false;
			state.error = null;
		},
		clearBlogs: (state) => {
			state.items = [];
			state.loading = false;
			state.error = null;
		},
		updateFilters: (state, action) => {
			state.filters = { ...state.filters, ...action.payload };
		},
	},
	extraReducers: (builder) => {
		builder
			// Fetch blogs
			.addCase(fetchBlogsForPortfolio.pending, (state) => {
				state.loading = true;
				state.error = null;
			})
			.addCase(fetchBlogsForPortfolio.fulfilled, (state, action) => {
				const { data, error } = action.payload;
				if (error) {
					logger.error("Blog fetch failed:", {
						error,
						state: { ...state, items: state.items.length },
					});
					state.error = error;
					return;
				}

				logger.info("Blogs fetched successfully:", {
					count: data.length,
					state: { loading: state.loading, hasError: !!state.error },
				});

				state.items = data;
				state.loading = false;
			})
			.addCase(fetchBlogsForPortfolio.rejected, (state, action) => {
				state.loading = false;
				state.error = action.payload?.error || "Failed to fetch blogs";
			})
			// Create blog
			.addCase(createBlogInDatabase.pending, (state) => {
				state.loading = true;
				state.error = null;
			})
			.addCase(createBlogInDatabase.fulfilled, (state, action) => {
				const { data, error } = action.payload;
				state.loading = false;

				if (error) {
					logger.error("Error creating blog:", error);
					state.error = error;
					return;
				}

				logger.info("Blog created successfully:", data);
				state.items.unshift(data);
			})
			.addCase(createBlogInDatabase.rejected, (state, action) => {
				state.loading = false;
				state.error = action.payload?.error || "Failed to create blog";
			})
			// Update blog
			.addCase(updateBlogInDatabase.pending, (state) => {
				state.loading = true;
				state.error = null;
			})
			.addCase(updateBlogInDatabase.fulfilled, (state, action) => {
				const { data, error } = action.payload;
				state.loading = false;

				if (!data) return;

				if (error) {
					state.error = error || "Failed to update blog";
					return;
				}

				const index = state.items.findIndex(
					(blog) => blog.id === data.id
				);

				if (index !== -1) {
					state.items[index] = data;
				}
			})
			.addCase(updateBlogInDatabase.rejected, (state, action) => {
				state.loading = false;
				state.error = action.payload?.error || "Failed to update blog";
			})
			// Remove blog
			.addCase(removeBlogFromDatabase.pending, (state) => {
				state.loading = true;
				state.error = null;
			})
			.addCase(removeBlogFromDatabase.fulfilled, (state, action) => {
				state.items = state.items.filter(
					(blog) => blog.id !== action.payload.id
				);
				state.loading = false;
			})
			.addCase(removeBlogFromDatabase.rejected, (state, action) => {
				state.loading = false;
				state.error = action.payload?.error || "Failed to remove blog";
			});
	},
});

export const { setBlogs, clearBlogs, updateFilters } = blogSlice.actions;
export default blogSlice.reducer;

================
File: redux/features/portfolioSlice.js
================
import { createSlice } from "@reduxjs/toolkit";
import {
	addPortfolioInDatabase,
	updatePortfolioInDatabase,
	removePortfolioFromDatabase,
} from "../thunks/portfolio";
import { updateBasicsInDatabase } from "../thunks/basics";
import {
	addCertificationInDatabase,
	updateCertificationnInDatabase,
	removeCertificationFromDatabase,
} from "../thunks/certifications";
import {
	addEducationInDatabase,
	updateEducationInDatabase,
	removeEducationFromDatabase,
} from "../thunks/educations";
import {
	addExperienceInDatabase,
	updateExperienceInDatabase,
	removeExperienceFromDatabase,
} from "../thunks/experience";
import {
	addHackathonInDatabase,
	updateHackathonInDatabase,
	removeHackathonFromDatabase,
} from "../thunks/hackathon";
import {
	addProjectInDatabase,
	updateProjectInDatabase,
	removeProjectFromDatabase,
} from "../thunks/project";
import {
	addSkillInDatabase,
	updateSkillnInDatabase,
	removeSkillFromDatabase,
} from "../thunks/skill";
import {
	addProfileInDatabase,
	updateProfileInDatabase,
	removeProfileFromDatabase,
} from "../thunks/profile";
import {
	addTestimonialInDatabase,
	updateTestimonialInDatabase,
	removeTestimonialFromDatabase,
} from "../thunks/testimonials";
import { logger } from "@/lib/utils";
import { transformPortfolio } from "@/lib/utils";
import {
	addTeamMemberInDatabase,
	updateTeamMemberInDatabase,
	removeTeamMemberFromDatabase,
} from "../thunks/team";

// Initial State
const initialState = {
	items: [],
	loading: false, // Only global loading state
	error: null,
};

const portfolioSlice = createSlice({
	name: "portfolios",
	initialState,
	reducers: {
		setPortfolios(state, action) {
			state.loading = false;
			const portfolios = action.payload;
			logger.info("Setportfolios data: ", portfolios);
			const transformedData = portfolios.map((portfolio) =>
				transformPortfolio(portfolio)
			);
			state.items = transformedData;
		},
	},
	extraReducers: (builder) => {
		// Simplified loading handlers
		const setPending = (state) => {
			state.loading = true;
			state.error = null;
		};

		const setFulfilled = (state) => {
			state.loading = false;
		};

		const setRejected = (state, action) => {
			state.loading = false;
			state.error =
				action.payload?.error ||
				action.error?.message ||
				"Operation failed";
		};

		// Portfolio operations
		builder
			.addCase(addPortfolioInDatabase.pending, setPending)
			.addCase(addPortfolioInDatabase.fulfilled, (state, action) => {
				setFulfilled(state);
				const { data, error } = action.payload;
				if (error) {
					state.error = error;
					logger.error("Error adding portfolio:", error);
					return;
				}
				try {
					const transformedPortfolio = transformPortfolio(data);
					state.items.push(transformedPortfolio);
					logger.info(
						"Portfolio added successfully:",
						transformedPortfolio
					);
				} catch (error) {
					state.error = "Invalid portfolio data";
					logger.error("Error transforming portfolio data:", error);
				}
			})
			.addCase(addPortfolioInDatabase.rejected, setRejected)
			.addCase(updatePortfolioInDatabase.pending, setPending)
			.addCase(updatePortfolioInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.id
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update portfolio");
						return;
					}
					Object.assign(portfolio, data);
				}
			})
			.addCase(updatePortfolioInDatabase.rejected, setRejected)
			.addCase(removePortfolioFromDatabase.pending, setPending)
			.addCase(removePortfolioFromDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { id } = action.payload;
				state.items = state.items.filter(
					(portfolio) => portfolio.id !== id
				);
			})
			.addCase(removePortfolioFromDatabase.rejected, setRejected);

		// Basics Extra Reducers
		builder
			.addCase(updateBasicsInDatabase.pending, setPending)
			.addCase(updateBasicsInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update basics");
						return;
					}
					portfolio.basics = data;
					portfolio.status = "succeeded";
				}
			})
			.addCase(updateBasicsInDatabase.rejected, setRejected);

		// Certification Extra Reducers
		builder
			.addCase(addCertificationInDatabase.pending, setPending)
			.addCase(addCertificationInDatabase.fulfilled, (state, action) => {
				setFulfilled(state);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (!portfolio) return;

				if (error) {
					state.error = error;
					logger.error(error || "Failed to add certification");
					return;
				}

				// Simply push the data without individual schema validation
				portfolio.certifications.items.push(data);
			})
			.addCase(addCertificationInDatabase.rejected, setRejected)
			.addCase(updateCertificationnInDatabase.pending, setPending)
			.addCase(
				updateCertificationnInDatabase.fulfilled,
				(state, action) => {
					setFulfilled(state, action);
					const { data, error } = action.payload;
					const portfolio = state.items.find(
						(portfolio) => portfolio.id === data.portfolioId
					);
					if (!portfolio) return;

					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update certification");
						return;
					}

					const index = portfolio.certifications.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.certifications.items[index] = data;
					}
				}
			)
			.addCase(updateCertificationnInDatabase.rejected, setRejected)
			.addCase(removeCertificationFromDatabase.pending, setPending)
			.addCase(
				removeCertificationFromDatabase.fulfilled,
				(state, action) => {
					setFulfilled(state, action);
					const { portfolioId, certificationId } = action.payload;
					const portfolio = state.items.find(
						(portfolio) => portfolio.id === portfolioId
					);
					if (!portfolio) return;

					portfolio.certifications.items =
						portfolio.certifications.items.filter(
							(item) => item.id !== certificationId
						);
				}
			)
			.addCase(removeCertificationFromDatabase.rejected, setRejected);

		// Education Extra Reducers
		builder
			.addCase(addEducationInDatabase.pending, setPending)
			.addCase(addEducationInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add education");
						return;
					}
					portfolio.educations.items.push(data);
				}
			})
			.addCase(addEducationInDatabase.rejected, setRejected)
			.addCase(updateEducationInDatabase.pending, setPending)
			.addCase(updateEducationInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update education");
						return;
					}

					const index = portfolio.educations.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.educations.items[index] = data;
					}
				}
			})
			.addCase(updateEducationInDatabase.rejected, setRejected)
			.addCase(removeEducationFromDatabase.pending, setPending)
			.addCase(removeEducationFromDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { portfolioId, educationId } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === portfolioId
				);
				if (portfolio) {
					portfolio.educations.items =
						portfolio.educations.items.filter(
							(item) => item.id !== educationId
						);
				}
			})
			.addCase(removeEducationFromDatabase.rejected, setRejected);

		// Experience Extra Reducers
		builder
			.addCase(addExperienceInDatabase.pending, setPending)
			.addCase(addExperienceInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				logger.info("Adding experience to database:", data);
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add Experience");
						return;
					}
					portfolio.experiences.items.push(data);
				}
			})
			.addCase(addExperienceInDatabase.rejected, setRejected)
			.addCase(updateExperienceInDatabase.pending, setPending)
			.addCase(updateExperienceInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update experience");
						return;
					}
					const index = portfolio.experiences.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.experiences.items[index] = data;
					}
				}
			})
			.addCase(updateExperienceInDatabase.rejected, setRejected)
			.addCase(removeExperienceFromDatabase.pending, setPending)
			.addCase(
				removeExperienceFromDatabase.fulfilled,
				(state, action) => {
					setFulfilled(state, action);
					const { portfolioId, experienceId } = action.payload;
					const portfolio = state.items.find(
						(portfolio) => portfolio.id === portfolioId
					);
					if (portfolio) {
						portfolio.experiences.items =
							portfolio.experiences.items.filter(
								(item) => item.id !== experienceId
							);
					}
				}
			)
			.addCase(removeExperienceFromDatabase.rejected, setRejected);

		// Hackathon Extra Reducers
		builder
			.addCase(addHackathonInDatabase.pending, setPending)
			.addCase(addHackathonInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add hackathon");
						return;
					}
					portfolio.hackathons.items.push(data);
				}
			})
			.addCase(addHackathonInDatabase.rejected, setRejected)
			.addCase(updateHackathonInDatabase.pending, setPending)
			.addCase(updateHackathonInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update hackathon");
						return;
					}
					const index = portfolio.hackathons.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.hackathons.items[index] = data;
					}
				}
			})
			.addCase(updateHackathonInDatabase.rejected, setRejected)
			.addCase(removeHackathonFromDatabase.pending, setPending)
			.addCase(removeHackathonFromDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { portfolioId, hackathonId } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === portfolioId
				);
				if (portfolio) {
					portfolio.hackathons.items =
						portfolio.hackathons.items.filter(
							(item) => item.id !== hackathonId
						);
				}
			})
			.addCase(removeHackathonFromDatabase.rejected, setRejected);

		// Profile Extra Reducers
		builder
			.addCase(addProfileInDatabase.pending, setPending)
			.addCase(addProfileInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add profile");
						return;
					}
					logger.info("Adding profile to portfolio:", data);
					portfolio.profiles.items.push(data);
				}
			})
			.addCase(addProfileInDatabase.rejected, setRejected)
			.addCase(updateProfileInDatabase.pending, setPending)
			.addCase(updateProfileInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update profile");
						return;
					}
					const index = portfolio.profiles.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.profiles.items[index] = data;
					}
				}
			})
			.addCase(updateProfileInDatabase.rejected, setRejected)
			.addCase(removeProfileFromDatabase.pending, setPending)
			.addCase(removeProfileFromDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				logger.info("Removing profile from database:", action.payload);
				const { portfolioId, profileId } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === portfolioId
				);
				if (portfolio) {
					portfolio.profiles.items = portfolio.profiles.items.filter(
						(item) => item.id !== profileId
					);
				}
			})
			.addCase(removeProfileFromDatabase.rejected, setRejected);

		// Project Extra Reducers
		builder
			.addCase(addProjectInDatabase.pending, setPending)
			.addCase(addProjectInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add project");
						return;
					}
					portfolio.projects.items.push(data);
				}
			})
			.addCase(addProjectInDatabase.rejected, setRejected)
			.addCase(updateProjectInDatabase.pending, setPending)
			.addCase(updateProjectInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update project");
						return;
					}
					const index = portfolio.projects.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.projects.items[index] = data;
					}
				}
			})
			.addCase(updateProjectInDatabase.rejected, setRejected)
			.addCase(removeProjectFromDatabase.pending, setPending)
			.addCase(removeProjectFromDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { portfolioId, projectId } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === portfolioId
				);
				if (portfolio) {
					portfolio.projects.items = portfolio.projects.items.filter(
						(item) => item.id !== projectId
					);
				}
			})
			.addCase(removeProjectFromDatabase.rejected, setRejected);

		// Skill Extra Reducers
		builder
			.addCase(addSkillInDatabase.pending, setPending)
			.addCase(addSkillInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add skill");
						return;
					}
					portfolio.skills.items.push(data);
				}
			})
			.addCase(addSkillInDatabase.rejected, setRejected)
			.addCase(updateSkillnInDatabase.pending, setPending)
			.addCase(updateSkillnInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update skill");
						return;
					}
					const index = portfolio.skills.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.skills.items[index] = data;
					}
				}
			})
			.addCase(updateSkillnInDatabase.rejected, setRejected)
			.addCase(removeSkillFromDatabase.pending, setPending)
			.addCase(removeSkillFromDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { portfolioId, skillId } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === portfolioId
				);
				if (portfolio) {
					portfolio.skills.items = portfolio.skills.items.filter(
						(item) => item.id !== skillId
					);
				}
			})
			.addCase(removeSkillFromDatabase.rejected, setRejected);

		// Testimonial Extra Reducers
		builder
			.addCase(addTestimonialInDatabase.pending, setPending)
			.addCase(addTestimonialInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add testimonial");
						return;
					}
					portfolio.testimonials.items.push(data);
				}
			})
			.addCase(addTestimonialInDatabase.rejected, setRejected)
			.addCase(updateTestimonialInDatabase.pending, setPending)
			.addCase(updateTestimonialInDatabase.fulfilled, (state, action) => {
				setFulfilled(state, action);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update testimonial");
						return;
					}
					const index = portfolio.testimonials.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.testimonials.items[index] = data;
					}
				}
			})
			.addCase(updateTestimonialInDatabase.rejected, setRejected)
			.addCase(removeTestimonialFromDatabase.pending, setPending)
			.addCase(
				removeTestimonialFromDatabase.fulfilled,
				(state, action) => {
					setFulfilled(state, action);
					const { portfolioId, testimonialId } = action.payload;
					const portfolio = state.items.find(
						(portfolio) => portfolio.id === portfolioId
					);
					if (portfolio) {
						portfolio.testimonials.items =
							portfolio.testimonials.items.filter(
								(item) => item.id !== testimonialId
							);
					}
				}
			)
			.addCase(removeTestimonialFromDatabase.rejected, setRejected);

		// Team Member Extra Reducers
		builder
			.addCase(addTeamMemberInDatabase.pending, setPending)
			.addCase(addTeamMemberInDatabase.fulfilled, (state, action) => {
				setFulfilled(state);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to add team member");
						return;
					}
					portfolio.teams.items.push(data);
				}
			})
			.addCase(addTeamMemberInDatabase.rejected, setRejected)
			.addCase(updateTeamMemberInDatabase.pending, setPending)
			.addCase(updateTeamMemberInDatabase.fulfilled, (state, action) => {
				setFulfilled(state);
				const { data, error } = action.payload;
				const portfolio = state.items.find(
					(portfolio) => portfolio.id === data.portfolioId
				);
				if (portfolio) {
					if (error) {
						portfolio.error = error;
						logger.error(error || "Failed to update team member");
						return;
					}
					const index = portfolio.teams.items.findIndex(
						(item) => item.id === data.id
					);
					if (index !== -1) {
						portfolio.teams.items[index] = data;
					}
				}
			})
			.addCase(updateTeamMemberInDatabase.rejected, setRejected)
			.addCase(removeTeamMemberFromDatabase.pending, setPending)
			.addCase(
				removeTeamMemberFromDatabase.fulfilled,
				(state, action) => {
					setFulfilled(state);
					const { portfolioId, teamMemberId } = action.payload;
					const portfolio = state.items.find(
						(portfolio) => portfolio.id === portfolioId
					);
					if (portfolio) {
						portfolio.teams.items = portfolio.teams.items.filter(
							(item) => item.id !== teamMemberId
						);
					}
				}
			)
			.addCase(removeTeamMemberFromDatabase.rejected, setRejected);
	},
});

export const { setPortfolios } = portfolioSlice.actions;

export default portfolioSlice.reducer;

================
File: redux/features/userSlice.js
================
import { defaultUser } from "@/schema/user";
import { createSlice } from "@reduxjs/toolkit";
import { logger } from "@/lib/utils";

const initialState = {
	data: defaultUser,
	loading: false,
	error: null,
};

const userSlice = createSlice({
	name: "user",
	initialState,
	reducers: {
		setUser(state, action) {
			logger.info("redux user data: ", action.payload);
			state.data = {
				...defaultUser,
				...action.payload,
				subscription: action.payload.subscription || null,
			};
		},
		clearUser: (state) => {
			state.data = null;
		},
	},
});

export const { setUser, clearUser } = userSlice.actions;

export default userSlice.reducer;

================
File: redux/provider.js
================
"use client";
import { Provider } from "react-redux";
import { store } from "./store";

export default function CustomProvider({ children }) {
	return <Provider store={store}>{children}</Provider>;
}

================
File: redux/store.js
================
import { configureStore, combineReducers } from "@reduxjs/toolkit";
import {
	persistStore,
	persistReducer,
	FLUSH,
	REHYDRATE,
	PAUSE,
	PERSIST,
	PURGE,
	REGISTER,
} from "redux-persist";
import storage from "redux-persist/lib/storage"; // defaults to localStorage for web
import userReducer from "./features/userSlice";
import portfolioReducer from "./features/portfolioSlice";
import blogReducer from "./features/blogSlice";

// Persist Config
const persistConfig = {
	key: "root",
	storage,
	whitelist: ["user", "portfolios", "blogs"], // Add the reducers you want to persist
};

// Root Reducer
const rootReducer = combineReducers({
	user: userReducer,
	portfolios: portfolioReducer,
	blogs: blogReducer,
});

// Create Persisted Reducer
const persistedReducer = persistReducer(persistConfig, rootReducer);

// Store Configuration
export const store = configureStore({
	reducer: persistedReducer,
	middleware: (getDefaultMiddleware) =>
		getDefaultMiddleware({
			serializableCheck: {
				ignoredActions: [
					FLUSH,
					REHYDRATE,
					PAUSE,
					PERSIST,
					PURGE,
					REGISTER,
				],
			},
		}),
});

// Persistor
export const persistor = persistStore(store);

================
File: redux/thunks/basics.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { updatePortfolioBasics } from "@/services/basics";
import { logger } from "@/lib/utils";

export const updateBasicsInDatabase = createAsyncThunk(
	"basics/updateBasicsInDatabase",
	async (basicData, { rejectWithValue }) => {
		try {
			logger.info("Updating portfolio basics:", {
				portfolioId: basicData.portfolioId,
				updateFields: Object.keys(basicData),
			});

			const response = await updatePortfolioBasics(basicData);

			logger.info("Successfully updated portfolio basics:", {
				portfolioId: basicData.portfolioId,
				status: response.status,
			});

			return response;
		} catch (error) {
			logger.error("Failed to update portfolio basics:", {
				error: error.message,
				stack: error.stack,
				portfolioId: basicData.portfolioId,
			});
			return rejectWithValue(error.response.data);
		}
	}
);

================
File: redux/thunks/blog.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { logger } from "@/lib/utils";
import { blogSchema } from "@/schema/sections/blog";
import {
	getBlogs as getBlogsAction,
	getBlog as getBlogAction,
	createBlog as createBlogAction,
	updateBlog as updateBlogAction,
	deleteBlog as deleteBlogAction,
	publishBlog as publishBlogAction,
} from "@/services/blog";

export const fetchBlogsForPortfolio = createAsyncThunk(
	"blogs/fetch",
	async (portfolioId, { rejectWithValue }) => {
		try {
			const blogs = await getBlogsAction(portfolioId);
			return blogs.map((blog) => blogSchema.parse(blog));
		} catch (error) {
			logger.error("Error fetching blogs:", error);
			return rejectWithValue({ error: error.message });
		}
	}
);

export const createBlogInDatabase = createAsyncThunk(
	"blogs/create",
	async ({ portfolioId, data }, { rejectWithValue }) => {
		try {
			if (!portfolioId) {
				return rejectWithValue({ error: "Portfolio ID is required" });
			}

			const blog = await createBlogAction({
				portfolioId,
				data: {
					...data,
					status: "draft",
				},
			});

			return blog;
		} catch (error) {
			logger.error("Error creating blog:", error);
			return rejectWithValue({
				error: error.message || "Failed to create blog post",
			});
		}
	}
);

export const updateBlogInDatabase = createAsyncThunk(
	"blogs/update",
	async ({ blogId, portfolioId, data }, { rejectWithValue }) => {
		try {
			const blog = await updateBlogAction({
				blogId,
				portfolioId,
				data,
			});

			return blog;
		} catch (error) {
			logger.error("Error updating blog:", error);
			return rejectWithValue({ error: error.message });
		}
	}
);

export const removeBlogFromDatabase = createAsyncThunk(
	"blogs/remove",
	async ({ blogId, portfolioId }, { rejectWithValue }) => {
		try {
			await deleteBlogAction({ blogId, portfolioId });
			return { id: blogId };
		} catch (error) {
			logger.error("Error removing blog:", error);
			return rejectWithValue({ error: error.message });
		}
	}
);

================
File: redux/thunks/certifications.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import {
	createCertification,
	editCertification,
	deleteCertification,
} from "@/services/certification";
import { certificationSchema } from "@/schema/sections";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addCertificationInDatabase = createAsyncThunk(
	"certification/addCertificationInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Adding certification:", {
				portfolioId: data.portfolioId,
				certificationName: data.name,
			});

			const validatedData = certificationSchema.safeParse(data);
			if (validatedData.success) {
				const result = await createCertification(validatedData.data);
				logger.info("Successfully added certification:", {
					id: result.id,
					portfolioId: result.portfolioId,
				});
				return result;
			}

			logger.error("Validation failed for certification data:", {
				errors: validatedData.error.errors,
			});
			return rejectWithValue("Invalid certification data");
		} catch (error) {
			logger.error("Failed to add certification:", error);

			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateCertificationnInDatabase = createAsyncThunk(
	"certification/updateCertificationInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			// Validate input before sending to service
			const validatedData = certificationSchema.safeParse(data);
			if (validatedData.success) {
				return await editCertification(data.id, validatedData.data);
			}
		} catch (error) {
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeCertificationFromDatabase = createAsyncThunk(
	"certification/removeCertificationFromDatabase",
	async ({ certificationId, portfolioId }, { rejectWithValue }) => {
		try {
			await deleteCertification(certificationId, portfolioId);
			return { certificationId, portfolioId };
		} catch (error) {
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/educations.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { educationSchema } from "@/schema/sections";
import {
	createEducation,
	deleteEducation,
	editEducation,
} from "@/services/education";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addEducationInDatabase = createAsyncThunk(
	"education/addEducationInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Adding education:", data);
			// Validate input before sending to service
			const validatedData = educationSchema.safeParse(data);
			if (validatedData.success) {
				const result = await createEducation(validatedData.data);
				logger.info("Education added successfully:", result);
				return result;
			}
		} catch (error) {
			logger.error("Error adding education:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateEducationInDatabase = createAsyncThunk(
	"education/updateEducationInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			// Validate input before sending to service
			const validatedData = educationSchema.safeParse(data);
			if (validatedData.success) {
				return await editEducation(data.id, validatedData.data);
			}
		} catch (error) {
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeEducationFromDatabase = createAsyncThunk(
	"education/removeEducationFromDatabase",
	async ({ educationId, portfolioId }, { rejectWithValue }) => {
		try {
			await deleteEducation(educationId, portfolioId);
			return { educationId, portfolioId };
		} catch (error) {
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/experience.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { experienceSchema } from "@/schema/sections";
import {
	createExperience,
	deleteExperience,
	editExperience,
} from "@/services/experience";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addExperienceInDatabase = createAsyncThunk(
	"experience/addExperienceInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Adding experience:", data);
			// Validate input before sending to service
			const validatedData = experienceSchema.safeParse(data);
			if (validatedData.success) {
				const result = await createExperience(validatedData.data);
				logger.info("Experience added successfully:", result);
				return result;
			}
		} catch (error) {
			logger.error("Error adding experience:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateExperienceInDatabase = createAsyncThunk(
	"experience/updateExperienceInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Updating experience:", data);
			// Validate input before sending to service
			const validatedData = experienceSchema.safeParse(data);
			if (validatedData.success) {
				const result = await editExperience(
					data.id,
					validatedData.data
				);
				logger.info("Experience updated successfully:", result);
				return result;
			}
		} catch (error) {
			logger.error("Error updating experience:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeExperienceFromDatabase = createAsyncThunk(
	"experience/removeExperienceFromDatabase",
	async ({ experienceId, portfolioId }, { rejectWithValue }) => {
		try {
			logger.info("Removing experience:", { experienceId, portfolioId });
			await deleteExperience(experienceId, portfolioId);
			logger.info("Experience removed successfully:", {
				experienceId,
				portfolioId,
			});
			return { experienceId, portfolioId };
		} catch (error) {
			logger.error("Error removing experience:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/hackathon.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { hackathonSchema } from "@/schema/sections";
import {
	createHackathon,
	editHackathon,
	deleteHackathon,
} from "@/services/hackathon";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addHackathonInDatabase = createAsyncThunk(
	"hackathon/addHackathonInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Adding hackathon:", data);
			const validatedData = hackathonSchema.safeParse(data);
			if (validatedData.success) {
				const response = await createHackathon(validatedData.data);
				logger.info("Hackathon added successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error adding hackathon:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateHackathonInDatabase = createAsyncThunk(
	"hackathon/updateHackathonInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Updating hackathon:", data);
			const validatedData = hackathonSchema.safeParse(data);
			if (validatedData.success) {
				const response = await editHackathon(
					data.id,
					validatedData.data
				);
				logger.info("Hackathon updated successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error updating hackathon:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeHackathonFromDatabase = createAsyncThunk(
	"hackathon/removeHackathonFromDatabase",
	async ({ hackathonId, portfolioId }, { rejectWithValue }) => {
		try {
			logger.info("Removing hackathon:", { hackathonId, portfolioId });
			await deleteHackathon(hackathonId, portfolioId);
			logger.info("Hackathon removed successfully:", {
				hackathonId,
				portfolioId,
			});
			return { hackathonId, portfolioId };
		} catch (error) {
			logger.error("Error removing hackathon:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/portfolio.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { portfolioSchema } from "@/schema/sections";
import {
	createPortfolio,
	deletePortfolio,
	editPortfolio,
} from "@/services/portfolio";
import { logger } from "@/lib/utils";

// Create Portfolio
export const addPortfolioInDatabase = createAsyncThunk(
	"portfolio/createPortfolio",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Creating portfolio:", data);
			const validatedData = portfolioSchema.safeParse(data);
			if (validatedData.success) {
				const response = await createPortfolio(validatedData.data);
				logger.info("Portfolio created successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error creating portfolio:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

// Update Portfolio
export const updatePortfolioInDatabase = createAsyncThunk(
	"portfolio/updatePortfolio",
	async ({ id, data }, { rejectWithValue }) => {
		try {
			logger.info("Updating portfolio:", { id, data });
			const response = await editPortfolio(id, data);
			logger.info("Portfolio updated successfully:", response);
			return response;
		} catch (error) {
			logger.error("Error updating portfolio:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

// Delete Portfolio
export const removePortfolioFromDatabase = createAsyncThunk(
	"portfolio/deletePortfolio",
	async (id, { rejectWithValue }) => {
		try {
			logger.info("Deleting portfolio:", id);
			await deletePortfolio(id);
			logger.info("Portfolio deleted successfully:", id);
			return { id };
		} catch (error) {
			logger.error("Error deleting portfolio:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/profile.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { z } from "zod";
import { createProfile, editProfile, deleteProfile } from "@/services/profile";
import { profileSchema } from "@/schema/sections";
import { logger } from "@/lib/utils";

export const addProfileInDatabase = createAsyncThunk(
	"profile/addProfileInDatabase",
	async (profileData, { getState, rejectWithValue }) => {
		try {
			logger.info("Adding profile:", profileData);
			const validatedData = profileSchema.safeParse(profileData);
			if (!validatedData.success) {
				logger.error("Profile validation failed:", validatedData.error);
				return rejectWithValue({
					error: validatedData.error.errors[0].message,
				});
			}

			const state = getState();
			const portfolios = state.portfolios?.items || [];
			const portfolio = portfolios.find(
				(p) => p.id === profileData.portfolioId
			);

			if (!portfolio) {
				logger.error("Portfolio not found:", profileData.portfolioId);
				return rejectWithValue({
					error: "Portfolio not found",
				});
			}

			const matchingProfile = portfolio.profiles.items.find(
				(p) => p.network === profileData.network
			);

			if (matchingProfile) {
				logger.error(
					`A profile for ${profileData.network} already exists`
				);
				return rejectWithValue({
					error: `A profile for ${profileData.network} already exists`,
				});
			}

			const response = await createProfile(validatedData.data);
			logger.info("Profile created successfully:", response);
			return response;
		} catch (error) {
			logger.error("Error adding profile:", error);
			return rejectWithValue({
				error:
					error instanceof Error
						? error.message
						: "An unknown error occurred",
			});
		}
	}
);

export const updateProfileInDatabase = createAsyncThunk(
	"profile/updateProfileInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Updating profile:", data);
			// Validate input before sending to service
			const validatedData = profileSchema.safeParse(data);
			if (validatedData.success) {
				const response = await editProfile(data.id, validatedData.data);
				logger.info("Profile updated successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error updating profile:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeProfileFromDatabase = createAsyncThunk(
	"profile/removeProfileFromDatabase",
	async ({ profileId, portfolioId }, { rejectWithValue }) => {
		try {
			logger.info("Removing profile:", { profileId, portfolioId });
			await deleteProfile(profileId, portfolioId);
			logger.info("Profile removed successfully:", {
				profileId,
				portfolioId,
			});
			return { profileId, portfolioId };
		} catch (error) {
			logger.error("Error removing profile:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/project.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { projectSchema } from "@/schema/sections";
import { createProject, editProject, deleteProject } from "@/services/project";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addProjectInDatabase = createAsyncThunk(
	"project/addProjectInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Adding project:", data);
			const validatedData = projectSchema.safeParse(data);
			if (validatedData.success) {
				const response = await createProject(validatedData.data);
				logger.info("Project added successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error adding project:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateProjectInDatabase = createAsyncThunk(
	"project/updateProjectInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Updating project:", data);
			const validatedData = projectSchema.safeParse(data);
			if (validatedData.success) {
				const response = await editProject(data.id, validatedData.data);
				logger.info("Project updated successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error updating project:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeProjectFromDatabase = createAsyncThunk(
	"project/removeProjectFromDatabase",
	async ({ projectId, portfolioId }, { rejectWithValue }) => {
		try {
			logger.info("Removing project:", { projectId, portfolioId });
			await deleteProject(projectId, portfolioId);
			logger.info("Project removed successfully:", {
				projectId,
				portfolioId,
			});
			return { projectId, portfolioId };
		} catch (error) {
			logger.error("Error removing project:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/skill.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { skillSchema } from "@/schema/sections";
import { createSkill, deleteSkill, editSkill } from "@/services/skill";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addSkillInDatabase = createAsyncThunk(
	"skill/addSkillInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Adding skill:", data);
			const validatedData = skillSchema.safeParse(data);
			if (validatedData.success) {
				const response = await createSkill(validatedData.data);
				logger.info("Skill added successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error adding skill:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateSkillnInDatabase = createAsyncThunk(
	"skill/updateSkillInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			logger.info("Updating skill:", data);
			const validatedData = skillSchema.safeParse(data);
			if (validatedData.success) {
				const response = await editSkill(data.id, validatedData.data);
				logger.info("Skill updated successfully:", response);
				return response;
			}
		} catch (error) {
			logger.error("Error updating skill:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeSkillFromDatabase = createAsyncThunk(
	"skill/removeSkillFromDatabase",
	async ({ skillId, portfolioId }, { rejectWithValue }) => {
		try {
			logger.info("Removing skill:", { skillId, portfolioId });
			await deleteSkill(skillId, portfolioId);
			logger.info("Skill removed successfully:", {
				skillId,
				portfolioId,
			});
			return { skillId, portfolioId };
		} catch (error) {
			logger.error("Error removing skill:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: redux/thunks/team.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { teamSchema } from "@/schema/sections";
import {
	createTeamMember,
	deleteTeamMember,
	editTeamMember,
} from "@/services/team";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addTeamMemberInDatabase = createAsyncThunk(
	"team/addTeamMemberInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			const validatedData = teamSchema.safeParse(data);
			if (validatedData.success) {
				const result = await createTeamMember(validatedData.data);
				return result;
			}
		} catch (error) {
			logger.error("Error adding team member:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateTeamMemberInDatabase = createAsyncThunk(
	"team/updateTeamMemberInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			const validatedData = teamSchema.safeParse(data);
			if (validatedData.success) {
				return await editTeamMember(data.id, validatedData.data);
			}
		} catch (error) {
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeTeamMemberFromDatabase = createAsyncThunk(
	"team/removeTeamMemberFromDatabase",
	async ({ teamMemberId, portfolioId }, { rejectWithValue }) => {
		try {
			await deleteTeamMember(teamMemberId, portfolioId);
			return { teamMemberId, portfolioId };
		} catch (error) {
			logger.error("Error removing team member:", error);
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "Failed to remove team member"
			);
		}
	}
);

================
File: redux/thunks/testimonials.js
================
import { createAsyncThunk } from "@reduxjs/toolkit";
import { testimonialSchema } from "@/schema/sections";
import {
	createTestimonial,
	deleteTestimonial,
	editTestimonial,
} from "@/services/testimonial";
import { z } from "zod";
import { logger } from "@/lib/utils";

export const addTestimonialInDatabase = createAsyncThunk(
	"testimonial/addTestimonialInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			const validatedData = testimonialSchema.safeParse(data);
			if (validatedData.success) {
				const result = await createTestimonial(validatedData.data);
				return result;
			}
		} catch (error) {
			logger.error("Error adding testimonial:", error);
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const updateTestimonialInDatabase = createAsyncThunk(
	"testimonial/updateTestimonialInDatabase",
	async (data, { rejectWithValue }) => {
		try {
			const validatedData = testimonialSchema.safeParse(data);
			if (validatedData.success) {
				return await editTestimonial(data.id, validatedData.data);
			}
		} catch (error) {
			if (error instanceof z.ZodError) {
				return rejectWithValue(error.errors[0].message);
			}
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

export const removeTestimonialFromDatabase = createAsyncThunk(
	"testimonial/removeTestimonialFromDatabase",
	async ({ testimonialId, portfolioId }, { rejectWithValue }) => {
		try {
			await deleteTestimonial(testimonialId, portfolioId);
			return { testimonialId, portfolioId };
		} catch (error) {
			return rejectWithValue(
				error instanceof Error
					? error.message
					: "An unknown error occurred"
			);
		}
	}
);

================
File: sanity.cli.js
================
/**
* This configuration file lets you run `$ sanity [command]` in this folder
* Go to https://www.sanity.io/docs/cli to learn more.
**/
import { defineCliConfig } from 'sanity/cli'

const projectId = process.env.NEXT_PUBLIC_SANITY_PROJECT_ID
const dataset = process.env.NEXT_PUBLIC_SANITY_DATASET

export default defineCliConfig({ api: { projectId, dataset } })

================
File: sanity.config.js
================
"use client";

/**
 * This configuration is used to for the Sanity Studio that’s mounted on the `\app\app\studio\[[...tool]]\page.jsx` route
 */

import { visionTool } from "@sanity/vision";
import { defineConfig } from "sanity";
import { structureTool } from "sanity/structure";

// Go to https://www.sanity.io/docs/api-versioning to learn how API versioning works
import { apiVersion, dataset, projectId } from "./sanity/env";
import { schema } from "./sanity/schemaTypes";
import { structure } from "./sanity/structure";
import { siteConfig } from "./config/site";

export default defineConfig({
	basePath: "/studio",
	name: `${siteConfig.name}_Content_Studio`,
	title: `${siteConfig.name} Content Studio`,
	projectId,
	dataset,
	// Add and edit the content schema in the './sanity/schemaTypes' folder
	schema,
	plugins: [
		structureTool({ structure }),
		// Vision is for querying with GROQ from inside the Studio
		// https://www.sanity.io/docs/the-vision-plugin
		visionTool({ defaultApiVersion: apiVersion }),
	],
});

================
File: sanity/env.js
================
export const apiVersion =
  process.env.NEXT_PUBLIC_SANITY_API_VERSION || '2025-01-29'

export const dataset = process.env.NEXT_PUBLIC_SANITY_DATASET;
export const projectId = process.env.NEXT_PUBLIC_SANITY_PROJECT_ID;

================
File: sanity/lib/client.js
================
import { createClient } from 'next-sanity'

import { apiVersion, dataset, projectId } from '../env'

export const client = createClient({
  projectId,
  dataset,
  apiVersion,
  useCdn: true, // Set to false if statically generating pages, using ISR or tag-based revalidation
})

================
File: sanity/lib/image.js
================
import createImageUrlBuilder from '@sanity/image-url'

import { dataset, projectId } from '../env'

// https://www.sanity.io/docs/image-url
const builder = createImageUrlBuilder({ projectId, dataset })

export const urlFor = (source) => {
  return builder.image(source)
}

================
File: sanity/lib/live.js
================
// Querying with "sanityFetch" will keep content automatically updated
// Before using it, import and render "<SanityLive />" in your layout, see
// https://github.com/sanity-io/next-sanity#live-content-api for more information.
import { defineLive } from "next-sanity";
import { client } from './client'

export const { sanityFetch, SanityLive } = defineLive({ 
  client: client.withConfig({ 
    // Live content is currently only available on the experimental API
    // https://www.sanity.io/docs/api-versioning
    apiVersion: 'vX' 
  }) 
});

================
File: sanity/lib/queries.js
================
import { groq } from "next-sanity";

// Get all posts
export const postsQuery = groq`*[_type == "post"] | order(_createdAt desc) {
  _createdAt,
  title,
  description,
  slug,
  mainImage,
  "imageURL": mainImage.asset->url,
  "authorName": author->name,
}`;

// Get a single post by its slug
export const postQuery = groq`*[_type == "post" && slug.current == $slug][0]{ 
    title,
    description,
    mainImage,
    body[]{
      ...,
      _type == "image" => {
        ...,
        asset->{
          ...,
          metadata
        }
      }
    },
    "authorName": author->name,
    "authorImage": author->image,
    "authorTwitter": author->twitter
  }`;

// Get all post slugs
export const postPathsQuery = groq`*[_type == "post" && defined(slug.current)][]{
    "params": { "slug": slug.current }
  }`;

// Get 4 most recent posts
export const recentPostsQuery = groq`*[_type == "post"] | order(date desc) [0...4] {
  "slug": slug.current,
  title,
  description,
  date,
  "image": mainImage.asset->url
}`;

export const postSlugsQuery = groq`*[_type == "post"] {
  "slug": slug.current,
  date
}`;

================
File: sanity/schemaTypes/authorType.js
================
import {UserIcon} from '@sanity/icons'
import {defineArrayMember, defineField, defineType} from 'sanity'

export const authorType = defineType({
  name: 'author',
  title: 'Author',
  type: 'document',
  icon: UserIcon,
  fields: [
    defineField({
      name: 'name',
      type: 'string',
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      options: {
        source: 'name',
      },
    }),
    defineField({
      name: 'image',
      type: 'image',
      options: {
        hotspot: true,
      },
    }),
    defineField({
      name: 'bio',
      type: 'array',
      of: [
        defineArrayMember({
          type: 'block',
          styles: [{title: 'Normal', value: 'normal'}],
          lists: [],
        }),
      ],
    }),
  ],
  preview: {
    select: {
      title: 'name',
      media: 'image',
    },
  },
})

================
File: sanity/schemaTypes/blockContentType.js
================
import {defineType, defineArrayMember} from 'sanity'
import {ImageIcon} from '@sanity/icons'

/**
 * This is the schema type for block content used in the post document type
 * Importing this type into the studio configuration's `schema` property
 * lets you reuse it in other document types with:
 *  {
 *    name: 'someName',
 *    title: 'Some title',
 *    type: 'blockContent'
 *  }
 */

export const blockContentType = defineType({
  title: 'Block Content',
  name: 'blockContent',
  type: 'array',
  of: [
    defineArrayMember({
      type: 'block',
      // Styles let you define what blocks can be marked up as. The default
      // set corresponds with HTML tags, but you can set any title or value
      // you want, and decide how you want to deal with it where you want to
      // use your content.
      styles: [
        {title: 'Normal', value: 'normal'},
        {title: 'H1', value: 'h1'},
        {title: 'H2', value: 'h2'},
        {title: 'H3', value: 'h3'},
        {title: 'H4', value: 'h4'},
        {title: 'Quote', value: 'blockquote'},
      ],
      lists: [{title: 'Bullet', value: 'bullet'}],
      // Marks let you mark up inline text in the Portable Text Editor
      marks: {
        // Decorators usually describe a single property – e.g. a typographic
        // preference or highlighting
        decorators: [
          {title: 'Strong', value: 'strong'},
          {title: 'Emphasis', value: 'em'},
        ],
        // Annotations can be any object structure – e.g. a link or a footnote.
        annotations: [
          {
            title: 'URL',
            name: 'link',
            type: 'object',
            fields: [
              {
                title: 'URL',
                name: 'href',
                type: 'url',
              },
            ],
          },
        ],
      },
    }),
    // You can add additional types here. Note that you can't use
    // primitive types such as 'string' and 'number' in the same array
    // as a block type.
    defineArrayMember({
      type: 'image',
      icon: ImageIcon,
      options: {hotspot: true},
      fields: [
        {
          name: 'alt',
          type: 'string',
          title: 'Alternative Text',
        }
      ]
    }),
  ],
})

================
File: sanity/schemaTypes/categoryType.js
================
import {TagIcon} from '@sanity/icons'
import {defineField, defineType} from 'sanity'

export const categoryType = defineType({
  name: 'category',
  title: 'Category',
  type: 'document',
  icon: TagIcon,
  fields: [
    defineField({
      name: 'title',
      type: 'string',
    }),
    defineField({
      name: 'slug',
      type: 'slug',
      options: {
        source: 'title',
      },
    }),
    defineField({
      name: 'description',
      type: 'text',
    }),
  ],
})

================
File: sanity/schemaTypes/index.js
================
import {blockContentType} from './blockContentType'
import {categoryType} from './categoryType'
import {postType} from './postType'
import {authorType} from './authorType'

export const schema = {
  types: [blockContentType, categoryType, postType, authorType],
}

================
File: sanity/schemaTypes/postType.js
================
import { DocumentTextIcon } from "@sanity/icons";
import { defineArrayMember, defineField, defineType } from "sanity";

export const postType = defineType({
	name: "post",
	title: "Post",
	type: "document",
	icon: DocumentTextIcon,
	fields: [
		defineField({
			name: "title",
			type: "string",
		}),
		defineField({
			name: "slug",
			type: "slug",
			options: {
				source: "title",
			},
		}),
		defineField({
			name: "author",
			type: "reference",
			to: { type: "author" },
		}),
		defineField({
			name: "mainImage",
			type: "image",
			options: {
				hotspot: true,
			},
			fields: [
				defineField({
					name: "alt",
					type: "string",
					title: "Alternative text",
				}),
			],
		}),
		defineField({
			name: "categories",
			type: "array",
			of: [
				defineArrayMember({
					type: "reference",
					to: { type: "category" },
				}),
			],
		}),
		defineField({
			name: "publishedAt",
			type: "datetime",
		}),
		defineField({
			name: "body",
			type: "blockContent",
		}),
	],
	preview: {
		select: {
			title: "title",
			author: "author.name",
			media: "mainImage",
		},
		prepare(selection) {
			const { author } = selection;
			return { ...selection, subtitle: author && `by ${author}` };
		},
	},
});

================
File: sanity/structure.js
================
// https://www.sanity.io/docs/structure-builder-cheat-sheet
export const structure = (S) =>
  S.list()
    .title('Blog')
    .items([
      S.documentTypeListItem('post').title('Posts'),
      S.documentTypeListItem('category').title('Categories'),
      S.documentTypeListItem('author').title('Authors'),
      S.divider(),
      ...S.documentTypeListItems().filter(
        (item) => item.getId() && !['post', 'category', 'author'].includes(item.getId()),
      ),
    ])

================
File: schema/contact.js
================
import { z } from "zod";

// Validation schema
export const ContactFormSchema = z.object({
	username: z
		.literal("")
		.or(z.string().min(1, "Username is required"))
		.nullable(),
	full_name: z.string().min(2, "Full name is required"),
	email: z.string().email("Invalid email address"),
	message: z.string().min(10, "Message must be at least 10 characters"),
});

================
File: schema/secrets.js
================
import { idSchema } from "./shared/id";
import { z } from "zod";

export const secretsSchema = z.object({
	id: idSchema,
	password: z.string().nullable(),
	lastSignedIn: z.date().nullable(),
	verificationToken: z.string().nullable(),
	twoFactorSecret: z.string().nullable(),
	twoFactorBackupCodes: z.array(z.string()).default([]),
	refreshToken: z.string().nullable(),
	resetToken: z.string().nullable(),
	userId: idSchema,
});

================
File: schema/sections/basics.js
================
import { createId } from "@paralleldrive/cuid2";
import { idSchema } from "../shared/id";
import { z } from "zod";

export const basicsSchema = z.object({
	id: idSchema,
	portfolioId: z.string(),
	name: z.literal("").or(z.string().min(2, "Name is required")),
	headline: z.literal("").or(z.string().min(2, "Headline is required")),
	email: z.literal("").or(z.string().email("Invalid email address")),
	phone: z.literal("").or(z.string().min(7, "Phone number is required")),
	location: z.literal("").or(z.string().min(2, "Location is required")),
	url: z
		.literal("")
		.or(z.string().url("Invalid personal or professional website URL")),
	picture: z.literal("").or(z.string().url("Invalid image URL")),
	summary: z.string().default(""),
	about: z.string().default(""),
});

// Defaults
export const defaultBasics = {
	id: createId(),
	portfolioId: "",
	name: "",
	headline: "",
	email: "",
	phone: "",
	location: "",
	url: "",
	picture: "",
	summary: "",
	about: "",
};

================
File: schema/sections/blog.js
================
import { z } from "zod";
import { idSchema } from "../shared/id";
import { createId } from "@paralleldrive/cuid2";

// Schema for blog metadata
export const blogMetadataSchema = z.object({
	title: z.string().min(1, "Title is required"),
	slug: z.string(),
	excerpt: z.string().optional(),
	featuredImage: z.string().url("Invalid image URL").optional().nullable(),
	status: z.enum(["draft", "published"]).default("draft"),
	tags: z
		.array(
			z.object({
				id: z.string().optional(),
				name: z.string(),
				slug: z.string().optional(),
			})
		)
		.default([]),
});

// Schema for full blog post
export const blogSchema = z
	.object({
		id: idSchema,
		portfolioId: z.string(),
		authorId: z.string(),
		content: z.any(), // For rich text content
		publishedAt: z.date().nullable(),
		views: z.number().default(0),
		likes: z.number().default(0),
		createdAt: z.date(),
		updatedAt: z.date(),
	})
	.merge(blogMetadataSchema);

// Default values
export const defaultBlogMetadata = {
	title: "",
	slug: "",
	excerpt: "",
	content: null,
	featuredImage: null,
	status: "draft",
	tags: [],
};

export const defaultBlog = {
	...defaultBlogMetadata,
	id: createId(),
	views: 0,
	likes: 0,
	publishedAt: null,
	createdAt: new Date().toISOString(),
	updatedAt: new Date().toISOString(),
};

================
File: schema/sections/certification.js
================
import { z } from "zod";

import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const certificationSchema = itemSchema.extend({
	name: z.string().min(1),
	issuer: z.string(),
	date: z.string(),
	summary: z.string(),
	url: z.literal("").or(z.string().url()),
});

// Defaults
export const defaultCertification = {
	...defaultItem,
	name: "",
	issuer: "",
	date: "",
	summary: "",
	url: "",
};

================
File: schema/sections/education.js
================
import { z } from "zod";
import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const educationSchema = itemSchema.extend({
	institution: z.string().min(1),
	studyType: z.string(),
	date: z.string(),
	summary: z.string().optional(),
	logo: z.literal("").or(z.string().url()).nullable(),
	url: z.literal("").or(z.string().url()),
});

// Defaults
export const defaultEducation = {
	...defaultItem,
	institution: "",
	studyType: "",
	date: "",
	summary: "",
	logo: "",
	url: "",
};

================
File: schema/sections/experience.js
================
import { z } from "zod";

import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const experienceSchema = itemSchema.extend({
	company: z.string().min(1),
	position: z.string(),
	location: z.string().optional(),
	date: z.string(),
	summary: z.string(),
	picture: z.literal("").or(z.string().url("Invalid image URL")),
	url: z.literal("").or(z.string().url()),
});

// Defaults
export const defaultExperience = {
	...defaultItem,
	company: "",
	position: "",
	location: "",
	date: "",
	summary: "",
	picture: "",
	url: "",
};

================
File: schema/sections/hackathon.js
================
import { z } from "zod";

import { defaultItem, itemSchema } from "../shared/items";
import { linkSchema } from "../shared/links";

// Schema
export const hackathonSchema = itemSchema.extend({
	name: z.string().min(1),
	location: z.string(),
	description: z.string(),
	date: z.string(),
	logo: z.literal("").or(z.string().url("Invalid image URL")).nullable(),
	links: z.array(linkSchema).default([]),
});

// Defaults
export const defaultHackathon = {
	...defaultItem,
	name: "",
	location: "",
	description: "",
	date: "",
	logo: "",
	links: [],
};

================
File: schema/sections/index.js
================
import { z } from "zod";

import { certificationSchema } from "./certification";
import { educationSchema } from "./education";
import { experienceSchema } from "./experience";
import { profileSchema } from "./profile";
import { projectSchema } from "./project";
import { skillSchema } from "./skill";
import { hackathonSchema } from "./hackathon";
import { createId } from "@paralleldrive/cuid2";
import { basicsSchema, defaultBasics } from "./basics";
import { idSchema } from "../shared/id";
import { testimonialSchema } from "./testimonial";
import { teamSchema } from "./team"; // Add this line

// Schema
export const sectionSchema = z.object({
	name: z.string(),
	visible: z.boolean().default(true),
});

export const portfolioSchema = z.object({
	id: idSchema,
	name: z.string().min(1).max(255),
	slug: z.string().min(1).max(255),
	isLive: z.boolean().default(false),
	blogEnabled: z.boolean().default(false),
	template: z.string().default("default"),
});

// Schema
export const mainSchema = portfolioSchema.extend({
	customDomain: z.string().optional(),
	// Add organization fields
	organizationId: z.string().optional(),
	basics: sectionSchema.extend(basicsSchema),
	certifications: sectionSchema.extend({
		id: z.literal("certification"),
		items: z.array(certificationSchema),
	}),
	educations: sectionSchema.extend({
		id: z.literal("education"),
		items: z.array(educationSchema),
	}),
	experiences: sectionSchema.extend({
		id: z.literal("experience"),
		items: z.array(experienceSchema),
	}),
	hackathons: sectionSchema.extend({
		id: z.literal("hackathon"),
		items: z.array(hackathonSchema),
	}),
	profiles: sectionSchema.extend({
		id: z.literal("profile"),
		items: z.array(profileSchema),
	}),
	projects: sectionSchema.extend({
		id: z.literal("project"),
		items: z.array(projectSchema),
	}),
	skills: sectionSchema.extend({
		id: z.literal("skill"),
		items: z.array(skillSchema),
	}),
	testimonials: sectionSchema.extend({
		id: z.literal("testimonial"),
		items: z.array(testimonialSchema),
	}),
	teams: sectionSchema.extend({
		// Add this section
		id: z.literal("team"),
		items: z.array(teamSchema),
	}),
});

// Defaults
export const defaultSection = {
	name: "",
	visible: true,
	status: "idle", // Added to track async operation status
	error: null,
};

export const defaultPortfolio = {
	id: createId(),
	name: "",
	slug: "",
	isLive: false,
	blogEnabled: false,
	template: "default",
};

export const defaultMain = {
	...defaultPortfolio,
	customDomain: "",
	organizationId: null,
	basics: {
		...defaultSection,
		...defaultBasics,
		id: "basics",
	},
	hackathons: {
		...defaultSection,
		id: "hackathon",
		name: "Hackathons",
		items: [],
	},
	certifications: {
		...defaultSection,
		id: "certification",
		name: "Certifications",
		items: [],
	},
	educations: {
		...defaultSection,
		id: "education",
		name: "Education",
		items: [],
	},
	experiences: {
		...defaultSection,
		id: "experience",
		name: "Experiences",
		items: [],
	},
	profiles: {
		...defaultSection,
		id: "profiles",
		name: "Profiles",
		items: [],
	},
	projects: {
		...defaultSection,
		id: "projects",
		name: "Projects",
		items: [],
	},
	skills: { ...defaultSection, id: "skills", name: "Skills", items: [] },
	testimonials: {
		...defaultSection,
		id: "testimonial",
		name: "Testimonials",
		items: [],
	},
	teams: {
		// Add this section
		...defaultSection,
		id: "team",
		name: "Team",
		items: [],
	},
};

export * from "./certification";
export * from "./education";
export * from "./experience";
export * from "./hackathon";
export * from "./language";
export * from "./profile";
export * from "./project";
export * from "./skill";
export * from "./testimonial";
export * from "./team"; // Add this line

================
File: schema/sections/language.js
================
import { z } from "zod";

import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const languageSchema = itemSchema.extend({
	name: z.string().min(1),
});

// Defaults
export const defaultLanguage = {
	...defaultItem,
	name: "",
};

================
File: schema/sections/profile.js
================
import { z } from "zod";
import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const profileSchema = itemSchema.extend({
	network: z.string().min(1),
	username: z.string().min(1),
	url: z.string().url("Invalid profile URL"),
});

// Defaults
export const defaultProfile = {
	...defaultItem,
	network: "",
	username: "",
	url: "",
};

================
File: schema/sections/project.js
================
import { z } from "zod";

import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const projectSchema = itemSchema.extend({
	name: z.string().min(1, "Project name cannot be empty"),
	description: z.string(),
	date: z.string(),
	technologies: z.array(z.string()).default([]),
	website: z.literal("").or(z.string().url("Invalid URL")).nullable(), // Allow empty string, valid URL, or null
	source: z.literal("").or(z.string().url("Invalid URL")).nullable(), // Allow empty string, valid URL, or null
	image: z.literal("").or(z.string().url("Invalid URL")).nullable(), // Allow empty string, valid URL, or null
	video: z.literal("").or(z.string().url("Invalid URL")).nullable(), // Allow empty string, valid URL, or null
});

// Defaults
export const defaultProject = {
	...defaultItem,
	name: "",
	description: "",
	date: "",
	technologies: [],
	website: "",
	source: "",
	image: "",
	video: "",
};

================
File: schema/sections/skill.js
================
import { z } from "zod";

import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const skillSchema = itemSchema.extend({
	name: z.string(),
	description: z.literal("").or(z.string()),
});

// Defaults
export const defaultSkill = {
	...defaultItem,
	name: "",
	description: "",
};

================
File: schema/sections/team.js
================
import { z } from "zod";
import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const teamSchema = itemSchema.extend({
	name: z.string().min(1),
	role: z.string().min(1),
	bio: z.string().optional(),
	avatar: z.literal("").or(z.string().url()).nullable(),
	links: z
		.array(
			z.object({
				label: z.string(),
				url: z.string().url(),
				icon: z.string().optional(),
			})
		)
		.optional(),
});

// Defaults
export const defaultTeam = {
	...defaultItem,
	name: "",
	role: "",
	bio: "",
	avatar: "",
	links: [],
};

================
File: schema/sections/testimonial.js
================
import { z } from "zod";
import { defaultItem, itemSchema } from "../shared/items";

// Schema
export const testimonialSchema = itemSchema.extend({
	name: z.string().min(1),
	role: z.string(),
	company: z.string().optional(),
	message: z.string(),
	avatar: z.literal("").or(z.string().url()).nullable(),
	rating: z.number().min(1).max(5).default(5),
});

// Defaults
export const defaultTestimonial = {
	...defaultItem,
	name: "",
	role: "",
	company: "",
	message: "",
	avatar: "",
	rating: 5,
};

================
File: schema/shared/id.js
================
import { createId } from "@paralleldrive/cuid2";
import { z } from "zod";

export const idSchema = z
	.string()
	.cuid2()
	.default(createId())
	.describe("Unique identifier for the item in Cuid2 format");

================
File: schema/shared/items.js
================
import { z } from "zod";

import { idSchema } from "./id";
import { createId } from "@paralleldrive/cuid2";

// Schema
export const itemSchema = z.object({
	id: idSchema,
	visible: z.boolean(),
	portfolioId: z.string(),
});

// Defaults
export const defaultItem = {
	id: createId(),
	visible: true,
	portfolioId: "",
};

================
File: schema/shared/links.js
================
import { z } from "zod";

import { idSchema } from "./id";
import { createId } from "@paralleldrive/cuid2";

// Schema
export const linkSchema = z.object({
	id: idSchema,
	label: z.string(),
	url: z.string().url("Invalid URL"),
	icon: z.string().nullable(), // Changed to properly handle null values
});

// Defaults
export const defaultLink = {
	id: createId(),
	label: "",
	url: "",
	icon: null, // Changed from empty string to null
};

================
File: schema/shared/url.js
================
import { z } from "zod";

// Schema
export const urlSchema = z.object({
	label: z.string(),
	href: z.literal("").or(z.string().url()),
});

// Defaults
export const defaultUrl = {
	label: "",
	href: "",
};

================
File: schema/user.js
================
import { idSchema } from "./shared/id";
import { z } from "zod";

import { secretsSchema } from "./secrets";
import { createId } from "@paralleldrive/cuid2";

const subscriptionSchema = z
	.object({
		id: idSchema,
		type: z.enum(["INDIVIDUAL", "TEAM"]),
		frequency: z.string(),
		status: z.string(),
		priceId: z.string(),
		startDate: z.date().nullable(),
		endDate: z.date().nullable(),
	})
	.nullable();

export const userSchema = z.object({
	id: z
		.string()
		.default(createId())
		.describe("Unique identifier for the item in Cuid2 format"),
	email: z.string().email(),
	subscribed: z.boolean().default(false),
	userType: z.literal("").or(z.string().min(3).max(255)),
	createdAt: z.date(),
	updatedAt: z.date(),
	subscription: subscriptionSchema,
});

export const defaultUser = {
	id: createId(),
	email: "",
	subscribed: false,
	userType: "INDIVIDUAL",
	createdAt: "",
	updatedAt: "",
	subscription: null,
};

export const userWithSecretsSchema = userSchema.merge(
	z.object({ secrets: secretsSchema })
);

================
File: services/basics.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { defaultBasics, basicsSchema } from "@/schema/sections/basics";

const select = {
	id: true,
	createdAt: false,
	updatedAt: false,
	name: true,
	headline: true,
	email: true,
	phone: true,
	location: true,
	url: true,
	picture: true,
	summary: true,
	about: true,
	portfolioId: true,
};

export async function createBasics(portfolioId, data = defaultBasics) {
	return withErrorHandling(async () => {
		if (!portfolioId) {
			throw new Error("Portfolio ID is required");
		}
		const portfolioExists = await prisma.portfolio.findUnique({
			where: { id: portfolioId },
		});

		if (!portfolioExists) {
			throw new Error("Portfolio does not exist");
		}
		// Create User with Basics
		// Upsert basics with provided or default data
		const basics = await prisma.basics.upsert({
			where: { portfolioId },
			update: {
				...data,
				portfolioId,
			},
			create: {
				...data,
				portfolioId,
			},
			select,
		});
		return basicsSchema.parse(basics);
	});
}

export async function updatePortfolioBasics({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Update user in database
		const updatedBasics = await prisma.basics.update({
			where: { portfolioId },
			data: {
				...data,
				updatedAt: new Date(), // Ensure updated timestamp is set
			},
			select,
		});

		// Revalidate the path to update cached data
		revalidatePath("/builder");

		return basicsSchema.parse(updatedBasics);
	});
}

// Fetch user basics server action
export async function getBasics(portfolioId) {
	return withErrorHandling(async () => {
		if (!portfolioId) {
			throw new Error("Unauthorized");
		}

		// Fetch user from database
		const userData = await prisma.basics.findUnique({
			where: { portfolioId },
			select,
		});

		if (!userData) {
			throw new Error("User not found");
		}

		// Validate the fetched data against the schema
		return basicsSchema.parse(userData);
	});
}

================
File: services/blog.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { blogSchema } from "@/schema/sections/blog";
import { slugify } from "@/utils/text";

const select = {
	id: true,
	title: true,
	slug: true,
	excerpt: true,
	content: true,
	featuredImage: true,
	status: true,
	publishedAt: true,
	createdAt: true,
	updatedAt: true,
	views: true,
	likes: true,
	portfolioId: true,
	authorId: true,
	tags: {
		select: {
			id: true,
			name: true,
			slug: true,
		},
	},
};

const serializeDates = (blog) => ({
	...blog,
	publishedAt: blog.publishedAt?.toISOString(),
	createdAt: blog.createdAt?.toISOString(),
	updatedAt: blog.updatedAt?.toISOString(),
});

// Keep tags as objects when processing blog data
const processBlog = (blog) => {
	const parsed = blogSchema.parse(blog);
	return serializeDates(parsed);
};

export async function getBlogs(portfolioId) {
	return withErrorHandling(async () => {
		const blogs = await prisma.blog.findMany({
			where: { portfolioId },
			orderBy: { updatedAt: "desc" },
			select,
		});
		return blogs.map(processBlog);
	});
}

// Update other functions to use processBlog instead of direct serialization
export async function getBlog(blogId, portfolioId) {
	return withErrorHandling(async () => {
		const blog = await prisma.blog.findFirst({
			where: {
				id: blogId,
				portfolioId,
			},
			select,
		});

		if (!blog) {
			throw new Error("Blog not found");
		}

		return processBlog(blog);
	});
}

export async function createBlog({ portfolioId, data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId) throw new Error("Unauthorized");
		if (!portfolioId) throw new Error("Portfolio ID is required");

		// Separate tags from main data
		const { tags = [], ...blogData } = data;

		const blog = await prisma.blog.create({
			data: {
				...blogData,
				authorId: userId,
				portfolio: { connect: { id: portfolioId } },
				tags: {
					connectOrCreate: tags.map((tag) => ({
						where: {
							slug: tag.slug || slugify(tag.name),
						},
						create: {
							name: tag.name,
							slug: tag.slug || slugify(tag.name),
						},
					})),
				},
			},
			select,
		});

		revalidatePath("/dashboard/blogs");
		return processBlog(blog);
	});
}

export async function updateBlog({ blogId, portfolioId, data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId) throw new Error("Unauthorized");

		// Separate tags from main data
		const { tags = [], ...blogData } = data;

		const blog = await prisma.blog.update({
			where: {
				id: blogId,
				portfolioId,
			},
			data: {
				...blogData,
				tags: {
					set: [], // Clear existing tags
					connectOrCreate: tags.map((tag) => ({
						where: {
							slug: tag.slug || slugify(tag.name),
						},
						create: {
							name: tag.name,
							slug: tag.slug || slugify(tag.name),
						},
					})),
				},
			},
			select,
		});

		revalidatePath("/dashboard/blogs");
		return processBlog(blog);
	});
}

export async function deleteBlog({ blogId, portfolioId }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId) {
			throw new Error("Unauthorized");
		}

		await prisma.blog.delete({
			where: {
				id: blogId,
				portfolioId,
			},
		});

		revalidatePath("/dashboard/blogs");
		return { id: blogId };
	});
}

export async function getBlogPosts(portfolioId) {
	return withErrorHandling(async () => {
		const posts = await prisma.blog.findMany({
			where: {
				portfolioId,
				status: "published",
			},
			orderBy: {
				publishedAt: "desc",
			},
			select,
		});

		return posts.map(processBlog);
	});
}

export async function getBlogPost(portfolioId, slug) {
	return withErrorHandling(async () => {
		const post = await prisma.blog.findFirst({
			where: {
				portfolioId,
				slug,
				status: "published",
			},
			select,
		});

		if (!post) throw new Error("Post not found");

		await prisma.blog.update({
			where: { id: post.id },
			data: { views: { increment: 1 } },
		});

		return processBlog(post);
	});
}

================
File: services/certification.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { certificationSchema } from "@/schema/sections";

const certificationSelect = {
	id: true,
	visible: true,
	name: true,
	issuer: true,
	date: true,
	summary: true,
	url: true,
	portfolioId: true,
	// Exclude createdAt and updatedAt
};

export async function getCertifications(portfolioId) {
	return withErrorHandling(async () => {
		const certifications = await prisma.certification.findMany({
			where: { portfolioId },
			select: certificationSelect,
		});
		if (certifications.length > 0) {
			return certifications.map((item) =>
				certificationSchema.parse(item)
			);
		}
		return [];
	});
}

export async function createCertification({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const certification = await prisma.certification.create({
			data: {
				...data,
				portfolio: { connect: { id: portfolioId } },
			},
			select: certificationSelect,
		});

		revalidatePath("/builder");
		return certificationSchema.parse(certification);
	});
}

export async function editCertification(
	certificationId,
	{ portfolioId, ...data }
) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		if (!certificationId || !portfolioId) {
			throw new Error("Certification Id required");
		}

		const updatedCertification = await prisma.certification.update({
			where: { id: certificationId, portfolioId },
			data: {
				...data,
				updatedAt: new Date(),
			},
			select: certificationSelect,
		});

		revalidatePath("/builder");
		return certificationSchema.parse(updatedCertification);
	});
}

export async function deleteCertification(certificationId, portfolioId) {
	return withErrorHandling(async () => {
		if (!certificationId || !portfolioId) {
			throw new Error("Certification Id required");
		}

		await prisma.certification.delete({
			where: { id: certificationId, portfolioId },
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return { certificationId, portfolioId };
	});
}

================
File: services/code.js
================
"use server";

import { withErrorHandling } from "./shared";
import { prisma } from "@/lib/db";

export async function activateUserCode(userCode, userId) {
	return withErrorHandling(async () => {
		// Fetch the userId based on the username
		const code = await prisma.code.update({
			where: {
				code: userCode,
				isActive: true,
			},
			data: {
				isActive: false,
				userId,
				updatedAt: new Date(), // Ensure updated timestamp is set
			},
		});

		const user = await prisma.user.update({
			where: { id: userId },
			data: {
				codeId: code.id,
				subscribed: true,
				updatedAt: new Date(), // Ensure updated timestamp is set
			},
		});
		return code;
	});
}

================
File: services/contact.js
================
"use server";

import { withErrorHandling } from "./shared";
import { prisma } from "@/lib/db";

export async function saveContact({ email, full_name, message }) {
	return withErrorHandling(async () => {
		if (!email || !full_name || !message) {
			throw new Error("All fields are required.");
		}
		const contact = await prisma.contact.create({
			data: {
				email,
				full_name,
				message,
			},
		});
		return contact;
	});
}

================
File: services/domain.js
================
import { updatePortfolioInDatabase } from "@/redux/thunks/portfolio";
import {
	addDomainToVercel,
	removeDomainFromVercelProject,
} from "@/lib/domains";

export async function updateDomain({
	portfolioId,
	domain,
	dispatch,
	portfolio,
}) {
	try {
		// Add domain to Vercel
		if (domain) {
			await addDomainToVercel(domain);
		}

		// If there's an existing domain and it's different, remove it
		if (portfolio.customDomain && portfolio.customDomain !== domain) {
			await removeDomainFromVercelProject(portfolio.customDomain);
		}

		// Update portfolio in database
		await dispatch(
			updatePortfolioInDatabase({
				id: portfolioId,
				data: { ...portfolio, customDomain: domain },
			})
		).unwrap();

		return { success: true };
	} catch (error) {
		console.error("Error updating domain:", error);
		return { success: false, error: error.message };
	}
}

================
File: services/education.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { educationSchema } from "@/schema/sections";

const educationSelect = {
	id: true,
	visible: true,
	institution: true,
	studyType: true,
	date: true,
	summary: true,
	logo: true,
	url: true,
	portfolioId: true,
};

export async function getEducations(portfolioId) {
	return withErrorHandling(async () => {
		const educations = await prisma.education.findMany({
			where: { portfolioId },
			select: educationSelect,
		});
		if (educations.length > 0) {
			return educations.map((item) => educationSchema.parse(item));
		}
		return [];
	});
}

export async function createEducation({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Create education with additional metadata
		const edu = await prisma.education.create({
			data: {
				...data,
				portfolio: { connect: { id: portfolioId } },
			},
			select: educationSelect,
		});

		// Revalidate multiple potential paths
		revalidatePath("/builder");
		return educationSchema.parse(edu);
	});
}

export async function editEducation(educationId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const updatedEdu = await prisma.education.update({
			where: { id: educationId, portfolioId },
			data: {
				...data,
				updatedAt: new Date(),
			},
			select: educationSelect,
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return educationSchema.parse(updatedEdu);
	});
}

export async function deleteEducation(educationId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error(
				"Unauthorized: Must be logged in to delete a education"
			);
		}

		await prisma.education.delete({
			where: { id: educationId, portfolioId },
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return { educationId, portfolioId };
	});
}

================
File: services/experience.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { experienceSchema } from "@/schema/sections";

const experienceSelect = {
	id: true,
	visible: true,
	company: true,
	position: true,
	location: true,
	date: true,
	summary: true,
	picture: true,
	url: true,
	portfolioId: true,
	// Exclude createdAt and updatedAt
};

export async function getExperiences(portfolioId) {
	return withErrorHandling(async () => {
		const experiences = await prisma.experience.findMany({
			where: { portfolioId },
			select: experienceSelect,
		});
		if (experiences.length > 0) {
			return experiences.map((item) => experienceSchema.parse(item));
		}
		return [];
	});
}

export async function createExperience({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId) {
			throw new Error("Unauthorized");
		}

		// Create experience with correct data structure
		const exp = await prisma.experience.create({
			data: {
				...data,
				portfolio: {
					connect: { id: portfolioId },
				},
			},
			select: experienceSelect,
		});

		// Revalidate multiple potential paths
		revalidatePath("/builder");
		return experienceSchema.parse(exp);
	});
}

export async function editExperience(experienceId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const updatedExp = await prisma.experience.update({
			where: {
				id: experienceId,
				portfolioId: portfolioId,
			},
			data: {
				...data,
				updatedAt: new Date(),
			},
			select: experienceSelect,
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return experienceSchema.parse(updatedExp);
	});
}

export async function deleteExperience(experienceId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error(
				"Unauthorized: Must be logged in to delete an experience"
			);
		}

		await prisma.experience.delete({
			where: { id: experienceId, portfolioId },
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return { experienceId, portfolioId };
	});
}

================
File: services/hackathon.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { hackathonSchema } from "@/schema/sections";
import { logger } from "@/lib/utils";

const select = {
	id: true,
	name: true,
	description: true,
	date: true,
	location: true,
	visible: true,
	url: true,
	logo: true,
	portfolioId: true,
	links: {
		select: {
			id: true,
			label: true,
			url: true,
			icon: true,
		},
	},
};

export async function getHackathons(portfolioId) {
	return withErrorHandling(async () => {
		const hackathons = await prisma.hackathon.findMany({
			where: { portfolioId },
			select,
		});
		if (hackathons.length > 0) {
			return hackathons.map((item) => hackathonSchema.parse(item));
		}
		return [];
	});
}

export async function createHackathon({ portfolioId, ...data }) {
	logger.info("createHackathon called with data:", data);

	// Validate input data
	if (data === null || data === undefined) {
		logger.error("createHackathon received null or undefined data");
		throw new Error("No hackathon data provided");
	}

	return withErrorHandling(async () => {
		// Defensive checks
		if (!data) {
			logger.error("Data is falsy inside withErrorHandling");
			throw new Error("Invalid hackathon data");
		}

		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			logger.error("No authenticated user found");
			throw new Error("Unauthorized");
		}

		// Ensure links is an array
		const links = Array.isArray(data.links) ? data.links : [];

		// Create a safe copy of data
		const safeHackathonData = {
			id: data.id,
			name: data.name,
			description: data.description,
			date: data.date,
			location: data.location,
			visible: data.visible ?? true,
			url: data.url || null,
			logo: data.logo || null,
		};

		// Create hackathon with additional metadata
		const hackathon = await prisma.hackathon.create({
			data: {
				...safeHackathonData,
				portfolio: { connect: { id: portfolioId } },
				links: {
					create: links.map(({ id, ...link }) => ({
						...link,
						// Exclude the id field when creating new links
					})),
				},
			},
			select,
		});

		logger.info("Created hackathon:", hackathon);

		// Revalidate multiple potential paths
		revalidatePath("/builder");
		return hackathonSchema.parse(hackathon);
	});
}

export async function editHackathon(hackathonId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Destructure links from the data and validate them
		const { links, ...hackathonData } = data;

		// First, delete all existing links
		await prisma.link.deleteMany({
			where: { hackathonId },
		});

		const updatedHackathon = await prisma.hackathon.update({
			where: { id: hackathonId, portfolioId },
			data: {
				...hackathonData,
				updatedAt: new Date(),
				links: {
					create: links.map(({ id, ...link }) => ({
						...link,
						// Exclude the id field when creating new links
					})),
				},
			},
			select,
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return hackathonSchema.parse(updatedHackathon);
	});
}

export async function deleteHackathon(hackathonId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error(
				"Unauthorized: Must be logged in to delete a hackathon"
			);
		}

		await prisma.hackathon.delete({
			where: { id: hackathonId, portfolioId },
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return { hackathonId, portfolioId };
	});
}

================
File: services/newsletter.js
================
import { withErrorHandling } from "./shared";
import { prisma } from "@/lib/db";

export async function createSubscriber(email) {
	return withErrorHandling(async () => {
		// Validate the email
		if (!email || !/^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/.test(email)) {
			throw new Error("Invalid email address");
		}
		// Check if email already exists
		const existingSubscriber = await prisma.newsletter.findUnique({
			where: { email },
		});
		if (existingSubscriber) {
			return existingSubscriber;
		}
		const newSubscriber = await prisma.newsletter.create({
			data: {
				email,
			},
		});
		return newSubscriber;
	});
}

================
File: services/organization.js
================
import { prisma } from "@/lib/db";
import { logger } from "@/lib/utils";
import { withErrorHandling } from "./shared";

export async function createOrganization(orgData, ownerId) {
	return withErrorHandling(async () => {
		const organization = await prisma.organization.create({
			data: {
				id: orgData.id,
				name: orgData.name,
				slug: orgData.slug,
				logo: orgData.logo_url,
				ownerId,
				members: {
					create: {
						userId: ownerId,
						organizationId: orgData.id,
						role: "OWNER",
						status: "active",
						joinedAt: new Date(),
						permissions: [
							"MANAGE_ORGANIZATION",
							"MANAGE_MEMBERS",
							"INVITE_MEMBERS",
							"MANAGE_ROLES",
						],
					},
				},
			},
		});

		logger.info(`Organization created: ${organization.id}`);
		return organization;
	});
}

export async function deleteOrganization(orgId) {
	return withErrorHandling(async () => {
		const deleted = await prisma.organization.delete({
			where: { id: orgId },
		});

		logger.info(`Organization deleted: ${orgId}`);
		return deleted;
	});
}

export async function updateOrganization(orgData) {
	return withErrorHandling(async () => {
		const organization = await prisma.organization.update({
			where: { id: orgData.id },
			data: {
				name: orgData.name,
				slug: orgData.slug,
				logo: orgData.logo_url,
				updatedAt: new Date(),
			},
		});

		logger.info(`Organization updated: ${organization.id}`);
		return organization;
	});
}

================
File: services/portfolio.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { defaultBasics } from "@/schema/sections/basics";
import { transformPortfolio } from "@/lib/utils";

const portfolioSelect = {
	id: true,
	name: true,
	slug: true,
	isLive: true,
	blogEnabled: true,
	customDomain: true,
	organizationId: true,
	template: true,
	basics: true,
	profiles: true,
	experiences: true,
	educations: true,
	skills: true,
	certifications: true,
	projects: true,
	hackathons: true,
	testimonials: true,
	teams: true,
};

export async function getAllPortfolios() {
	return withErrorHandling(async () => {
		const portfolios = await prisma.portfolio.findMany({
			where: { isLive: true },
			select: portfolioSelect,
		});

		return portfolios.length > 0 ? portfolios : [];
	});
}

export async function getPortfolios(userId, orgId = null) {
	return withErrorHandling(async () => {
		if (!userId) {
			throw new Error("User Id required");
		}

		const whereClause = {
			OR: [{ userId }],
		};

		// Add organization condition if orgId exists
		if (orgId) {
			whereClause.OR.push({ organizationId: orgId });
		}

		const portfolios = await prisma.portfolio.findMany({
			where: whereClause,
			select: portfolioSelect,
		});

		return portfolios.length > 0 ? portfolios : [];
	});
}

export async function createPortfolio(data) {
	return withErrorHandling(async () => {
		const { userId, orgId } = await auth();
		if (!userId) {
			throw new Error("Unauthorized");
		}

		const { portfolioId, ...basicsData } = defaultBasics;

		const portfolio = await prisma.portfolio.create({
			data: {
				...data,
				user: { connect: { id: userId } },
				...(orgId && {
					organization: {
						connect: { id: orgId },
					},
				}),
				basics: {
					create: {
						...basicsData,
					},
				},
			},
			select: portfolioSelect,
		});
		return transformPortfolio(portfolio);
	});
}

// Helper function to filter valid basics fields
const getValidBasicsUpdateFields = (basics) => {
	const validFields = [
		"name",
		"headline",
		"email",
		"phone",
		"location",
		"url",
		"picture",
		"summary",
		"about",
		"updatedAt",
	];

	return Object.keys(basics)
		.filter((key) => validFields.includes(key))
		.reduce((obj, key) => {
			obj[key] = basics[key];
			return obj;
		}, {});
};

export async function editPortfolio(id, data) {
	return withErrorHandling(async () => {
		const { userId, orgId } = await auth();
		if (!userId) {
			throw new Error("Unauthorized");
		}

		const whereClause = {
			id,
			OR: [{ userId }],
		};

		if (orgId) {
			whereClause.OR.push({ organizationId: orgId });
		}

		// Extract main portfolio fields and remove organizationId
		const { organizationId, id: portfolioId, ...portfolioData } = data;

		// Update the portfolio with only top-level fields
		const updatedPortfolio = await prisma.portfolio.update({
			where: whereClause,
			data: {
				...portfolioData,
				updatedAt: new Date(),
				// Update organization if organizationId is provided
				...(organizationId && {
					organization: {
						connect: { id: organizationId },
					},
				}),
			},
			select: portfolioSelect,
		});

		return transformPortfolio(updatedPortfolio);
	});
}

export async function deletePortfolio(id) {
	return withErrorHandling(async () => {
		const { userId, orgId } = await auth();
		if (!userId) {
			throw new Error(
				"Unauthorized: Must be logged in to delete a portfolio"
			);
		}

		const whereClause = {
			id,
			OR: [{ userId }],
		};

		if (orgId) {
			whereClause.OR.push({ organizationId: orgId });
		}

		const deletedPortfolio = await prisma.portfolio.delete({
			where: whereClause,
			select: portfolioSelect,
		});

		return deletedPortfolio;
	});
}

export async function getPortfolioBySlug(slug) {
	return withErrorHandling(async () => {
		const portfolio = await prisma.portfolio.findUnique({
			where: { slug },
			select: portfolioSelect,
		});
		return portfolio;
	});
}

export async function getPortfolio(domain) {
	return withErrorHandling(async () => {
		const portfolio = await prisma.portfolio.findFirst({
			where: {
				OR: [{ customDomain: domain }, { slug: domain }],
				isLive: true,
			},
			select: portfolioSelect,
		});

		return portfolio;
	});
}

================
File: services/profile.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { profileSchema } from "@/schema/sections";

const select = {
	id: true,
	visible: true,
	network: true,
	username: true,
	url: true,
	portfolioId: true,
	// Exclude createdAt and updatedAt
};

export async function getProfiles(portfolioId) {
	return withErrorHandling(async () => {
		const profiles = await prisma.profile.findMany({
			where: { portfolioId },
			select,
		});
		if (profiles.length > 0) {
			return profiles.map((item) => profileSchema.parse(item));
		}
		return [];
	});
}

export async function createProfile({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Create profile with additional metadata
		const profile = await prisma.profile.create({
			data: {
				...data,
				portfolio: { connect: { id: portfolioId } },
			},
			select,
		});

		revalidatePath("/builder");
		return profileSchema.parse(profile);
	});
}

export async function editProfile(profileId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const updatedProfile = await prisma.profile.update({
			where: { id: profileId, portfolioId },
			data: {
				...data,
				updatedAt: new Date(),
			},
			select,
		});

		revalidatePath("/builder");
		return profileSchema.parse(updatedProfile);
	});
}

export async function deleteProfile(profileId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error(
				"Unauthorized: Must be logged in to delete a profile"
			);
		}

		await prisma.profile.delete({
			where: { id: profileId, portfolioId },
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return { portfolioId, profileId };
	});
}

================
File: services/project.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { projectSchema } from "@/schema/sections";

const select = {
	id: true,
	visible: true,
	name: true,
	description: true,
	date: true,
	technologies: true,
	website: true,
	source: true,
	image: true,
	video: true,
	portfolioId: true,
};

export async function getProjects(portfolioId) {
	return withErrorHandling(async () => {
		const projects = await prisma.project.findMany({
			where: { portfolioId },
			select,
		});
		if (projects.length > 0) {
			return projects.map((item) => projectSchema.parse(item));
		}
		return [];
	});
}

export async function createProject({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId) {
			throw new Error("Unauthorized");
		}

		const project = await prisma.project.create({
			data: {
				...data,
				portfolio: { connect: { id: portfolioId } },
			},
			select,
		});

		revalidatePath("/builder");
		return projectSchema.parse(project);
	});
}

export async function editProject(projectId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const updatedProject = await prisma.project.update({
			where: { id: projectId, portfolioId },
			data: {
				...data,
				updatedAt: new Date(),
			},
			select,
		});

		revalidatePath("/builder");
		return projectSchema.parse(updatedProject);
	});
}

export async function deleteProject(projectId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error(
				"Unauthorized: You must be logged in to delete a project."
			);
		}

		await prisma.project.delete({
			where: { id: projectId, portfolioId },
		});

		revalidatePath("/builder");

		return { projectId, portfolioId };
	});
}

================
File: services/shared.js
================
"use server";
import { z } from "zod";
import { logger } from "@/lib/utils";

// Comprehensive error handling utility
export async function withErrorHandling(action) {
	try {
		logger.info("Entering withErrorHandling");

		// Add a check to ensure action is a function
		if (typeof action !== "function") {
			logger.error("withErrorHandling: action is not a function", action);
			throw new Error("Invalid action provided to withErrorHandling");
		}

		const result = await action();

		logger.info("withErrorHandling action completed successfully", result);

		return { success: true, data: result };
	} catch (error) {
		logger.error("withErrorHandling caught an error:", {
			errorName: error.name,
			errorMessage: error.message,
		});

		// Specific error type handling
		if (error instanceof z.ZodError) {
			return {
				success: false,
				error: error.errors
					.map((e) => `${e.path.join(".")}: ${e.message}`)
					.join("; "),
			};
		}

		if (error instanceof Error) {
			return {
				success: false,
				error: error.message,
			};
		}

		return {
			success: false,
			error: "An unexpected error occurred",
		};
	}
}

================
File: services/skill.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { skillSchema } from "@/schema/sections";

const select = {
	id: true,
	visible: true,
	name: true,
	description: true,
	portfolioId: true,
	// Exclude createdAt and updatedAt
};

export async function getSkills(portfolioId) {
	return withErrorHandling(async () => {
		const skills = await prisma.skill.findMany({
			where: { portfolioId },
			select,
		});
		if (skills.length > 0) {
			return skills.map((item) => skillSchema.parse(item));
		}
		return [];
	});
}

export async function createSkill({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Create skill with additional metadata
		const skill = await prisma.skill.create({
			data: {
				...data,
				portfolio: { connect: { id: portfolioId } },
			},
			select,
		});

		// Revalidate multiple potential paths
		revalidatePath("/builder");
		return skillSchema.parse(skill);
	});
}

export async function editSkill(skillId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const existingSkill = await prisma.skill.findUnique({
			where: { id: skillId, portfolioId },
		});

		if (!existingSkill) {
			throw new Error(
				"Skill not found or you do not have permission to update"
			);
		}

		const updatedSkill = await prisma.skill.update({
			where: { id: skillId },
			data: {
				...data,
				updatedAt: new Date(),
			},
			select,
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return skillSchema.parse(updatedSkill);
	});
}

export async function deleteSkill(skillId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error(
				"Unauthorized: Must be logged in to delete a skill"
			);
		}

		const existingSkill = await prisma.skill.findUnique({
			where: { id: skillId, portfolioId },
		});

		if (!existingSkill) {
			throw new Error(
				"Skill not found or you do not have permission to delete"
			);
		}

		await prisma.skill.delete({
			where: { id: skillId },
		});

		// Revalidate relevant paths
		revalidatePath("/builder");

		return { skillId, portfolioId };
	});
}

================
File: services/subscription.js
================
import { prisma } from "@/lib/db";
import { withErrorHandling } from "./shared";
import { auth } from "@clerk/nextjs/server";
import { logger } from "@/lib/utils";

export async function initializeSubscription({
	userId,
	orgId,
	portfolioLimit,
	type,
	frequency,
	priceId,
}) {
	return withErrorHandling(async () => {
		if (!userId || !type || !frequency || !priceId) {
			throw new Error(
				"Missing required fields for subscription initialization"
			);
		}

		const getEndDate = (frequency) => {
			const now = Date.now();
			switch (frequency.toUpperCase()) {
				case "WEEKLY":
					return new Date(now + 7 * 24 * 60 * 60 * 1000); // 7 days
				case "MONTHLY":
					return new Date(now + 30 * 24 * 60 * 60 * 1000); // 30 days
				case "YEARLY":
					return new Date(now + 365 * 24 * 60 * 60 * 1000); // 365 days
				default:
					throw new Error(`Invalid frequency: ${frequency}`);
			}
		};

		const subscription = await prisma.subscription.upsert({
			where: { userId },
			update: {
				organizationId: orgId || null,
				status: "pending",
				portfolioLimit,
				type,
				frequency,
				priceId,
				startDate: new Date(),
				endDate: getEndDate(frequency),
			},
			create: {
				userId,
				organizationId: orgId || null,
				status: "pending",
				portfolioLimit,
				type,
				frequency,
				priceId,
				startDate: new Date(),
				endDate: getEndDate(frequency),
			},
		});

		if (!subscription) {
			throw new Error("Failed to create subscription record");
		}

		return subscription;
	});
}

export async function createTransaction({
	userId,
	orgId,
	title,
	subscriptionId,
	amount,
	priceId,
}) {
	return withErrorHandling(async () => {
		logger.info("Creating transaction", {
			userId,
			orgId,
			subscriptionId,
			amount,
		});

		if (!userId && !orgId) {
			throw new Error("UserId or OrgId has to be provided");
		}

		const transaction = await prisma.transaction.create({
			data: {
				userId,
				organizationId: orgId || null,
				title,
				status: "pending",
				amount,
				subscriptionId,
				priceId,
			},
		});

		if (!transaction) {
			throw new Error("Failed to create transaction record");
		}

		logger.info("Transaction created successfully", {
			transactionId: transaction.id,
		});
		return transaction;
	});
}

export async function handlePaymentFailure({ transactionId }) {
	return withErrorHandling(async () => {
		logger.info("Processing failed payment", { transactionId });

		const result = await prisma.$transaction(async (prisma) => {
			const transaction = await prisma.transaction.update({
				where: { id: transactionId },
				data: { status: "cancelled" },
				include: { subscription: true },
			});

			if (transaction.subscription) {
				await prisma.subscription.update({
					where: { id: transaction.subscription.id },
					data: { status: "cancelled" },
				});
			}

			return transaction;
		});

		if (!result) {
			throw new Error("Failed process failed payment");
		}

		logger.info("Failed payment processed successfully", {
			transactionId: result.id,
		});
		return result;
	});
}

export async function handlePaymentSuccess({ transactionId }) {
	return withErrorHandling(async () => {
		logger.info("Processing successful payment", { transactionId });

		const result = await prisma.$transaction(async (prisma) => {
			const updatedTransaction = await prisma.transaction.update({
				where: { id: transactionId, status: { not: "cancelled" } },
				data: { status: "completed" },
				include: { subscription: true },
			});

			if (updatedTransaction.subscription) {
				await prisma.subscription.update({
					where: { id: updatedTransaction.subscription.id },
					data: { status: "active" },
				});
			}

			return updatedTransaction;
		});

		logger.info("Payment processed successfully", { transactionId });
		return result;
	});
}

export async function updateTransaction({ tx_ref, status }) {
	return withErrorHandling(async () => {
		// Get the authenticated user
		if (!tx_ref || !status) {
			throw new Error("Missing required parameter");
		}

		// Create skill with additional metadata
		const trxn = await prisma.transaction.update({
			where: { id: tx_ref },
			data: {
				status,
				updatedAt: new Date(),
			},
			include: {
				user: {
					select: {
						id: true,
					},
				},
			},
		});

		// Revalidate multiple potential paths
		return trxn;
	});
}

export async function updateSubscription() {
	return withErrorHandling(async () => {
		const { userId } = auth();

		if (!userId) {
			throw new Error("Unauthorized");
		}

		// Create skill with additional metadata
		const user = await prisma.user.update({
			where: { userId },
			data: {
				subscribed: true,
				updatedAt: new Date(),
			},
		});

		return user;
	});
}

================
File: services/team.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { teamSchema } from "@/schema/sections";

const teamSelect = {
	id: true,
	visible: true,
	name: true,
	role: true,
	bio: true,
	avatar: true,
	links: {
		select: { id: true, label: true, url: true, icon: true },
	},
	portfolioId: true,
};

export async function getTeamMembers(portfolioId) {
	return withErrorHandling(async () => {
		const members = await prisma.team.findMany({
			where: { portfolioId },
			select: teamSelect,
		});
		return members.map((item) => teamSchema.parse(item));
	});
}

export async function createTeamMember({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Destructure links from the data and exclude it from the team member data
		const { links, ...teamData } = data;

		// Create the team member with nested links
		const member = await prisma.team.create({
			data: {
				...teamData,
				portfolio: { connect: { id: portfolioId } },
				links: {
					create: links.map((link) => ({
						id: link.id,
						label: link.label,
						url: link.url,
						icon: link.icon || null,
					})),
				},
			},
			select: teamSelect,
		});

		revalidatePath("/builder");
		return teamSchema.parse(member);
	});
}

export async function editTeamMember(teamId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		// Destructure links from the data and validate them
		const { links, ...teamData } = data;

		// Perform the update, including nested operations for links
		const updatedMember = await prisma.team.update({
			where: { id: teamId, portfolioId },
			data: {
				...teamData,
				updatedAt: new Date(),
				links: {
					// Handle nested updates for links
					upsert: links.map((link) => ({
						where: { id: link.id || "" },
						create: {
							label: link.label,
							url: link.url,
							icon: link.icon || null,
						},
						update: {
							label: link.label,
							url: link.url,
							icon: link.icon || null,
						},
					})),
					// Remove links not included in the updated data
					deleteMany: {
						id: { notIn: links.map((link) => link.id) },
					},
				},
			},
			select: teamSelect,
		});

		revalidatePath("/builder");
		return teamSchema.parse(updatedMember);
	});
}

export async function deleteTeamMember(teamId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		await prisma.team.delete({
			where: { id: teamId, portfolioId },
		});

		revalidatePath("/builder");
		return { teamId, portfolioId };
	});
}

================
File: services/testimonial.js
================
"use server";

import { prisma } from "@/lib/db";
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { testimonialSchema } from "@/schema/sections";

const testimonialSelect = {
	id: true,
	visible: true,
	name: true,
	role: true,
	company: true,
	message: true,
	avatar: true,
	rating: true,
	portfolioId: true,
};

export async function getTestimonials(portfolioId) {
	return withErrorHandling(async () => {
		const testimonials = await prisma.testimonial.findMany({
			where: { portfolioId },
			select: testimonialSelect,
		});
		return testimonials.map((item) => testimonialSchema.parse(item));
	});
}

export async function createTestimonial({ portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const testimonial = await prisma.testimonial.create({
			data: {
				...data,
				portfolio: { connect: { id: portfolioId } },
			},
			select: testimonialSelect,
		});

		revalidatePath("/builder");
		return testimonialSchema.parse(testimonial);
	});
}

export async function editTestimonial(testimonialId, { portfolioId, ...data }) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		const testimonial = await prisma.testimonial.update({
			where: { id: testimonialId, portfolioId },
			data: {
				...data,
				updatedAt: new Date(),
			},
			select: testimonialSelect,
		});

		revalidatePath("/builder");
		return testimonialSchema.parse(testimonial);
	});
}

export async function deleteTestimonial(testimonialId, portfolioId) {
	return withErrorHandling(async () => {
		const { userId } = await auth();
		if (!userId || !portfolioId) {
			throw new Error("Unauthorized");
		}

		await prisma.testimonial.delete({
			where: { id: testimonialId, portfolioId },
		});

		revalidatePath("/builder");
		return { testimonialId, portfolioId };
	});
}

================
File: services/user.js
================
"use server";

import { prisma } from "@/lib/db"; // Assume this is your database connection
import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";
import { withErrorHandling } from "./shared";
import { userSchema } from "@/schema/user";

const userSelect = {
	id: true,
	email: true,
	subscribed: true,
	userType: true,
	createdAt: true,
	updatedAt: true,
	subscription: {
		select: {
			id: true,
			type: true,
			frequency: true,
			status: true,
			priceId: true,
			startDate: true,
			endDate: true,
		},
	},
};

export async function getUserByEmail(email) {
	return withErrorHandling(async () => {
		const user = await prisma.user.findUnique({
			where: { email },
			select: userSelect,
		});
		return userSchema.parse(user);
	});
}

export async function getUsers() {
	return withErrorHandling(async () => {
		const users = await prisma.user.findMany({
			select: {
				id: true,
				email: true,
				subscribed: true,
				createdAt: true,
				updatedAt: true,
			},
		});
		return users.map((user) => userSchema.parse(user));
	});
}

export async function getUser(userId) {
	return withErrorHandling(async () => {
		const user = await prisma.user.findUnique({
			where: { id: userId },
			select: userSelect,
		});
		return userSchema.parse(user);
	});
}

export async function createUser(userId, email) {
	return withErrorHandling(async () => {
		const user = await prisma.user.create({
			data: {
				id: userId,
				email,
			},
		});
		return userSchema.parse(user);
	});
}

export async function updateUser(data) {
	return withErrorHandling(async () => {
		if (!data.id) {
			throw new Error("Unauthorized");
		}

		// Update user in database
		const updatedUser = await prisma.user.update({
			where: { id: data.id },
			data: {
				...data,
				updatedAt: new Date(), // Ensure updated timestamp is set
			},
			select: userSelect,
		});

		// Revalidate the path to update cached data
		revalidatePath("/builder");

		return userSchema.parse(updatedUser);
	});
}

export async function deleteUser(userId) {
	return withErrorHandling(async () => {
		const user = await prisma.user.delete({
			data: {
				id: userId,
			},
		});
		return { userId };
	});
}

================
File: services/webhooks.js
================
import { handlePaymentSuccess } from "./subscription";
import { prisma } from "@/lib/db";
import { logger } from "@/lib/utils";

export async function handleChargeWebhook(data) {
	const { tx_ref, status, customer } = data;
	logger.info(`Processing charge webhook for transaction ${tx_ref}`, {
		status,
		customer,
	});

	try {
		logger.info(`Finding transaction ${tx_ref}`);
		// Find the transaction and associated subscription
		const transaction = await prisma.transaction.findUnique({
			where: { id: tx_ref },
			include: {
				subscription: true,
				user: true,
				subscriptionId: true,
			},
		});

		if (!transaction) {
			logger.error(`Transaction ${tx_ref} not found`);
			throw new Error(`Transaction ${tx_ref} not found`);
		}

		if (status === "successful") {
			logger.info(`Starting successful payment flow for ${tx_ref}`);
			// Use a transaction to update all related records
			await prisma.$transaction(async (prisma) => {
				logger.info(`Updating transaction status to completed`);
				// Update transaction status
				await prisma.transaction.update({
					where: { id: tx_ref },
					data: { status: "completed" },
				});

				// Update subscription status
				if (transaction.subscriptionId) {
					logger.info(
						`Updating subscription ${transaction.subscriptionId}`
					);
					await prisma.subscription.update({
						where: { id: transaction.subscriptionId },
						data: {
							status: "active",
							startDate: new Date(),
							endDate: getSubscriptionEndDate(
								data.meta.frequency
							),
							updatedAt: new Date(),
						},
					});

					logger.info(`Updating subscription plan status`);
					// Update subscription plan status
					await prisma.subscriptionPlan.update({
						where: { id: transaction.subscription.planId },
						data: { isActive: true },
					});
				}

				logger.info(
					`Updating user ${transaction.userId} subscription status`
				);
				// Update user subscription status
				await prisma.user.update({
					where: { id: transaction.userId },
					data: {
						subscribed: true,
						userType: data.meta.type,
					},
				});
			});

			logger.info(
				`Payment successful and subscription activated for transaction ${tx_ref}`
			);
		} else {
			logger.warn(`Starting failed payment flow for ${tx_ref}`);
			// Handle failed payment
			await prisma.$transaction(async (prisma) => {
				// Update transaction status
				await prisma.transaction.update({
					where: { id: tx_ref },
					data: { status: "failed" },
				});

				// Cancel subscription if it exists
				if (transaction.subscriptionId) {
					await prisma.subscription.update({
						where: { id: transaction.subscriptionId },
						data: {
							status: "cancelled",
							updatedAt: new Date(),
						},
					});
				}
			});

			logger.warn(`Payment failed for transaction ${tx_ref}`);
		}
	} catch (error) {
		logger.error(`Webhook processing error for ${tx_ref}:`, error);
		throw error;
	}
}

function getSubscriptionEndDate(frequency) {
	const now = new Date();
	switch (frequency.toLowerCase()) {
		case "weekly":
			return new Date(now.setDate(now.getDate() + 7));
		case "monthly":
			return new Date(now.setMonth(now.getMonth() + 1));
		case "yearly":
			return new Date(now.setFullYear(now.getFullYear() + 1));
		default:
			return new Date(now.setMonth(now.getMonth() + 1)); // Default to monthly
	}
}

export async function handleSubscriptionCancelled(data) {
	const { customer, plan } = data;

	try {
		// Find subscription by customer email
		const subscription = await prisma.subscription.findFirst({
			where: {
				user: {
					email: customer.email,
				},
				status: "active",
			},
		});

		if (!subscription) {
			logger.warn(`No active subscription found for ${customer.email}`);
			return;
		}

		// Update subscription status
		await prisma.subscription.update({
			where: { id: subscription.id },
			data: {
				status: "cancelled",
				endDate: new Date(),
				updatedAt: new Date(),
			},
		});

		logger.info(`Subscription cancelled for ${customer.email}`);
	} catch (error) {
		logger.error("Error handling subscription cancellation:", error);
		throw error;
	}
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{js,ts,jsx,tsx,mdx}",
		"./components/**/*.{js,ts,jsx,tsx,mdx}",
		"./app/**/*.{js,ts,jsx,tsx,mdx}",
	],
	theme: {
		container: {
			center: true,
			padding: "2rem",
			screens: {
				"2xl": "1400px",
			},
		},
		extend: {
			colors: {
				background: "hsl(var(--background))",
				foreground: "hsl(var(--foreground))",
				card: {
					DEFAULT: "hsl(var(--card))",
					foreground: "hsl(var(--card-foreground))",
				},
				popover: {
					DEFAULT: "hsl(var(--popover))",
					foreground: "hsl(var(--popover-foreground))",
				},
				primary: {
					DEFAULT: "hsl(var(--primary))",
					foreground: "hsl(var(--primary-foreground))",
				},
				secondary: {
					DEFAULT: "hsl(var(--secondary))",
					foreground: "hsl(var(--secondary-foreground))",
				},
				muted: {
					DEFAULT: "hsl(var(--muted))",
					foreground: "hsl(var(--muted-foreground))",
				},
				accent: {
					DEFAULT: "hsl(var(--accent))",
					foreground: "hsl(var(--accent-foreground))",
				},
				destructive: {
					DEFAULT: "hsl(var(--destructive))",
					foreground: "hsl(var(--destructive-foreground))",
				},
				border: "hsl(var(--border))",
				input: "hsl(var(--input))",
				ring: "hsl(var(--ring))",
				chart: {
					1: "hsl(var(--chart-1))",
					2: "hsl(var(--chart-2))",
					3: "hsl(var(--chart-3))",
					4: "hsl(var(--chart-4))",
					5: "hsl(var(--chart-5))",
				},
				sidebar: {
					DEFAULT: "hsl(var(--sidebar-background))",
					foreground: "hsl(var(--sidebar-foreground))",
					primary: "hsl(var(--sidebar-primary))",
					"primary-foreground":
						"hsl(var(--sidebar-primary-foreground))",
					accent: "hsl(var(--sidebar-accent))",
					"accent-foreground":
						"hsl(var(--sidebar-accent-foreground))",
					border: "hsl(var(--sidebar-border))",
					ring: "hsl(var(--sidebar-ring))",
				},
				"color-1": "hsl(var(--color-1))",
				"color-2": "hsl(var(--color-2))",
				"color-3": "hsl(var(--color-3))",
				"color-4": "hsl(var(--color-4))",
				"color-5": "hsl(var(--color-5))",
			},
			borderRadius: {
				lg: "var(--radius)",
				md: "calc(var(--radius) - 2px)",
				sm: "calc(var(--radius) - 4px)",
			},
			keyframes: {
				"accordion-down": {
					from: {
						height: "0",
					},
					to: {
						height: "var(--radix-accordion-content-height)",
					},
				},
				"accordion-up": {
					from: {
						height: "var(--radix-accordion-content-height)",
					},
					to: {
						height: "0",
					},
				},
				rainbow: {
					"0%": {
						"background-position": "0%",
					},
					"100%": {
						"background-position": "200%",
					},
				},
			},
			animation: {
				"accordion-down": "accordion-down 0.2s ease-out",
				"accordion-up": "accordion-up 0.2s ease-out",
				rainbow: "rainbow var(--speed, 2s) infinite linear",
			},
		},
	},
	plugins: [
		require("tailwindcss-animate"),
		require("tailwind-scrollbar-hide"),
		require("@tailwindcss/typography"),
	],
};

================
File: utils/constants.js
================
export const TITLE_TAILWIND_CLASS =
	"text-2xl sm:text-2xl md:text-3xl lg:text-4xl";

export const PORTFOLIO_TAILWIND_CLASS = "max-w-2xl mx-auto px-6";
export const socialNetworks = [
	{ value: "github", label: `GitHub` },
	{ value: "linkedin", label: `LinkedIn` },
	{ value: "x", label: `X` },
	{ value: "youtube", label: `Youtube` },
];

export const defaultTiltProps = {
	scale: 1.05,
	tiltMaxAngleX: 8,
	tiltMaxAngleY: 8,
	perspective: 1400,
	glareEnable: true,
	glareMaxOpacity: 0.1,
	glareColor: "#fafafa",
};

export const CONTAINER_CLASS = "w-full mx-auto px-4 sm:px-6 lg:px-8 max-w-6xl";
export const CONTENT_CLASS = "max-w-4xl mx-auto";
export const SECTION_SPACING = "space-y-6 md:space-y-8 lg:space-y-10";
export const MOBILE_PADDING = "px-2 sm:px-6 lg:px-8";

================
File: utils/resume.jsx
================
import { Icons } from "@/components/icons";
import { HomeIcon, NotebookIcon } from "lucide-react";

export const DATA = {
	name: "Dillion Verma",
	initials: "DV",
	url: "https://dillion.io",
	location: "San Francisco, CA",
	locationLink: "https://www.google.com/maps/place/sanfrancisco",
	description:
		"Software Engineer turned Entrepreneur. I love building things and helping people. Very active on Twitter.",
	summary:
		"At the end of 2022, I quit my job as a software engineer to go fulltime into building and scaling my own SaaS businesses. In the past, [I pursued a double degree in computer science and business](/#education), [interned at big tech companies in Silicon Valley](https://www.youtube.com/watch?v=d-LJ2e5qKdE), and [competed in over 21 hackathons for fun](/#hackathons). I also had the pleasure of being a part of the first ever in-person cohort of buildspace called [buildspace sf1](https://buildspace.so/sf1).",
	avatarUrl: "/me.png",
	skills: [
		"React",
		"Next.js",
		"Typescript",
		"Node.js",
		"Python",
		"Go",
		"Postgres",
		"Docker",
		"Kubernetes",
		"Java",
		"C++",
	],
	navbar: [
		{ href: "/", icon: HomeIcon, label: "Home" },
		{ href: "/blog", icon: NotebookIcon, label: "Blog" },
	],
	contact: {
		email: "hello@example.com",
		tel: "+123456789",
		social: {
			GitHub: {
				name: "GitHub",
				url: "https://dub.sh/dillion-github",
				icon: Icons.github,

				navbar: true,
			},
			LinkedIn: {
				name: "LinkedIn",
				url: "https://dub.sh/dillion-linkedin",
				icon: Icons.linkedin,

				navbar: true,
			},
			X: {
				name: "X",
				url: "https://dub.sh/dillion-twitter",
				icon: Icons.x,

				navbar: true,
			},
			Youtube: {
				name: "Youtube",
				url: "https://dub.sh/dillion-youtube",
				icon: Icons.youtube,
				navbar: true,
			},
			email: {
				name: "Send Email",
				url: "#",
				icon: Icons.email,

				navbar: false,
			},
		},
	},

	work: [
		{
			company: "Atomic Finance",
			href: "https://atomic.finance",
			badges: [],
			location: "Remote",
			title: "Bitcoin Protocol Engineer",
			logoUrl: "/atomic.png",
			start: "May 2021",
			end: "Oct 2022",
			description:
				"Implemented the Bitcoin discreet log contract (DLC) protocol specifications as an open source Typescript SDK. Dockerized all microservices and setup production kubernetes cluster. Architected a data lake using AWS S3 and Athena for historical backtesting of bitcoin trading strategies. Built a mobile app using react native and typescript.",
		},
		{
			company: "Shopify",
			badges: [],
			href: "https://shopify.com",
			location: "Remote",
			title: "Software Engineer",
			logoUrl: "/shopify.svg",
			start: "January 2021",
			end: "April 2021",
			description:
				"Implemented a custom Kubernetes controller in Go to automate the deployment of MySQL and ProxySQL custom resources in order to enable 2,000+ internal developers to instantly deploy their app databases to production. Wrote several scripts in Go to automate MySQL database failovers while maintaining master-slave replication topologies and keeping Zookeeper nodes consistent with changes.",
		},
		{
			company: "Nvidia",
			href: "https://nvidia.com/",
			badges: [],
			location: "Santa Clara, CA",
			title: "Software Engineer",
			logoUrl: "/nvidia.png",
			start: "January 2020",
			end: "April 2020",
			description:
				"Architected and wrote the entire MVP of the GeForce Now Cloud Gaming internal admin and A/B testing dashboard using React, Redux, TypeScript, and Python.",
		},
		{
			company: "Splunk",
			href: "https://splunk.com",
			badges: [],
			location: "San Jose, CA",
			title: "Software Engineer",
			logoUrl: "/splunk.svg",
			start: "January 2019",
			end: "April 2019",
			description:
				"Co-developed a prototype iOS app with another intern in Swift for the new Splunk Phantom security orchestration product (later publicly demoed and launched at .conf annual conference in Las Vegas). Implemented a realtime service for the iOS app in Django (Python) and C++; serialized data using protobufs transmitted over gRPC resulting in an approximate 500% increase in data throughput.",
		},
		{
			company: "Lime",
			href: "https://li.me/",
			badges: [],
			location: "San Francisco, CA",
			title: "Software Engineer",
			logoUrl: "/lime.svg",
			start: "January 2018",
			end: "April 2018",
			description:
				"Proposed and implemented an internal ruby API for sending/receiving commands to scooters over LTE networks. Developed a fully automated bike firmware update system to handle asynchronous firmware updates of over 100,000+ scooters worldwide, and provide progress reports in real-time using React, Ruby on Rails, PostgreSQL and AWS EC2 saving hundreds of developer hours.",
		},
		{
			company: "Mitre Media",
			href: "https://mitremedia.com/",
			badges: [],
			location: "Toronto, ON",
			title: "Software Engineer",
			logoUrl: "/mitremedia.png",
			start: "May 2017",
			end: "August 2017",
			description:
				"Designed and implemented a robust password encryption and browser cookie storage system in Ruby on Rails. Leveraged the Yahoo finance API to develop the dividend.com equity screener",
		},
	],
	education: [
		{
			school: "Buildspace",
			href: "https://buildspace.so",
			degree: "s3, s4, sf1, s5",
			logoUrl: "/buildspace.jpg",
			start: "2023",
			end: "2024",
		},
		{
			school: "University of Waterloo",
			href: "https://uwaterloo.ca",
			degree: "Bachelor's Degree of Computer Science (BCS)",
			logoUrl: "/waterloo.png",
			start: "2016",
			end: "2021",
		},
		{
			school: "Wilfrid Laurier University",
			href: "https://wlu.ca",
			degree: "Bachelor's Degree of Business Administration (BBA)",
			logoUrl: "/laurier.png",
			start: "2016",
			end: "2021",
		},
		{
			school: "International Baccalaureate",
			href: "https://ibo.org",
			degree: "IB Diploma",
			logoUrl: "/ib.png",
			start: "2012",
			end: "2016",
		},
	],
	projects: [
		{
			title: "Chat Collect",
			href: "https://chatcollect.com",
			dates: "Jan 2024 - Feb 2024",
			active: true,
			description:
				"With the release of the [OpenAI GPT Store](https://openai.com/blog/introducing-the-gpt-store), I decided to build a SaaS which allows users to collect email addresses from their GPT users. This is a great way to build an audience and monetize your GPT API usage.",
			technologies: [
				"Next.js",
				"Typescript",
				"PostgreSQL",
				"Prisma",
				"TailwindCSS",
				"Stripe",
				"Shadcn UI",
				"Magic UI",
			],
			links: [
				{
					type: "Website",
					href: "https://chatcollect.com",
					icon: <Icons.globe className="size-3" />,
				},
			],
			image: "",
			video: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/chat-collect.mp4",
		},
		{
			title: "Magic UI",
			href: "https://magicui.design",
			dates: "June 2023 - Present",
			active: true,
			description:
				"Designed, developed and sold animated UI components for developers.",
			technologies: [
				"Next.js",
				"Typescript",
				"PostgreSQL",
				"Prisma",
				"TailwindCSS",
				"Stripe",
				"Shadcn UI",
				"Magic UI",
			],
			links: [
				{
					type: "Website",
					href: "https://magicui.design",
					icon: <Icons.globe className="size-3" />,
				},
				{
					type: "Source",
					href: "https://github.com/magicuidesign/magicui",
					icon: <Icons.github className="size-3" />,
				},
			],
			image: "",
			video: "https://cdn.magicui.design/bento-grid.mp4",
		},
		{
			title: "llm.report",
			href: "https://llm.report",
			dates: "April 2023 - September 2023",
			active: true,
			description:
				"Developed an open-source logging and analytics platform for OpenAI: Log your ChatGPT API requests, analyze costs, and improve your prompts.",
			technologies: [
				"Next.js",
				"Typescript",
				"PostgreSQL",
				"Prisma",
				"TailwindCSS",
				"Shadcn UI",
				"Magic UI",
				"Stripe",
				"Cloudflare Workers",
			],
			links: [
				{
					type: "Website",
					href: "https://llm.report",
					icon: <Icons.globe className="size-3" />,
				},
				{
					type: "Source",
					href: "https://github.com/dillionverma/llm.report",
					icon: <Icons.github className="size-3" />,
				},
			],
			image: "",
			video: "https://cdn.llm.report/openai-demo.mp4",
		},
		{
			title: "Automatic Chat",
			href: "https://automatic.chat",
			dates: "April 2023 - March 2024",
			active: true,
			description:
				"Developed an AI Customer Support Chatbot which automatically responds to customer support tickets using the latest GPT models.",
			technologies: [
				"Next.js",
				"Typescript",
				"PostgreSQL",
				"Prisma",
				"TailwindCSS",
				"Shadcn UI",
				"Magic UI",
				"Stripe",
				"Cloudflare Workers",
			],
			links: [
				{
					type: "Website",
					href: "https://automatic.chat",
					icon: <Icons.globe className="size-3" />,
				},
			],
			image: "",
			video: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/automatic-chat.mp4",
		},
	],
	hackathons: [
		{
			title: "Hack Western 5",
			dates: "November 23rd - 25th, 2018",
			location: "London, Ontario",
			description:
				"Developed a mobile application which delivered bedtime stories to children using augmented reality.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/hack-western.png",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2019/mlh-trust-badge-2019-white.svg",
			links: [],
		},
		{
			title: "Hack The North",
			dates: "September 14th - 16th, 2018",
			location: "Waterloo, Ontario",
			description:
				"Developed a mobile application which delivers university campus wide events in real time to all students.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/hack-the-north.png",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2019/mlh-trust-badge-2019-white.svg",
			links: [],
		},
		{
			title: "FirstNet Public Safety Hackathon",
			dates: "March 23rd - 24th, 2018",
			location: "San Francisco, California",
			description:
				"Developed a mobile application which communcicates a victims medical data from inside an ambulance to doctors at hospital.",
			icon: "public",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/firstnet.png",
			links: [],
		},
		{
			title: "DeveloperWeek Hackathon",
			dates: "February 3rd - 4th, 2018",
			location: "San Francisco, California",
			description:
				"Developed a web application which aggregates social media data regarding cryptocurrencies and predicts future prices.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/developer-week.jpg",
			links: [
				{
					title: "Github",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/cryptotrends/cryptotrends",
				},
			],
		},
		{
			title: "HackDavis",
			dates: "January 20th - 21st, 2018",
			location: "Davis, California",
			description:
				"Developed a mobile application which allocates a daily carbon emission allowance to users to move towards a sustainable environment.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/hack-davis.png",
			win: "Best Data Hack",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2018/white.svg",
			links: [
				{
					title: "Devpost",
					icon: <Icons.globe className="h-4 w-4" />,
					href: "https://devpost.com/software/my6footprint",
				},
				{
					title: "ML",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/Wallet6/my6footprint-machine-learning",
				},
				{
					title: "iOS",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/Wallet6/CarbonWallet",
				},
				{
					title: "Server",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/Wallet6/wallet6-server",
				},
			],
		},
		{
			title: "ETH Waterloo",
			dates: "October 13th - 15th, 2017",
			location: "Waterloo, Ontario",
			description:
				"Developed a blockchain application for doctors and pharmacists to perform trustless transactions and prevent overdosage in patients.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/eth-waterloo.png",
			links: [
				{
					title: "Organization",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/ethdocnet",
				},
			],
		},
		{
			title: "Hack The North",
			dates: "September 15th - 17th, 2017",
			location: "Waterloo, Ontario",
			description:
				"Developed a virtual reality application allowing users to see themselves in third person.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/hack-the-north.png",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2017/white.svg",
			links: [
				{
					title: "Streamer Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/justinmichaud/htn2017",
				},
				{
					title: "Client Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/RTSPClient",
				},
			],
		},
		{
			title: "Hack The 6ix",
			dates: "August 26th - 27th, 2017",
			location: "Toronto, Ontario",
			description:
				"Developed an open platform for people shipping items to same place to combine shipping costs and save money.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/hack-the-6ix.jpg",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2017/white.svg",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/ShareShip/ShareShip",
				},
				{
					title: "Site",
					icon: <Icons.globe className="h-4 w-4" />,
					href: "https://share-ship.herokuapp.com/",
				},
			],
		},
		{
			title: "Stupid Hack Toronto",
			dates: "July 23rd, 2017",
			location: "Toronto, Ontario",
			description:
				"Developed a chrome extension which tracks which facebook profiles you have visited and immediately texts your girlfriend if you visited another girls page.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/stupid-hackathon.png",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/nsagirlfriend/nsagirlfriend",
				},
			],
		},
		{
			title: "Global AI Hackathon - Toronto",
			dates: "June 23rd - 25th, 2017",
			location: "Toronto, Ontario",
			description:
				"Developed a python library which can be imported to any python game and change difficulty of the game based on real time emotion of player. Uses OpenCV and webcam for facial recognition, and a custom Machine Learning Model trained on a [Kaggle Emotion Dataset](https://www.kaggle.com/c/challenges-in-representation-learning-facial-expression-recognition-challenge/leaderboard) using [Tensorflow](https://www.tensorflow.org/Tensorflow) and [Keras](https://keras.io/). This project recieved 1st place prize at the Global AI Hackathon - Toronto and was also invited to demo at [NextAI Canada](https://www.nextcanada.com/next-ai).",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/global-ai-hackathon.jpg",
			win: "1st Place Winner",
			links: [
				{
					title: "Article",
					icon: <Icons.globe className="h-4 w-4" />,
					href: "https://syncedreview.com/2017/06/26/global-ai-hackathon-in-toronto/",
				},
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/TinySamosas/",
				},
			],
		},
		{
			title: "McGill AI for Social Innovation Hackathon",
			dates: "June 17th - 18th, 2017",
			location: "Montreal, Quebec",
			description:
				"Developed realtime facial microexpression analyzer using AI",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/ai-for-social-good.jpg",
			links: [],
		},
		{
			title: "Open Source Circular Economy Days Hackathon",
			dates: "June 10th, 2017",
			location: "Toronto, Ontario",
			description:
				"Developed a custom admin interface for food waste startup <a href='http://genecis.co/'>Genecis</a> to manage their data and provide analytics.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/open-source-circular-economy-days.jpg",
			win: "1st Place Winner",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/genecis",
				},
			],
		},
		{
			title: "Make School's Student App Competition 2017",
			dates: "May 19th - 21st, 2017",
			location: "International",
			description:
				"Improved PocketDoc and submitted to online competition",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/make-school-hackathon.png",
			win: "Top 10 Finalist | Honourable Mention",
			links: [
				{
					title: "Medium Article",
					icon: <Icons.globe className="h-4 w-4" />,
					href: "https://medium.com/make-school/the-winners-of-make-schools-student-app-competition-2017-a6b0e72f190a",
				},
				{
					title: "Devpost",
					icon: <Icons.globe className="h-4 w-4" />,
					href: "https://devpost.com/software/pocketdoc-react-native",
				},
				{
					title: "YouTube",
					icon: <Icons.youtube className="h-4 w-4" />,
					href: "https://www.youtube.com/watch?v=XwFdn5Rmx68",
				},
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/pocketdoc-react-native",
				},
			],
		},
		{
			title: "HackMining",
			dates: "May 12th - 14th, 2017",
			location: "Toronto, Ontario",
			description:
				"Developed neural network to optimize a mining process",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/hack-mining.png",
			links: [],
		},
		{
			title: "Waterloo Equithon",
			dates: "May 5th - 7th, 2017",
			location: "Waterloo, Ontario",
			description:
				"Developed Pocketdoc, an app in which you take a picture of a physical wound, and the app returns common solutions or cures to the injuries or diseases.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/waterloo-equithon.png",
			links: [
				{
					title: "Devpost",
					icon: <Icons.globe className="h-4 w-4" />,
					href: "https://devpost.com/software/pocketdoc-react-native",
				},
				{
					title: "YouTube",
					icon: <Icons.youtube className="h-4 w-4" />,
					href: "https://www.youtube.com/watch?v=XwFdn5Rmx68",
				},
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/pocketdoc-react-native",
				},
			],
		},
		{
			title: "SpaceApps Waterloo",
			dates: "April 28th - 30th, 2017",
			location: "Waterloo, Ontario",
			description:
				"Developed Earthwatch, a web application which allows users in a plane to virtually see important points of interest about the world below them. They can even choose to fly away from their route and then fly back if they choose. Special thanks to CesiumJS for providing open source world and plane models.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/space-apps.png",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/earthwatch",
				},
			],
		},
		{
			title: "MHacks 9",
			dates: "March 24th - 26th, 2017",
			location: "Ann Arbor, Michigan",
			description:
				"Developed Super Graphic Air Traffic, a VR website made to introduce people to the world of air traffic controlling. This project was built completely using THREE.js as well as a node backend server.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/mhacks-9.png",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2017/white.svg",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/threejs-planes",
				},
			],
		},
		{
			title: "StartHacks I",
			dates: "March 4th - 5th, 2017",
			location: "Waterloo, Ontario",
			description:
				"Developed at StartHacks 2017, Recipic is a mobile app which allows you to take pictures of ingredients around your house, and it will recognize those ingredients using ClarifAI image recognition API and return possible recipes to make. Recipic recieved 1st place at the hackathon for best pitch and hack.",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/starthacks.png",
			win: "1st Place Winner",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2017/white.svg",
			links: [
				{
					title: "Source (Mobile)",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/mattBlackDesign/recipic-ionic",
				},
				{
					title: "Source (Server)",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/mattBlackDesign/recipic-rails",
				},
			],
		},
		{
			title: "QHacks II",
			dates: "February 3rd - 5th, 2017",
			location: "Kingston, Ontario",
			description:
				"Developed a mobile game which enables city-wide manhunt with random lobbies",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/qhacks.png",
			mlh: "https://s3.amazonaws.com/logged-assets/trust-badge/2017/white.svg",
			links: [
				{
					title: "Source (Mobile)",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/dillionverma/human-huntr-react-native",
				},
				{
					title: "Source (API)",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/mattBlackDesign/human-huntr-rails",
				},
			],
		},
		{
			title: "Terrible Hacks V",
			dates: "November 26th, 2016",
			location: "Waterloo, Ontario",
			description:
				"Developed a mock of Windows 11 with interesting notifications and functionality",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/terrible-hacks-v.png",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/justinmichaud/TerribleHacks2016-Windows11",
				},
			],
		},
		{
			title: "Portal Hackathon",
			dates: "October 29, 2016",
			location: "Kingston, Ontario",
			description:
				"Developed an internal widget for uploading assignments using Waterloo's portal app",
			image: "https://pub-83c5db439b40468498f97946200806f7.r2.dev/hackline/portal-hackathon.png",
			links: [
				{
					title: "Source",
					icon: <Icons.github className="h-4 w-4" />,
					href: "https://github.com/UWPortalSDK/crowmark",
				},
			],
		},
	],
};

================
File: utils/subscription-plans.js
================
export const SUBSCRIPTION_PLANS = {
	INDIVIDUAL: {
		weekly: {
			price: 3,
			priceId: process.env.NEXT_PUBLIC_WEEKLY_INDIVIDUAL_PRICE_ID,
			interval: "week",
			features: [
				"Template options",
				"Custom domain support",
				"Project showcase",
				"Skills visualization",
				"Built-in blog",
				"contact form",
			],
			portfolioLimit: 1,
		},
		monthly: {
			price: 10,
			priceId: process.env.NEXT_PUBLIC_MONTHLY_INDIVIDUAL_PRICE_ID,
			interval: "month",
			features: [
				"Template options",
				"Custom domain support",
				"Project showcase",
				"Skills visualization",
				"Built-in blog",
				"contact form",
			],
			portfolioLimit: 1,
		},
		yearly: {
			price: 96,
			priceId: process.env.NEXT_PUBLIC_YEARLY_INDIVIDUAL_PRICE_ID,
			interval: "year",
			features: [
				"Template options",
				"Custom domain support",
				"Project showcase",
				"Skills visualization",
				"Built-in blog",
				"contact form",
			],
			portfolioLimit: 1,
		},
	},
	TEAM: {
		monthly: {
			price: 25,
			priceId: process.env.NEXT_PUBLIC_MONTHLY_TEAM_PRICE_ID,
			interval: "month",
			features: [
				"All Individual features",
				"Team collaboration",
				"Shared templates",
				"Custom branding",
			],
			portfolioLimit: 3,
		},
		yearly: {
			price: 240,
			priceId: process.env.NEXT_PUBLIC_YEARLY_TEAM_PRICE_ID,
			interval: "year",
			features: [
				"All Individual features",
				"Team collaboration",
				"Shared templates",
				"Custom branding",
			],
			portfolioLimit: 3,
		},
	},
};

export const getPlanPrice = (type, tier, frequency) => {
	return SUBSCRIPTION_PLANS[type][tier][frequency].price;
};

export const getPlanPriceId = (type, tier, frequency) => {
	return SUBSCRIPTION_PLANS[type][tier][frequency].priceId;
};

export const getPlanFeatures = (type, tier, frequency) => {
	return SUBSCRIPTION_PLANS[type][tier][frequency].features;
};

export const getSubscriptionData = (type, frequency) => {
	// Convert type to match SUBSCRIPTION_PLANS keys
	const planType = type.toUpperCase();

	// Validate plan type exists
	if (!SUBSCRIPTION_PLANS[planType]) {
		logger.error(`Invalid subscription type: ${type}`);
		throw new Error(`Invalid subscription type: ${type}`);
	}

	const freq = frequency.toLowerCase();
	const plan = SUBSCRIPTION_PLANS[planType][freq];

	// Validate frequency exists for plan type
	if (!plan) {
		logger.error(`Invalid frequency ${frequency} for plan type ${type}`);
		throw new Error(`Invalid frequency ${frequency} for plan type ${type}`);
	}

	return {
		price: plan.price,
		priceId: plan.priceId,
		interval: plan.interval,
		portfolioLimit: plan.portfolioLimit,
	};
};

================
File: utils/text.js
================
export const slugify = (text) => {
	return text
		.toLowerCase()
		.replace(/\s+/g, "-")
		.replace(/[^\w-]+/g, "");
};

export const extractTextFromPortableTextBlock = (block) => {
	return block.children
		.filter(
			(child) =>
				typeof child === "object" && "_type" in child && "text" in child
		)
		.map((child) => child.text)
		.join("");
};

================
File: utils/webhook-types.js
================
export const WebhookEvents = {
	CHARGE_COMPLETED: "charge.completed",
	SUBSCRIPTION_CANCELLED: "subscription.cancelled",
};

export const PaymentStatus = {
	SUCCESSFUL: "successful",
	FAILED: "failed",
	PENDING: "pending",
};

================
File: vercel.json
================
{
	"headers": [
		{
			"source": "/(.*)",
			"headers": [
				{
					"key": "Access-Control-Allow-Origin",
					"value": "*"
				}
			]
		}
	],
	"builds": [
		{
			"src": "package.json",
			"use": "@vercel/next"
		}
	],
	"buildCommand": "prisma generate && next build",
	"installCommand": "npm install"
}
